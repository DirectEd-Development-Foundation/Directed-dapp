/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js ***!
  \************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _cardano_serialization_lib_bg_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cardano_serialization_lib_bg.js */ \"./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_cardano_serialization_lib_bg_js__WEBPACK_IMPORTED_MODULE_0__]);\n_cardano_serialization_lib_bg_js__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _cardano_serialization_lib_bg_js__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== \"default\") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _cardano_serialization_lib_bg_js__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)\n/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1lc2hzZGsvY29yZS9ub2RlX21vZHVsZXMvQGVtdXJnby9jYXJkYW5vLXNlcmlhbGl6YXRpb24tbGliLWJyb3dzZXIvY2FyZGFub19zZXJpYWxpemF0aW9uX2xpYi5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUE0RCIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1lc2hzZGsvY29yZS9ub2RlX21vZHVsZXMvQGVtdXJnby9jYXJkYW5vLXNlcmlhbGl6YXRpb24tbGliLWJyb3dzZXIvY2FyZGFub19zZXJpYWxpemF0aW9uX2xpYi5qcz83OTYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIHdhc20gZnJvbSBcIi4vY2FyZGFub19zZXJpYWxpemF0aW9uX2xpYl9iZy53YXNtXCI7XG5leHBvcnQgKiBmcm9tIFwiLi9jYXJkYW5vX3NlcmlhbGl6YXRpb25fbGliX2JnLmpzXCI7Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\n"));

/***/ }),

/***/ "./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js":
/*!***************************************************************************************************************************!*\
  !*** ./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js ***!
  \***************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Address\": function() { return /* binding */ Address; },\n/* harmony export */   \"AssetName\": function() { return /* binding */ AssetName; },\n/* harmony export */   \"AssetNames\": function() { return /* binding */ AssetNames; },\n/* harmony export */   \"Assets\": function() { return /* binding */ Assets; },\n/* harmony export */   \"AuxiliaryData\": function() { return /* binding */ AuxiliaryData; },\n/* harmony export */   \"AuxiliaryDataHash\": function() { return /* binding */ AuxiliaryDataHash; },\n/* harmony export */   \"AuxiliaryDataSet\": function() { return /* binding */ AuxiliaryDataSet; },\n/* harmony export */   \"BaseAddress\": function() { return /* binding */ BaseAddress; },\n/* harmony export */   \"BigInt\": function() { return /* binding */ BigInt; },\n/* harmony export */   \"BigNum\": function() { return /* binding */ BigNum; },\n/* harmony export */   \"Bip32PrivateKey\": function() { return /* binding */ Bip32PrivateKey; },\n/* harmony export */   \"Bip32PublicKey\": function() { return /* binding */ Bip32PublicKey; },\n/* harmony export */   \"Block\": function() { return /* binding */ Block; },\n/* harmony export */   \"BlockHash\": function() { return /* binding */ BlockHash; },\n/* harmony export */   \"BootstrapWitness\": function() { return /* binding */ BootstrapWitness; },\n/* harmony export */   \"BootstrapWitnesses\": function() { return /* binding */ BootstrapWitnesses; },\n/* harmony export */   \"ByronAddress\": function() { return /* binding */ ByronAddress; },\n/* harmony export */   \"Certificate\": function() { return /* binding */ Certificate; },\n/* harmony export */   \"CertificateKind\": function() { return /* binding */ CertificateKind; },\n/* harmony export */   \"Certificates\": function() { return /* binding */ Certificates; },\n/* harmony export */   \"CoinSelectionStrategyCIP2\": function() { return /* binding */ CoinSelectionStrategyCIP2; },\n/* harmony export */   \"ConstrPlutusData\": function() { return /* binding */ ConstrPlutusData; },\n/* harmony export */   \"CostModel\": function() { return /* binding */ CostModel; },\n/* harmony export */   \"Costmdls\": function() { return /* binding */ Costmdls; },\n/* harmony export */   \"DNSRecordAorAAAA\": function() { return /* binding */ DNSRecordAorAAAA; },\n/* harmony export */   \"DNSRecordSRV\": function() { return /* binding */ DNSRecordSRV; },\n/* harmony export */   \"DataCost\": function() { return /* binding */ DataCost; },\n/* harmony export */   \"DataHash\": function() { return /* binding */ DataHash; },\n/* harmony export */   \"DatumSource\": function() { return /* binding */ DatumSource; },\n/* harmony export */   \"Ed25519KeyHash\": function() { return /* binding */ Ed25519KeyHash; },\n/* harmony export */   \"Ed25519KeyHashes\": function() { return /* binding */ Ed25519KeyHashes; },\n/* harmony export */   \"Ed25519Signature\": function() { return /* binding */ Ed25519Signature; },\n/* harmony export */   \"EnterpriseAddress\": function() { return /* binding */ EnterpriseAddress; },\n/* harmony export */   \"ExUnitPrices\": function() { return /* binding */ ExUnitPrices; },\n/* harmony export */   \"ExUnits\": function() { return /* binding */ ExUnits; },\n/* harmony export */   \"GeneralTransactionMetadata\": function() { return /* binding */ GeneralTransactionMetadata; },\n/* harmony export */   \"GenesisDelegateHash\": function() { return /* binding */ GenesisDelegateHash; },\n/* harmony export */   \"GenesisHash\": function() { return /* binding */ GenesisHash; },\n/* harmony export */   \"GenesisHashes\": function() { return /* binding */ GenesisHashes; },\n/* harmony export */   \"GenesisKeyDelegation\": function() { return /* binding */ GenesisKeyDelegation; },\n/* harmony export */   \"Header\": function() { return /* binding */ Header; },\n/* harmony export */   \"HeaderBody\": function() { return /* binding */ HeaderBody; },\n/* harmony export */   \"InputWithScriptWitness\": function() { return /* binding */ InputWithScriptWitness; },\n/* harmony export */   \"InputsWithScriptWitness\": function() { return /* binding */ InputsWithScriptWitness; },\n/* harmony export */   \"Int\": function() { return /* binding */ Int; },\n/* harmony export */   \"Ipv4\": function() { return /* binding */ Ipv4; },\n/* harmony export */   \"Ipv6\": function() { return /* binding */ Ipv6; },\n/* harmony export */   \"KESSignature\": function() { return /* binding */ KESSignature; },\n/* harmony export */   \"KESVKey\": function() { return /* binding */ KESVKey; },\n/* harmony export */   \"Language\": function() { return /* binding */ Language; },\n/* harmony export */   \"LanguageKind\": function() { return /* binding */ LanguageKind; },\n/* harmony export */   \"Languages\": function() { return /* binding */ Languages; },\n/* harmony export */   \"LegacyDaedalusPrivateKey\": function() { return /* binding */ LegacyDaedalusPrivateKey; },\n/* harmony export */   \"LinearFee\": function() { return /* binding */ LinearFee; },\n/* harmony export */   \"MIRKind\": function() { return /* binding */ MIRKind; },\n/* harmony export */   \"MIRPot\": function() { return /* binding */ MIRPot; },\n/* harmony export */   \"MIRToStakeCredentials\": function() { return /* binding */ MIRToStakeCredentials; },\n/* harmony export */   \"MetadataJsonSchema\": function() { return /* binding */ MetadataJsonSchema; },\n/* harmony export */   \"MetadataList\": function() { return /* binding */ MetadataList; },\n/* harmony export */   \"MetadataMap\": function() { return /* binding */ MetadataMap; },\n/* harmony export */   \"Mint\": function() { return /* binding */ Mint; },\n/* harmony export */   \"MintAssets\": function() { return /* binding */ MintAssets; },\n/* harmony export */   \"MintBuilder\": function() { return /* binding */ MintBuilder; },\n/* harmony export */   \"MintWitness\": function() { return /* binding */ MintWitness; },\n/* harmony export */   \"MintsAssets\": function() { return /* binding */ MintsAssets; },\n/* harmony export */   \"MoveInstantaneousReward\": function() { return /* binding */ MoveInstantaneousReward; },\n/* harmony export */   \"MoveInstantaneousRewardsCert\": function() { return /* binding */ MoveInstantaneousRewardsCert; },\n/* harmony export */   \"MultiAsset\": function() { return /* binding */ MultiAsset; },\n/* harmony export */   \"MultiHostName\": function() { return /* binding */ MultiHostName; },\n/* harmony export */   \"NativeScript\": function() { return /* binding */ NativeScript; },\n/* harmony export */   \"NativeScriptKind\": function() { return /* binding */ NativeScriptKind; },\n/* harmony export */   \"NativeScripts\": function() { return /* binding */ NativeScripts; },\n/* harmony export */   \"NetworkId\": function() { return /* binding */ NetworkId; },\n/* harmony export */   \"NetworkIdKind\": function() { return /* binding */ NetworkIdKind; },\n/* harmony export */   \"NetworkInfo\": function() { return /* binding */ NetworkInfo; },\n/* harmony export */   \"Nonce\": function() { return /* binding */ Nonce; },\n/* harmony export */   \"OperationalCert\": function() { return /* binding */ OperationalCert; },\n/* harmony export */   \"PlutusData\": function() { return /* binding */ PlutusData; },\n/* harmony export */   \"PlutusDataKind\": function() { return /* binding */ PlutusDataKind; },\n/* harmony export */   \"PlutusDatumSchema\": function() { return /* binding */ PlutusDatumSchema; },\n/* harmony export */   \"PlutusList\": function() { return /* binding */ PlutusList; },\n/* harmony export */   \"PlutusMap\": function() { return /* binding */ PlutusMap; },\n/* harmony export */   \"PlutusScript\": function() { return /* binding */ PlutusScript; },\n/* harmony export */   \"PlutusScriptSource\": function() { return /* binding */ PlutusScriptSource; },\n/* harmony export */   \"PlutusScripts\": function() { return /* binding */ PlutusScripts; },\n/* harmony export */   \"PlutusWitness\": function() { return /* binding */ PlutusWitness; },\n/* harmony export */   \"PlutusWitnesses\": function() { return /* binding */ PlutusWitnesses; },\n/* harmony export */   \"Pointer\": function() { return /* binding */ Pointer; },\n/* harmony export */   \"PointerAddress\": function() { return /* binding */ PointerAddress; },\n/* harmony export */   \"PoolMetadata\": function() { return /* binding */ PoolMetadata; },\n/* harmony export */   \"PoolMetadataHash\": function() { return /* binding */ PoolMetadataHash; },\n/* harmony export */   \"PoolParams\": function() { return /* binding */ PoolParams; },\n/* harmony export */   \"PoolRegistration\": function() { return /* binding */ PoolRegistration; },\n/* harmony export */   \"PoolRetirement\": function() { return /* binding */ PoolRetirement; },\n/* harmony export */   \"PrivateKey\": function() { return /* binding */ PrivateKey; },\n/* harmony export */   \"ProposedProtocolParameterUpdates\": function() { return /* binding */ ProposedProtocolParameterUpdates; },\n/* harmony export */   \"ProtocolParamUpdate\": function() { return /* binding */ ProtocolParamUpdate; },\n/* harmony export */   \"ProtocolVersion\": function() { return /* binding */ ProtocolVersion; },\n/* harmony export */   \"PublicKey\": function() { return /* binding */ PublicKey; },\n/* harmony export */   \"PublicKeys\": function() { return /* binding */ PublicKeys; },\n/* harmony export */   \"Redeemer\": function() { return /* binding */ Redeemer; },\n/* harmony export */   \"RedeemerTag\": function() { return /* binding */ RedeemerTag; },\n/* harmony export */   \"RedeemerTagKind\": function() { return /* binding */ RedeemerTagKind; },\n/* harmony export */   \"Redeemers\": function() { return /* binding */ Redeemers; },\n/* harmony export */   \"Relay\": function() { return /* binding */ Relay; },\n/* harmony export */   \"RelayKind\": function() { return /* binding */ RelayKind; },\n/* harmony export */   \"Relays\": function() { return /* binding */ Relays; },\n/* harmony export */   \"RewardAddress\": function() { return /* binding */ RewardAddress; },\n/* harmony export */   \"RewardAddresses\": function() { return /* binding */ RewardAddresses; },\n/* harmony export */   \"ScriptAll\": function() { return /* binding */ ScriptAll; },\n/* harmony export */   \"ScriptAny\": function() { return /* binding */ ScriptAny; },\n/* harmony export */   \"ScriptDataHash\": function() { return /* binding */ ScriptDataHash; },\n/* harmony export */   \"ScriptHash\": function() { return /* binding */ ScriptHash; },\n/* harmony export */   \"ScriptHashNamespace\": function() { return /* binding */ ScriptHashNamespace; },\n/* harmony export */   \"ScriptHashes\": function() { return /* binding */ ScriptHashes; },\n/* harmony export */   \"ScriptNOfK\": function() { return /* binding */ ScriptNOfK; },\n/* harmony export */   \"ScriptPubkey\": function() { return /* binding */ ScriptPubkey; },\n/* harmony export */   \"ScriptRef\": function() { return /* binding */ ScriptRef; },\n/* harmony export */   \"ScriptSchema\": function() { return /* binding */ ScriptSchema; },\n/* harmony export */   \"SingleHostAddr\": function() { return /* binding */ SingleHostAddr; },\n/* harmony export */   \"SingleHostName\": function() { return /* binding */ SingleHostName; },\n/* harmony export */   \"StakeCredKind\": function() { return /* binding */ StakeCredKind; },\n/* harmony export */   \"StakeCredential\": function() { return /* binding */ StakeCredential; },\n/* harmony export */   \"StakeCredentials\": function() { return /* binding */ StakeCredentials; },\n/* harmony export */   \"StakeDelegation\": function() { return /* binding */ StakeDelegation; },\n/* harmony export */   \"StakeDeregistration\": function() { return /* binding */ StakeDeregistration; },\n/* harmony export */   \"StakeRegistration\": function() { return /* binding */ StakeRegistration; },\n/* harmony export */   \"Strings\": function() { return /* binding */ Strings; },\n/* harmony export */   \"TimelockExpiry\": function() { return /* binding */ TimelockExpiry; },\n/* harmony export */   \"TimelockStart\": function() { return /* binding */ TimelockStart; },\n/* harmony export */   \"Transaction\": function() { return /* binding */ Transaction; },\n/* harmony export */   \"TransactionBatch\": function() { return /* binding */ TransactionBatch; },\n/* harmony export */   \"TransactionBatchList\": function() { return /* binding */ TransactionBatchList; },\n/* harmony export */   \"TransactionBodies\": function() { return /* binding */ TransactionBodies; },\n/* harmony export */   \"TransactionBody\": function() { return /* binding */ TransactionBody; },\n/* harmony export */   \"TransactionBuilder\": function() { return /* binding */ TransactionBuilder; },\n/* harmony export */   \"TransactionBuilderConfig\": function() { return /* binding */ TransactionBuilderConfig; },\n/* harmony export */   \"TransactionBuilderConfigBuilder\": function() { return /* binding */ TransactionBuilderConfigBuilder; },\n/* harmony export */   \"TransactionHash\": function() { return /* binding */ TransactionHash; },\n/* harmony export */   \"TransactionInput\": function() { return /* binding */ TransactionInput; },\n/* harmony export */   \"TransactionInputs\": function() { return /* binding */ TransactionInputs; },\n/* harmony export */   \"TransactionMetadatum\": function() { return /* binding */ TransactionMetadatum; },\n/* harmony export */   \"TransactionMetadatumKind\": function() { return /* binding */ TransactionMetadatumKind; },\n/* harmony export */   \"TransactionMetadatumLabels\": function() { return /* binding */ TransactionMetadatumLabels; },\n/* harmony export */   \"TransactionOutput\": function() { return /* binding */ TransactionOutput; },\n/* harmony export */   \"TransactionOutputAmountBuilder\": function() { return /* binding */ TransactionOutputAmountBuilder; },\n/* harmony export */   \"TransactionOutputBuilder\": function() { return /* binding */ TransactionOutputBuilder; },\n/* harmony export */   \"TransactionOutputs\": function() { return /* binding */ TransactionOutputs; },\n/* harmony export */   \"TransactionUnspentOutput\": function() { return /* binding */ TransactionUnspentOutput; },\n/* harmony export */   \"TransactionUnspentOutputs\": function() { return /* binding */ TransactionUnspentOutputs; },\n/* harmony export */   \"TransactionWitnessSet\": function() { return /* binding */ TransactionWitnessSet; },\n/* harmony export */   \"TransactionWitnessSets\": function() { return /* binding */ TransactionWitnessSets; },\n/* harmony export */   \"TxBuilderConstants\": function() { return /* binding */ TxBuilderConstants; },\n/* harmony export */   \"TxInputsBuilder\": function() { return /* binding */ TxInputsBuilder; },\n/* harmony export */   \"URL\": function() { return /* binding */ URL; },\n/* harmony export */   \"UnitInterval\": function() { return /* binding */ UnitInterval; },\n/* harmony export */   \"Update\": function() { return /* binding */ Update; },\n/* harmony export */   \"VRFCert\": function() { return /* binding */ VRFCert; },\n/* harmony export */   \"VRFKeyHash\": function() { return /* binding */ VRFKeyHash; },\n/* harmony export */   \"VRFVKey\": function() { return /* binding */ VRFVKey; },\n/* harmony export */   \"Value\": function() { return /* binding */ Value; },\n/* harmony export */   \"Vkey\": function() { return /* binding */ Vkey; },\n/* harmony export */   \"Vkeys\": function() { return /* binding */ Vkeys; },\n/* harmony export */   \"Vkeywitness\": function() { return /* binding */ Vkeywitness; },\n/* harmony export */   \"Vkeywitnesses\": function() { return /* binding */ Vkeywitnesses; },\n/* harmony export */   \"Withdrawals\": function() { return /* binding */ Withdrawals; },\n/* harmony export */   \"__wbg_String_91fba7ded13ba54c\": function() { return /* binding */ __wbg_String_91fba7ded13ba54c; },\n/* harmony export */   \"__wbg_buffer_3f3d764d4747d564\": function() { return /* binding */ __wbg_buffer_3f3d764d4747d564; },\n/* harmony export */   \"__wbg_call_168da88779e35f61\": function() { return /* binding */ __wbg_call_168da88779e35f61; },\n/* harmony export */   \"__wbg_call_97ae9d8645dc388b\": function() { return /* binding */ __wbg_call_97ae9d8645dc388b; },\n/* harmony export */   \"__wbg_call_eae29933372a39be\": function() { return /* binding */ __wbg_call_eae29933372a39be; },\n/* harmony export */   \"__wbg_crypto_e1d53a1d73fb10b8\": function() { return /* binding */ __wbg_crypto_e1d53a1d73fb10b8; },\n/* harmony export */   \"__wbg_crypto_e95a6e54c5c2e37f\": function() { return /* binding */ __wbg_crypto_e95a6e54c5c2e37f; },\n/* harmony export */   \"__wbg_getRandomValues_02639197c8166a96\": function() { return /* binding */ __wbg_getRandomValues_02639197c8166a96; },\n/* harmony export */   \"__wbg_getRandomValues_805f1c3d65988a5a\": function() { return /* binding */ __wbg_getRandomValues_805f1c3d65988a5a; },\n/* harmony export */   \"__wbg_getRandomValues_dc67302a7bd1aec5\": function() { return /* binding */ __wbg_getRandomValues_dc67302a7bd1aec5; },\n/* harmony export */   \"__wbg_globalThis_7f206bda628d5286\": function() { return /* binding */ __wbg_globalThis_7f206bda628d5286; },\n/* harmony export */   \"__wbg_global_ba75c50d1cf384f4\": function() { return /* binding */ __wbg_global_ba75c50d1cf384f4; },\n/* harmony export */   \"__wbg_length_9e1ae1900cb0fbd5\": function() { return /* binding */ __wbg_length_9e1ae1900cb0fbd5; },\n/* harmony export */   \"__wbg_msCrypto_6e7d3e1f92610cbb\": function() { return /* binding */ __wbg_msCrypto_6e7d3e1f92610cbb; },\n/* harmony export */   \"__wbg_new_0b9bfdd97583284e\": function() { return /* binding */ __wbg_new_0b9bfdd97583284e; },\n/* harmony export */   \"__wbg_new_1d9a920c6bfc44a8\": function() { return /* binding */ __wbg_new_1d9a920c6bfc44a8; },\n/* harmony export */   \"__wbg_new_268f7b7dd3430798\": function() { return /* binding */ __wbg_new_268f7b7dd3430798; },\n/* harmony export */   \"__wbg_new_8c3f0052272a457a\": function() { return /* binding */ __wbg_new_8c3f0052272a457a; },\n/* harmony export */   \"__wbg_new_d87f272aec784ec0\": function() { return /* binding */ __wbg_new_d87f272aec784ec0; },\n/* harmony export */   \"__wbg_newnoargs_b5b063fc6c2f0376\": function() { return /* binding */ __wbg_newnoargs_b5b063fc6c2f0376; },\n/* harmony export */   \"__wbg_newwithlength_f5933855e4f48a19\": function() { return /* binding */ __wbg_newwithlength_f5933855e4f48a19; },\n/* harmony export */   \"__wbg_node_080f4b19d15bc1fe\": function() { return /* binding */ __wbg_node_080f4b19d15bc1fe; },\n/* harmony export */   \"__wbg_process_038c26bf42b093f8\": function() { return /* binding */ __wbg_process_038c26bf42b093f8; },\n/* harmony export */   \"__wbg_randomFillSync_6894564c2c334c42\": function() { return /* binding */ __wbg_randomFillSync_6894564c2c334c42; },\n/* harmony export */   \"__wbg_randomFillSync_dd2297de5917c74e\": function() { return /* binding */ __wbg_randomFillSync_dd2297de5917c74e; },\n/* harmony export */   \"__wbg_require_0993fe224bf8e202\": function() { return /* binding */ __wbg_require_0993fe224bf8e202; },\n/* harmony export */   \"__wbg_require_78a3dcfbdba9cbce\": function() { return /* binding */ __wbg_require_78a3dcfbdba9cbce; },\n/* harmony export */   \"__wbg_self_6d479506f72c6a71\": function() { return /* binding */ __wbg_self_6d479506f72c6a71; },\n/* harmony export */   \"__wbg_self_e0b3266d2d9eba1a\": function() { return /* binding */ __wbg_self_e0b3266d2d9eba1a; },\n/* harmony export */   \"__wbg_set_20cbc34131e76824\": function() { return /* binding */ __wbg_set_20cbc34131e76824; },\n/* harmony export */   \"__wbg_set_83db9690f9353e79\": function() { return /* binding */ __wbg_set_83db9690f9353e79; },\n/* harmony export */   \"__wbg_set_933729cf5b66ac11\": function() { return /* binding */ __wbg_set_933729cf5b66ac11; },\n/* harmony export */   \"__wbg_set_a68214f35c417fa9\": function() { return /* binding */ __wbg_set_a68214f35c417fa9; },\n/* harmony export */   \"__wbg_subarray_58ad4efbb5bcb886\": function() { return /* binding */ __wbg_subarray_58ad4efbb5bcb886; },\n/* harmony export */   \"__wbg_versions_ab37218d2f0b24a8\": function() { return /* binding */ __wbg_versions_ab37218d2f0b24a8; },\n/* harmony export */   \"__wbg_window_f2557cc78490aceb\": function() { return /* binding */ __wbg_window_f2557cc78490aceb; },\n/* harmony export */   \"__wbindgen_debug_string\": function() { return /* binding */ __wbindgen_debug_string; },\n/* harmony export */   \"__wbindgen_error_new\": function() { return /* binding */ __wbindgen_error_new; },\n/* harmony export */   \"__wbindgen_is_function\": function() { return /* binding */ __wbindgen_is_function; },\n/* harmony export */   \"__wbindgen_is_object\": function() { return /* binding */ __wbindgen_is_object; },\n/* harmony export */   \"__wbindgen_is_string\": function() { return /* binding */ __wbindgen_is_string; },\n/* harmony export */   \"__wbindgen_is_undefined\": function() { return /* binding */ __wbindgen_is_undefined; },\n/* harmony export */   \"__wbindgen_jsval_eq\": function() { return /* binding */ __wbindgen_jsval_eq; },\n/* harmony export */   \"__wbindgen_memory\": function() { return /* binding */ __wbindgen_memory; },\n/* harmony export */   \"__wbindgen_number_new\": function() { return /* binding */ __wbindgen_number_new; },\n/* harmony export */   \"__wbindgen_object_clone_ref\": function() { return /* binding */ __wbindgen_object_clone_ref; },\n/* harmony export */   \"__wbindgen_object_drop_ref\": function() { return /* binding */ __wbindgen_object_drop_ref; },\n/* harmony export */   \"__wbindgen_string_get\": function() { return /* binding */ __wbindgen_string_get; },\n/* harmony export */   \"__wbindgen_string_new\": function() { return /* binding */ __wbindgen_string_new; },\n/* harmony export */   \"__wbindgen_throw\": function() { return /* binding */ __wbindgen_throw; },\n/* harmony export */   \"calculate_ex_units_ceil_cost\": function() { return /* binding */ calculate_ex_units_ceil_cost; },\n/* harmony export */   \"create_send_all\": function() { return /* binding */ create_send_all; },\n/* harmony export */   \"decode_arbitrary_bytes_from_metadatum\": function() { return /* binding */ decode_arbitrary_bytes_from_metadatum; },\n/* harmony export */   \"decode_metadatum_to_json_str\": function() { return /* binding */ decode_metadatum_to_json_str; },\n/* harmony export */   \"decode_plutus_datum_to_json_str\": function() { return /* binding */ decode_plutus_datum_to_json_str; },\n/* harmony export */   \"decrypt_with_password\": function() { return /* binding */ decrypt_with_password; },\n/* harmony export */   \"encode_arbitrary_bytes_as_metadatum\": function() { return /* binding */ encode_arbitrary_bytes_as_metadatum; },\n/* harmony export */   \"encode_json_str_to_metadatum\": function() { return /* binding */ encode_json_str_to_metadatum; },\n/* harmony export */   \"encode_json_str_to_native_script\": function() { return /* binding */ encode_json_str_to_native_script; },\n/* harmony export */   \"encode_json_str_to_plutus_datum\": function() { return /* binding */ encode_json_str_to_plutus_datum; },\n/* harmony export */   \"encrypt_with_password\": function() { return /* binding */ encrypt_with_password; },\n/* harmony export */   \"get_deposit\": function() { return /* binding */ get_deposit; },\n/* harmony export */   \"get_implicit_input\": function() { return /* binding */ get_implicit_input; },\n/* harmony export */   \"hash_auxiliary_data\": function() { return /* binding */ hash_auxiliary_data; },\n/* harmony export */   \"hash_plutus_data\": function() { return /* binding */ hash_plutus_data; },\n/* harmony export */   \"hash_script_data\": function() { return /* binding */ hash_script_data; },\n/* harmony export */   \"hash_transaction\": function() { return /* binding */ hash_transaction; },\n/* harmony export */   \"make_daedalus_bootstrap_witness\": function() { return /* binding */ make_daedalus_bootstrap_witness; },\n/* harmony export */   \"make_icarus_bootstrap_witness\": function() { return /* binding */ make_icarus_bootstrap_witness; },\n/* harmony export */   \"make_vkey_witness\": function() { return /* binding */ make_vkey_witness; },\n/* harmony export */   \"min_ada_for_output\": function() { return /* binding */ min_ada_for_output; },\n/* harmony export */   \"min_ada_required\": function() { return /* binding */ min_ada_required; },\n/* harmony export */   \"min_fee\": function() { return /* binding */ min_fee; },\n/* harmony export */   \"min_script_fee\": function() { return /* binding */ min_script_fee; }\n/* harmony export */ });\n/* harmony import */ var _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cardano_serialization_lib_bg.wasm */ \"./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm\");\n/* module decorator */ module = __webpack_require__.hmd(module);\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__]);\n_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nconst lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\n\nlet cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;\n\nlet cachedTextEncoder = new lTextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n\nlet cachedUint32Memory0 = new Uint32Array();\n\nfunction getUint32Memory0() {\n    if (cachedUint32Memory0.byteLength === 0) {\n        cachedUint32Memory0 = new Uint32Array(_cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory.buffer);\n    }\n    return cachedUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction passArray32ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 4);\n    getUint32Memory0().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} bytes\n* @returns {TransactionMetadatum}\n*/\nfunction encode_arbitrary_bytes_as_metadatum(bytes) {\n    const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encode_arbitrary_bytes_as_metadatum(ptr0, len0);\n    return TransactionMetadatum.__wrap(ret);\n}\n\n/**\n* @param {TransactionMetadatum} metadata\n* @returns {Uint8Array}\n*/\nfunction decode_arbitrary_bytes_from_metadatum(metadata) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadata, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decode_arbitrary_bytes_from_metadatum(retptr, metadata.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        var v0 = getArrayU8FromWasm0(r0, r1).slice();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n        return v0;\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {TransactionMetadatum}\n*/\nfunction encode_json_str_to_metadatum(json, schema) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encode_json_str_to_metadatum(retptr, ptr0, len0, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return TransactionMetadatum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {TransactionMetadatum} metadatum\n* @param {number} schema\n* @returns {string}\n*/\nfunction decode_metadatum_to_json_str(metadatum, schema) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(metadatum, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decode_metadatum_to_json_str(retptr, metadatum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr0 = r0;\n        var len0 = r1;\n        if (r3) {\n            ptr0 = 0; len0 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr0, len0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n    }\n}\n\n/**\n* @param {string} json\n* @param {number} schema\n* @returns {PlutusData}\n*/\nfunction encode_json_str_to_plutus_datum(json, schema) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encode_json_str_to_plutus_datum(retptr, ptr0, len0, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return PlutusData.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {PlutusData} datum\n* @param {number} schema\n* @returns {string}\n*/\nfunction decode_plutus_datum_to_json_str(datum, schema) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(datum, PlutusData);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decode_plutus_datum_to_json_str(retptr, datum.ptr, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr0 = r0;\n        var len0 = r1;\n        if (r3) {\n            ptr0 = 0; len0 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr0, len0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n    }\n}\n\n/**\n* @param {Transaction} tx\n* @param {LinearFee} linear_fee\n* @returns {BigNum}\n*/\nfunction min_fee(tx, linear_fee) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(tx, Transaction);\n        _assertClass(linear_fee, LinearFee);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.min_fee(retptr, tx.ptr, linear_fee.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {ExUnits} ex_units\n* @param {ExUnitPrices} ex_unit_prices\n* @returns {BigNum}\n*/\nfunction calculate_ex_units_ceil_cost(ex_units, ex_unit_prices) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(ex_units, ExUnits);\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.calculate_ex_units_ceil_cost(retptr, ex_units.ptr, ex_unit_prices.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Transaction} tx\n* @param {ExUnitPrices} ex_unit_prices\n* @returns {BigNum}\n*/\nfunction min_script_fee(tx, ex_unit_prices) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(tx, Transaction);\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.min_script_fee(retptr, tx.ptr, ex_unit_prices.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} password\n* @param {string} salt\n* @param {string} nonce\n* @param {string} data\n* @returns {string}\n*/\nfunction encrypt_with_password(password, salt, nonce, data) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(password, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(salt, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(nonce, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        const ptr3 = passStringToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len3 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encrypt_with_password(retptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr4 = r0;\n        var len4 = r1;\n        if (r3) {\n            ptr4 = 0; len4 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr4, len4);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr4, len4);\n    }\n}\n\n/**\n* @param {string} password\n* @param {string} data\n* @returns {string}\n*/\nfunction decrypt_with_password(password, data) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(password, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.decrypt_with_password(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {Address} address\n* @param {TransactionUnspentOutputs} utxos\n* @param {TransactionBuilderConfig} config\n* @returns {TransactionBatchList}\n*/\nfunction create_send_all(address, utxos, config) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(address, Address);\n        _assertClass(utxos, TransactionUnspentOutputs);\n        _assertClass(config, TransactionBuilderConfig);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.create_send_all(retptr, address.ptr, utxos.ptr, config.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return TransactionBatchList.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {LegacyDaedalusPrivateKey} key\n* @returns {BootstrapWitness}\n*/\nfunction make_daedalus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, LegacyDaedalusPrivateKey);\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.make_daedalus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {ByronAddress} addr\n* @param {Bip32PrivateKey} key\n* @returns {BootstrapWitness}\n*/\nfunction make_icarus_bootstrap_witness(tx_body_hash, addr, key) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(addr, ByronAddress);\n    _assertClass(key, Bip32PrivateKey);\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.make_icarus_bootstrap_witness(tx_body_hash.ptr, addr.ptr, key.ptr);\n    return BootstrapWitness.__wrap(ret);\n}\n\n/**\n* @param {TransactionHash} tx_body_hash\n* @param {PrivateKey} sk\n* @returns {Vkeywitness}\n*/\nfunction make_vkey_witness(tx_body_hash, sk) {\n    _assertClass(tx_body_hash, TransactionHash);\n    _assertClass(sk, PrivateKey);\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.make_vkey_witness(tx_body_hash.ptr, sk.ptr);\n    return Vkeywitness.__wrap(ret);\n}\n\n/**\n* @param {AuxiliaryData} auxiliary_data\n* @returns {AuxiliaryDataHash}\n*/\nfunction hash_auxiliary_data(auxiliary_data) {\n    _assertClass(auxiliary_data, AuxiliaryData);\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_auxiliary_data(auxiliary_data.ptr);\n    return AuxiliaryDataHash.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} tx_body\n* @returns {TransactionHash}\n*/\nfunction hash_transaction(tx_body) {\n    _assertClass(tx_body, TransactionBody);\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_transaction(tx_body.ptr);\n    return TransactionHash.__wrap(ret);\n}\n\n/**\n* @param {PlutusData} plutus_data\n* @returns {DataHash}\n*/\nfunction hash_plutus_data(plutus_data) {\n    _assertClass(plutus_data, PlutusData);\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_plutus_data(plutus_data.ptr);\n    return DataHash.__wrap(ret);\n}\n\n/**\n* @param {Redeemers} redeemers\n* @param {Costmdls} cost_models\n* @param {PlutusList | undefined} datums\n* @returns {ScriptDataHash}\n*/\nfunction hash_script_data(redeemers, cost_models, datums) {\n    _assertClass(redeemers, Redeemers);\n    _assertClass(cost_models, Costmdls);\n    let ptr0 = 0;\n    if (!isLikeNone(datums)) {\n        _assertClass(datums, PlutusList);\n        ptr0 = datums.ptr;\n        datums.ptr = 0;\n    }\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.hash_script_data(redeemers.ptr, cost_models.ptr, ptr0);\n    return ScriptDataHash.__wrap(ret);\n}\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {Value}\n*/\nfunction get_implicit_input(txbody, pool_deposit, key_deposit) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(txbody, TransactionBody);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.get_implicit_input(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return Value.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {TransactionBody} txbody\n* @param {BigNum} pool_deposit\n* @param {BigNum} key_deposit\n* @returns {BigNum}\n*/\nfunction get_deposit(txbody, pool_deposit, key_deposit) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(txbody, TransactionBody);\n        _assertClass(pool_deposit, BigNum);\n        _assertClass(key_deposit, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.get_deposit(retptr, txbody.ptr, pool_deposit.ptr, key_deposit.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n*returns minimal amount of ada for the output for case when the amount is included to the output\n* @param {TransactionOutput} output\n* @param {DataCost} data_cost\n* @returns {BigNum}\n*/\nfunction min_ada_for_output(output, data_cost) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(output, TransactionOutput);\n        _assertClass(data_cost, DataCost);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.min_ada_for_output(retptr, output.ptr, data_cost.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* !!! DEPRECATED !!!\n* This function uses outdated set of arguments.\n* Use `min_ada_for_output` instead\n* @param {Value} assets\n* @param {boolean} has_data_hash\n* @param {BigNum} coins_per_utxo_word\n* @returns {BigNum}\n*/\nfunction min_ada_required(assets, has_data_hash, coins_per_utxo_word) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(assets, Value);\n        _assertClass(coins_per_utxo_word, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.min_ada_required(retptr, assets.ptr, has_data_hash, coins_per_utxo_word.ptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return BigNum.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* Receives a script JSON string\n* and returns a NativeScript.\n* Cardano Wallet and Node styles are supported.\n*\n* * wallet: https://github.com/input-output-hk/cardano-wallet/blob/master/specifications/api/swagger.yaml\n* * node: https://github.com/input-output-hk/cardano-node/blob/master/doc/reference/simple-scripts.md\n*\n* self_xpub is expected to be a Bip32PublicKey as hex-encoded bytes\n* @param {string} json\n* @param {string} self_xpub\n* @param {number} schema\n* @returns {NativeScript}\n*/\nfunction encode_json_str_to_native_script(json, self_xpub, schema) {\n    try {\n        const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(self_xpub, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.encode_json_str_to_native_script(retptr, ptr0, len0, ptr1, len1, schema);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return NativeScript.__wrap(r0);\n    } finally {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n/**\n*/\nconst CertificateKind = Object.freeze({ StakeRegistration:0,\"0\":\"StakeRegistration\",StakeDeregistration:1,\"1\":\"StakeDeregistration\",StakeDelegation:2,\"2\":\"StakeDelegation\",PoolRegistration:3,\"3\":\"PoolRegistration\",PoolRetirement:4,\"4\":\"PoolRetirement\",GenesisKeyDelegation:5,\"5\":\"GenesisKeyDelegation\",MoveInstantaneousRewardsCert:6,\"6\":\"MoveInstantaneousRewardsCert\", });\n/**\n*/\nconst MIRPot = Object.freeze({ Reserves:0,\"0\":\"Reserves\",Treasury:1,\"1\":\"Treasury\", });\n/**\n*/\nconst MIRKind = Object.freeze({ ToOtherPot:0,\"0\":\"ToOtherPot\",ToStakeCredentials:1,\"1\":\"ToStakeCredentials\", });\n/**\n*/\nconst RelayKind = Object.freeze({ SingleHostAddr:0,\"0\":\"SingleHostAddr\",SingleHostName:1,\"1\":\"SingleHostName\",MultiHostName:2,\"2\":\"MultiHostName\", });\n/**\n*/\nconst NativeScriptKind = Object.freeze({ ScriptPubkey:0,\"0\":\"ScriptPubkey\",ScriptAll:1,\"1\":\"ScriptAll\",ScriptAny:2,\"2\":\"ScriptAny\",ScriptNOfK:3,\"3\":\"ScriptNOfK\",TimelockStart:4,\"4\":\"TimelockStart\",TimelockExpiry:5,\"5\":\"TimelockExpiry\", });\n/**\n* Each new language uses a different namespace for hashing its script\n* This is because you could have a language where the same bytes have different semantics\n* So this avoids scripts in different languages mapping to the same hash\n* Note that the enum value here is different than the enum value for deciding the cost model of a script\n*/\nconst ScriptHashNamespace = Object.freeze({ NativeScript:0,\"0\":\"NativeScript\",PlutusScript:1,\"1\":\"PlutusScript\",PlutusScriptV2:2,\"2\":\"PlutusScriptV2\", });\n/**\n*/\nconst NetworkIdKind = Object.freeze({ Testnet:0,\"0\":\"Testnet\",Mainnet:1,\"1\":\"Mainnet\", });\n/**\n*/\nconst TransactionMetadatumKind = Object.freeze({ MetadataMap:0,\"0\":\"MetadataMap\",MetadataList:1,\"1\":\"MetadataList\",Int:2,\"2\":\"Int\",Bytes:3,\"3\":\"Bytes\",Text:4,\"4\":\"Text\", });\n/**\n*/\nconst MetadataJsonSchema = Object.freeze({ NoConversions:0,\"0\":\"NoConversions\",BasicConversions:1,\"1\":\"BasicConversions\",DetailedSchema:2,\"2\":\"DetailedSchema\", });\n/**\n*/\nconst LanguageKind = Object.freeze({ PlutusV1:0,\"0\":\"PlutusV1\",PlutusV2:1,\"1\":\"PlutusV2\", });\n/**\n*/\nconst PlutusDataKind = Object.freeze({ ConstrPlutusData:0,\"0\":\"ConstrPlutusData\",Map:1,\"1\":\"Map\",List:2,\"2\":\"List\",Integer:3,\"3\":\"Integer\",Bytes:4,\"4\":\"Bytes\", });\n/**\n*/\nconst RedeemerTagKind = Object.freeze({ Spend:0,\"0\":\"Spend\",Mint:1,\"1\":\"Mint\",Cert:2,\"2\":\"Cert\",Reward:3,\"3\":\"Reward\", });\n/**\n* JSON <-> PlutusData conversion schemas.\n* Follows ScriptDataJsonSchema in cardano-cli defined at:\n* https://github.com/input-output-hk/cardano-node/blob/master/cardano-api/src/Cardano/Api/ScriptData.hs#L254\n*\n* All methods here have the following restrictions due to limitations on dependencies:\n* * JSON numbers above u64::MAX (positive) or below i64::MIN (negative) will throw errors\n* * Hex strings for bytes don't accept odd-length (half-byte) strings.\n*      cardano-cli seems to support these however but it seems to be different than just 0-padding\n*      on either side when tested so proceed with caution\n*/\nconst PlutusDatumSchema = Object.freeze({\n/**\n* ScriptDataJsonNoSchema in cardano-node.\n*\n* This is the format used by --script-data-value in cardano-cli\n* This tries to accept most JSON but does not support the full spectrum of Plutus datums.\n* From JSON:\n* * null/true/false/floats NOT supported\n* * strings starting with 0x are treated as hex bytes. All other strings are encoded as their utf8 bytes.\n* To JSON:\n* * ConstrPlutusData not supported in ANY FORM (neither keys nor values)\n* * Lists not supported in keys\n* * Maps not supported in keys\n*/\nBasicConversions:0,\"0\":\"BasicConversions\",\n/**\n* ScriptDataJsonDetailedSchema in cardano-node.\n*\n* This is the format used by --script-data-file in cardano-cli\n* This covers almost all (only minor exceptions) Plutus datums, but the JSON must conform to a strict schema.\n* The schema specifies that ALL keys and ALL values must be contained in a JSON map with 2 cases:\n* 1. For ConstrPlutusData there must be two fields \"constructor\" contianing a number and \"fields\" containing its fields\n*    e.g. { \"constructor\": 2, \"fields\": [{\"int\": 2}, {\"list\": [{\"bytes\": \"CAFEF00D\"}]}]}\n* 2. For all other cases there must be only one field named \"int\", \"bytes\", \"list\" or \"map\"\n*    Integer's value is a JSON number e.g. {\"int\": 100}\n*    Bytes' value is a hex string representing the bytes WITHOUT any prefix e.g. {\"bytes\": \"CAFEF00D\"}\n*    Lists' value is a JSON list of its elements encoded via the same schema e.g. {\"list\": [{\"bytes\": \"CAFEF00D\"}]}\n*    Maps' value is a JSON list of objects, one for each key-value pair in the map, with keys \"k\" and \"v\"\n*          respectively with their values being the plutus datum encoded via this same schema\n*          e.g. {\"map\": [\n*              {\"k\": {\"int\": 2}, \"v\": {\"int\": 5}},\n*              {\"k\": {\"map\": [{\"k\": {\"list\": [{\"int\": 1}]}, \"v\": {\"bytes\": \"FF03\"}}]}, \"v\": {\"list\": []}}\n*          ]}\n* From JSON:\n* * null/true/false/floats NOT supported\n* * the JSON must conform to a very specific schema\n* To JSON:\n* * all Plutus datums should be fully supported outside of the integer range limitations outlined above.\n*/\nDetailedSchema:1,\"1\":\"DetailedSchema\", });\n/**\n*/\nconst CoinSelectionStrategyCIP2 = Object.freeze({\n/**\n* Performs CIP2's Largest First ada-only selection. Will error if outputs contain non-ADA assets.\n*/\nLargestFirst:0,\"0\":\"LargestFirst\",\n/**\n* Performs CIP2's Random Improve ada-only selection. Will error if outputs contain non-ADA assets.\n*/\nRandomImprove:1,\"1\":\"RandomImprove\",\n/**\n* Same as LargestFirst, but before adding ADA, will insert by largest-first for each asset type.\n*/\nLargestFirstMultiAsset:2,\"2\":\"LargestFirstMultiAsset\",\n/**\n* Same as RandomImprove, but before adding ADA, will insert by random-improve for each asset type.\n*/\nRandomImproveMultiAsset:3,\"3\":\"RandomImproveMultiAsset\", });\n/**\n*/\nconst StakeCredKind = Object.freeze({ Key:0,\"0\":\"Key\",Script:1,\"1\":\"Script\", });\n/**\n* Used to choosed the schema for a script JSON string\n*/\nconst ScriptSchema = Object.freeze({ Wallet:0,\"0\":\"Wallet\",Node:1,\"1\":\"Node\", });\n/**\n*/\nclass Address {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Address.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_address_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Address}\n    */\n    static from_bytes(data) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Address}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Address}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string | undefined} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            var ptr0 = isLikeNone(prefix) ? 0 : passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            var len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Address}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Address.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.address_network_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass AssetName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_assetname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetName}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {AssetName}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {AssetName}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} name\n    * @returns {AssetName}\n    */\n    static new(name) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(name, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    name() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetname_name(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass AssetNames {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AssetNames.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_assetnames_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AssetNames}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {AssetNames}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {AssetNames}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AssetNames.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_new();\n        return AssetNames.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {AssetName}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_get(this.ptr, index);\n        return AssetName.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} elem\n    */\n    add(elem) {\n        _assertClass(elem, AssetName);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assetnames_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Assets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Assets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_assets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Assets}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Assets}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Assets}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Assets.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Assets}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_new();\n        return Assets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.assets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/**\n*/\nclass AuxiliaryData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_auxiliarydata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryData}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {AuxiliaryData}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {AuxiliaryData}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {AuxiliaryData}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_new();\n        return AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {GeneralTransactionMetadata | undefined}\n    */\n    metadata() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_metadata(this.ptr);\n        return ret === 0 ? undefined : GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @param {GeneralTransactionMetadata} metadata\n    */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n    plutus_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n    * @returns {boolean}\n    */\n    prefer_alonzo_format() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_prefer_alonzo_format(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {boolean} prefer\n    */\n    set_prefer_alonzo_format(prefer) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydata_set_prefer_alonzo_format(this.ptr, prefer);\n    }\n}\n/**\n*/\nclass AuxiliaryDataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_auxiliarydatahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {AuxiliaryDataHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return AuxiliaryDataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass AuxiliaryDataSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(AuxiliaryDataSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_auxiliarydataset_free(ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_new();\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} tx_index\n    * @param {AuxiliaryData} data\n    * @returns {AuxiliaryData | undefined}\n    */\n    insert(tx_index, data) {\n        _assertClass(data, AuxiliaryData);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_insert(this.ptr, tx_index, data.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {number} tx_index\n    * @returns {AuxiliaryData | undefined}\n    */\n    get(tx_index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_get(this.ptr, tx_index);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    indices() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.auxiliarydataset_indices(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass BaseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BaseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_baseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {StakeCredential} stake\n    * @returns {BaseAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, StakeCredential);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_new(network, payment.ptr, stake.ptr);\n        return BaseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_cred() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_stake_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {BaseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.baseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : BaseAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass BigInt {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigInt.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bigint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigInt}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {BigInt}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {BigInt}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_zero() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_u64() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_as_u64(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {Int | undefined}\n    */\n    as_int() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_as_int(this.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {string} text\n    * @returns {BigInt}\n    */\n    static from_str(text) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigInt.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {BigInt} other\n    * @returns {BigInt}\n    */\n    add(other) {\n        _assertClass(other, BigInt);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_add(this.ptr, other.ptr);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} other\n    * @returns {BigInt}\n    */\n    mul(other) {\n        _assertClass(other, BigInt);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_mul(this.ptr, other.ptr);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {BigInt}\n    */\n    static one() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_one();\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {BigInt}\n    */\n    increment() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_increment(this.ptr);\n        return BigInt.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} other\n    * @returns {BigInt}\n    */\n    div_ceil(other) {\n        _assertClass(other, BigInt);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bigint_div_ceil(this.ptr, other.ptr);\n        return BigInt.__wrap(ret);\n    }\n}\n/**\n*/\nclass BigNum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BigNum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bignum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BigNum}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {BigNum}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {BigNum}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} string\n    * @returns {BigNum}\n    */\n    static from_str(string) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    static zero() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_zero();\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    static one() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_one();\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_zero() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    div_floor(other) {\n        _assertClass(other, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_div_floor(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_mul(other) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_checked_mul(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_add(other) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_checked_add(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    checked_sub(other) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(other, BigNum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_checked_sub(retptr, this.ptr, other.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * returns 0 if it would otherwise underflow\n    * @param {BigNum} other\n    * @returns {BigNum}\n    */\n    clamped_sub(other) {\n        _assertClass(other, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_clamped_sub(this.ptr, other.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} rhs_value\n    * @returns {number}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_compare(this.ptr, rhs_value.ptr);\n        return ret;\n    }\n    /**\n    * @param {BigNum} rhs_value\n    * @returns {boolean}\n    */\n    less_than(rhs_value) {\n        _assertClass(rhs_value, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_less_than(this.ptr, rhs_value.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum}\n    */\n    static max_value() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_max_value();\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} a\n    * @param {BigNum} b\n    * @returns {BigNum}\n    */\n    static max(a, b) {\n        _assertClass(a, BigNum);\n        _assertClass(b, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bignum_max(a.ptr, b.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nclass Bip32PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bip32privatekey_free(ptr);\n    }\n    /**\n    * derive this private key with the given index.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PrivateKey}\n    */\n    derive(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_derive(this.ptr, index);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * 128-byte xprv a key format in Cardano that some software still uses or requires\n    * the traditional 96-byte xprv is simply encoded as\n    * prv | chaincode\n    * however, because some software may not know how to compute a public key from a private key,\n    * the 128-byte inlines the public key in the following format\n    * prv | pub | chaincode\n    * so be careful if you see the term \"xprv\" as it could refer to either one\n    * our library does not require the pub (instead we compute the pub key when needed)\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_128_xprv(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_128_xprv(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * see from_128_xprv\n    * @returns {Uint8Array}\n    */\n    to_128_xprv() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_128_xprv(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Bip32PrivateKey}\n    */\n    static generate_ed25519_bip32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_generate_ed25519_bip32(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    to_raw_key() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_raw_key(this.ptr);\n        return PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Bip32PublicKey}\n    */\n    to_public() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_public(this.ptr);\n        return Bip32PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {Uint8Array} entropy\n    * @param {Uint8Array} password\n    * @returns {Bip32PrivateKey}\n    */\n    static from_bip39_entropy(entropy, password) {\n        const ptr0 = passArray8ToWasm0(entropy, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(password, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_bip39_entropy(ptr0, len0, ptr1, len1);\n        return Bip32PrivateKey.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Bip32PrivateKey}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32privatekey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Bip32PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Bip32PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bip32publickey_free(ptr);\n    }\n    /**\n    * derive this public key with the given index.\n    *\n    * # Errors\n    *\n    * If the index is not a soft derivation index (< 0x80000000) then\n    * calling this method will fail.\n    *\n    * # Security considerations\n    *\n    * * hard derivation index cannot be soft derived with the public key\n    *\n    * # Hard derivation vs Soft derivation\n    *\n    * If you pass an index below 0x80000000 then it is a soft derivation.\n    * The advantage of soft derivation is that it is possible to derive the\n    * public key too. I.e. derivation the private key with a soft derivation\n    * index and then retrieving the associated public key is equivalent to\n    * deriving the public key associated to the parent private key.\n    *\n    * Hard derivation index does not allow public key derivation.\n    *\n    * This is why deriving the private key should not fail while deriving\n    * the public key may fail (if the derivation index is invalid).\n    * @param {number} index\n    * @returns {Bip32PublicKey}\n    */\n    derive(index) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_derive(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_raw_key() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_to_raw_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Bip32PublicKey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Bip32PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Bip32PublicKey}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bip32publickey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Bip32PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Block {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Block.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_block_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Block}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Block}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Block}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Block.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Header}\n    */\n    header() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_header(this.ptr);\n        return Header.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    transaction_bodies() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_transaction_bodies(this.ptr);\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    transaction_witness_sets() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_transaction_witness_sets(this.ptr);\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {AuxiliaryDataSet}\n    */\n    auxiliary_data_set() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_auxiliary_data_set(this.ptr);\n        return AuxiliaryDataSet.__wrap(ret);\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    invalid_transactions() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_invalid_transactions(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Header} header\n    * @param {TransactionBodies} transaction_bodies\n    * @param {TransactionWitnessSets} transaction_witness_sets\n    * @param {AuxiliaryDataSet} auxiliary_data_set\n    * @param {Uint32Array} invalid_transactions\n    * @returns {Block}\n    */\n    static new(header, transaction_bodies, transaction_witness_sets, auxiliary_data_set, invalid_transactions) {\n        _assertClass(header, Header);\n        _assertClass(transaction_bodies, TransactionBodies);\n        _assertClass(transaction_witness_sets, TransactionWitnessSets);\n        _assertClass(auxiliary_data_set, AuxiliaryDataSet);\n        const ptr0 = passArray32ToWasm0(invalid_transactions, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.block_new(header.ptr, transaction_bodies.ptr, transaction_witness_sets.ptr, auxiliary_data_set.ptr, ptr0, len0);\n        return Block.__wrap(ret);\n    }\n}\n/**\n*/\nclass BlockHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BlockHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_blockhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BlockHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {BlockHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {BlockHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.blockhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BlockHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass BootstrapWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bootstrapwitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {BootstrapWitness}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {BootstrapWitness}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {BootstrapWitness}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BootstrapWitness.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chain_code() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_chain_code(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @param {Uint8Array} chain_code\n    * @param {Uint8Array} attributes\n    * @returns {BootstrapWitness}\n    */\n    static new(vkey, signature, chain_code, attributes) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        const ptr0 = passArray8ToWasm0(chain_code, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passArray8ToWasm0(attributes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitness_new(vkey.ptr, signature.ptr, ptr0, len0, ptr1, len1);\n        return BootstrapWitness.__wrap(ret);\n    }\n}\n/**\n*/\nclass BootstrapWitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(BootstrapWitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_bootstrapwitnesses_free(ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_new();\n        return BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BootstrapWitness}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_get(this.ptr, index);\n        return BootstrapWitness.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, BootstrapWitness);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.bootstrapwitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ByronAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ByronAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_byronaddress_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    to_base58() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_to_base58(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ByronAddress}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ByronAddress.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * returns the byron protocol magic embedded in the address, or mainnet id if none is present\n    * note: for bech32 addresses, you need to use network_id instead\n    * @returns {number}\n    */\n    byron_protocol_magic() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_byron_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    attributes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_attributes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_network_id(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} s\n    * @returns {ByronAddress}\n    */\n    static from_base58(s) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(s, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_from_base58(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ByronAddress.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Bip32PublicKey} key\n    * @param {number} protocol_magic\n    * @returns {ByronAddress}\n    */\n    static icarus_from_key(key, protocol_magic) {\n        _assertClass(key, Bip32PublicKey);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_icarus_from_key(key.ptr, protocol_magic);\n        return ByronAddress.__wrap(ret);\n    }\n    /**\n    * @param {string} s\n    * @returns {boolean}\n    */\n    static is_valid(s) {\n        const ptr0 = passStringToWasm0(s, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_is_valid(ptr0, len0);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {ByronAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.byronaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : ByronAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass Certificate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_certificate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificate}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Certificate}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Certificate}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificate.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {StakeRegistration} stake_registration\n    * @returns {Certificate}\n    */\n    static new_stake_registration(stake_registration) {\n        _assertClass(stake_registration, StakeRegistration);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_stake_registration(stake_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDeregistration} stake_deregistration\n    * @returns {Certificate}\n    */\n    static new_stake_deregistration(stake_deregistration) {\n        _assertClass(stake_deregistration, StakeDeregistration);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_stake_deregistration(stake_deregistration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {StakeDelegation} stake_delegation\n    * @returns {Certificate}\n    */\n    static new_stake_delegation(stake_delegation) {\n        _assertClass(stake_delegation, StakeDelegation);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_stake_delegation(stake_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRegistration} pool_registration\n    * @returns {Certificate}\n    */\n    static new_pool_registration(pool_registration) {\n        _assertClass(pool_registration, PoolRegistration);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_pool_registration(pool_registration.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {PoolRetirement} pool_retirement\n    * @returns {Certificate}\n    */\n    static new_pool_retirement(pool_retirement) {\n        _assertClass(pool_retirement, PoolRetirement);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_pool_retirement(pool_retirement.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisKeyDelegation} genesis_key_delegation\n    * @returns {Certificate}\n    */\n    static new_genesis_key_delegation(genesis_key_delegation) {\n        _assertClass(genesis_key_delegation, GenesisKeyDelegation);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_genesis_key_delegation(genesis_key_delegation.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousRewardsCert} move_instantaneous_rewards_cert\n    * @returns {Certificate}\n    */\n    static new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert) {\n        _assertClass(move_instantaneous_rewards_cert, MoveInstantaneousRewardsCert);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_new_move_instantaneous_rewards_cert(move_instantaneous_rewards_cert.ptr);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {StakeRegistration | undefined}\n    */\n    as_stake_registration() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_stake_registration(this.ptr);\n        return ret === 0 ? undefined : StakeRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDeregistration | undefined}\n    */\n    as_stake_deregistration() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_stake_deregistration(this.ptr);\n        return ret === 0 ? undefined : StakeDeregistration.__wrap(ret);\n    }\n    /**\n    * @returns {StakeDelegation | undefined}\n    */\n    as_stake_delegation() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_stake_delegation(this.ptr);\n        return ret === 0 ? undefined : StakeDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRegistration | undefined}\n    */\n    as_pool_registration() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_pool_registration(this.ptr);\n        return ret === 0 ? undefined : PoolRegistration.__wrap(ret);\n    }\n    /**\n    * @returns {PoolRetirement | undefined}\n    */\n    as_pool_retirement() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_pool_retirement(this.ptr);\n        return ret === 0 ? undefined : PoolRetirement.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisKeyDelegation | undefined}\n    */\n    as_genesis_key_delegation() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_genesis_key_delegation(this.ptr);\n        return ret === 0 ? undefined : GenesisKeyDelegation.__wrap(ret);\n    }\n    /**\n    * @returns {MoveInstantaneousRewardsCert | undefined}\n    */\n    as_move_instantaneous_rewards_cert() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificate_as_move_instantaneous_rewards_cert(this.ptr);\n        return ret === 0 ? undefined : MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass Certificates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Certificates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_certificates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Certificates}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Certificates}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Certificates}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Certificates.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Certificates}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_new();\n        return Certificates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Certificate}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_get(this.ptr, index);\n        return Certificate.__wrap(ret);\n    }\n    /**\n    * @param {Certificate} elem\n    */\n    add(elem) {\n        _assertClass(elem, Certificate);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.certificates_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ConstrPlutusData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ConstrPlutusData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_constrplutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ConstrPlutusData}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ConstrPlutusData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ConstrPlutusData}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ConstrPlutusData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    alternative() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_alternative(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_data(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} alternative\n    * @param {PlutusList} data\n    * @returns {ConstrPlutusData}\n    */\n    static new(alternative, data) {\n        _assertClass(alternative, BigNum);\n        _assertClass(data, PlutusList);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.constrplutusdata_new(alternative.ptr, data.ptr);\n        return ConstrPlutusData.__wrap(ret);\n    }\n}\n/**\n*/\nclass CostModel {\n\n    static __wrap(ptr) {\n        const obj = Object.create(CostModel.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_costmodel_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {CostModel}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CostModel.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {CostModel}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CostModel.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {CostModel}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return CostModel.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Creates a new CostModels instance of an unrestricted length\n    * @returns {CostModel}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_new();\n        return CostModel.__wrap(ret);\n    }\n    /**\n    * Sets the cost at the specified index to the specified value.\n    * In case the operation index is larger than the previous largest used index,\n    * it will fill any inbetween indexes with zeroes\n    * @param {number} operation\n    * @param {Int} cost\n    * @returns {Int}\n    */\n    set(operation, cost) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(cost, Int);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_set(retptr, this.ptr, operation, cost.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} operation\n    * @returns {Int}\n    */\n    get(operation) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_get(retptr, this.ptr, operation);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmodel_len(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass Costmdls {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Costmdls.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_costmdls_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Costmdls}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Costmdls.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Costmdls}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Costmdls.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Costmdls}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Costmdls.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Costmdls}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_new();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Language} key\n    * @param {CostModel} value\n    * @returns {CostModel | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, Language);\n        _assertClass(value, CostModel);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @param {Language} key\n    * @returns {CostModel | undefined}\n    */\n    get(key) {\n        _assertClass(key, Language);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : CostModel.__wrap(ret);\n    }\n    /**\n    * @returns {Languages}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_keys(this.ptr);\n        return Languages.__wrap(ret);\n    }\n    /**\n    * @param {Languages} languages\n    * @returns {Costmdls}\n    */\n    retain_language_versions(languages) {\n        _assertClass(languages, Languages);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.costmdls_retain_language_versions(this.ptr, languages.ptr);\n        return Costmdls.__wrap(ret);\n    }\n}\n/**\n*/\nclass DNSRecordAorAAAA {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordAorAAAA.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_dnsrecordaoraaaa_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordAorAAAA}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {DNSRecordAorAAAA}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {DNSRecordAorAAAA}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordAorAAAA}\n    */\n    static new(dns_name) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(dns_name, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordAorAAAA.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordaoraaaa_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass DNSRecordSRV {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DNSRecordSRV.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_dnsrecordsrv_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DNSRecordSRV}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {DNSRecordSRV}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {DNSRecordSRV}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} dns_name\n    * @returns {DNSRecordSRV}\n    */\n    static new(dns_name) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(dns_name, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DNSRecordSRV.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    record() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.dnsrecordsrv_record(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass DataCost {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DataCost.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_datacost_free(ptr);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Since babbage era we should use coins per byte. Use `.new_coins_per_byte` instead.\n    * @param {BigNum} coins_per_word\n    * @returns {DataCost}\n    */\n    static new_coins_per_word(coins_per_word) {\n        _assertClass(coins_per_word, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datacost_new_coins_per_word(coins_per_word.ptr);\n        return DataCost.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coins_per_byte\n    * @returns {DataCost}\n    */\n    static new_coins_per_byte(coins_per_byte) {\n        _assertClass(coins_per_byte, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datacost_new_coins_per_byte(coins_per_byte.ptr);\n        return DataCost.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coins_per_byte() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datacost_coins_per_byte(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nclass DataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_datahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {DataHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {DataHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {DataHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return DataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass DatumSource {\n\n    static __wrap(ptr) {\n        const obj = Object.create(DatumSource.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_datumsource_free(ptr);\n    }\n    /**\n    * @param {PlutusData} datum\n    * @returns {DatumSource}\n    */\n    static new(datum) {\n        _assertClass(datum, PlutusData);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datumsource_new(datum.ptr);\n        return DatumSource.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} input\n    * @returns {DatumSource}\n    */\n    static new_ref_input(input) {\n        _assertClass(input, TransactionInput);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.datumsource_new_ref_input(input.ptr);\n        return DatumSource.__wrap(ret);\n    }\n}\n/**\n*/\nclass Ed25519KeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ed25519keyhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {Ed25519KeyHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {Ed25519KeyHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Ed25519KeyHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519KeyHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ed25519keyhashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519KeyHashes}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Ed25519KeyHashes}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Ed25519KeyHashes}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519KeyHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_new();\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Ed25519KeyHash}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_get(this.ptr, index);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, Ed25519KeyHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @returns {Ed25519KeyHashes | undefined}\n    */\n    to_option() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519keyhashes_to_option(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n}\n/**\n*/\nclass Ed25519Signature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ed25519Signature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ed25519signature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} bech32_str\n    * @returns {Ed25519Signature}\n    */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} input\n    * @returns {Ed25519Signature}\n    */\n    static from_hex(input) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(input, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ed25519Signature}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ed25519signature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ed25519Signature.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass EnterpriseAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(EnterpriseAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_enterpriseaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {EnterpriseAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_new(network, payment.ptr);\n        return EnterpriseAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {EnterpriseAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.enterpriseaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : EnterpriseAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass ExUnitPrices {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnitPrices.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_exunitprices_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnitPrices}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnitPrices.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ExUnitPrices}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnitPrices.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ExUnitPrices}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnitPrices.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    mem_price() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_mem_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    step_price() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_step_price(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} mem_price\n    * @param {UnitInterval} step_price\n    * @returns {ExUnitPrices}\n    */\n    static new(mem_price, step_price) {\n        _assertClass(mem_price, UnitInterval);\n        _assertClass(step_price, UnitInterval);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunitprices_new(mem_price.ptr, step_price.ptr);\n        return ExUnitPrices.__wrap(ret);\n    }\n}\n/**\n*/\nclass ExUnits {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ExUnits.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_exunits_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ExUnits}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnits.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ExUnits}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnits.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ExUnits}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnits.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    mem() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_mem(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    steps() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_steps(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} mem\n    * @param {BigNum} steps\n    * @returns {ExUnits}\n    */\n    static new(mem, steps) {\n        _assertClass(mem, BigNum);\n        _assertClass(steps, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.exunits_new(mem.ptr, steps.ptr);\n        return ExUnits.__wrap(ret);\n    }\n}\n/**\n*/\nclass GeneralTransactionMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GeneralTransactionMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_generaltransactionmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GeneralTransactionMetadata}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {GeneralTransactionMetadata}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {GeneralTransactionMetadata}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GeneralTransactionMetadata.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {GeneralTransactionMetadata}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_new();\n        return GeneralTransactionMetadata.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, BigNum);\n        _assertClass(value, TransactionMetadatum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key\n    * @returns {TransactionMetadatum | undefined}\n    */\n    get(key) {\n        _assertClass(key, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.generaltransactionmetadata_keys(this.ptr);\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n}\n/**\n*/\nclass GenesisDelegateHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisDelegateHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesisdelegatehash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisDelegateHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {GenesisDelegateHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesisdelegatehash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisDelegateHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass GenesisHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesishash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {GenesisHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {GenesisHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass GenesisHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesishashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisHashes}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {GenesisHashes}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {GenesisHashes}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_new();\n        return GenesisHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {GenesisHash}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_get(this.ptr, index);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, GenesisHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesishashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass GenesisKeyDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenesisKeyDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_genesiskeydelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {GenesisKeyDelegation}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {GenesisKeyDelegation}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {GenesisKeyDelegation}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return GenesisKeyDelegation.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {GenesisHash}\n    */\n    genesishash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_genesishash(this.ptr);\n        return GenesisHash.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisDelegateHash}\n    */\n    genesis_delegate_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_genesis_delegate_hash(this.ptr);\n        return GenesisDelegateHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} genesishash\n    * @param {GenesisDelegateHash} genesis_delegate_hash\n    * @param {VRFKeyHash} vrf_keyhash\n    * @returns {GenesisKeyDelegation}\n    */\n    static new(genesishash, genesis_delegate_hash, vrf_keyhash) {\n        _assertClass(genesishash, GenesisHash);\n        _assertClass(genesis_delegate_hash, GenesisDelegateHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.genesiskeydelegation_new(genesishash.ptr, genesis_delegate_hash.ptr, vrf_keyhash.ptr);\n        return GenesisKeyDelegation.__wrap(ret);\n    }\n}\n/**\n*/\nclass Header {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Header.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_header_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Header}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Header}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Header}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Header.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {HeaderBody}\n    */\n    header_body() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_header_body(this.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @returns {KESSignature}\n    */\n    body_signature() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_body_signature(this.ptr);\n        return KESSignature.__wrap(ret);\n    }\n    /**\n    * @param {HeaderBody} header_body\n    * @param {KESSignature} body_signature\n    * @returns {Header}\n    */\n    static new(header_body, body_signature) {\n        _assertClass(header_body, HeaderBody);\n        _assertClass(body_signature, KESSignature);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.header_new(header_body.ptr, body_signature.ptr);\n        return Header.__wrap(ret);\n    }\n}\n/**\n*/\nclass HeaderBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(HeaderBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_headerbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {HeaderBody}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {HeaderBody}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {HeaderBody}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return HeaderBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    block_number() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_block_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Returns a Slot32 (u32) value in case the underlying original BigNum (u64) value is within the limits.\n    * Otherwise will just raise an error.\n    * @returns {number}\n    */\n    slot() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_slot(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    slot_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_slot_bignum(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BlockHash | undefined}\n    */\n    prev_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_prev_hash(this.ptr);\n        return ret === 0 ? undefined : BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    issuer_vkey() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_issuer_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {VRFVKey}\n    */\n    vrf_vkey() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_vrf_vkey(this.ptr);\n        return VRFVKey.__wrap(ret);\n    }\n    /**\n    * If this function returns true, the `.nonce_vrf_or_nothing`\n    * and the `.leader_vrf_or_nothing` functions will return\n    * non-empty results\n    * @returns {boolean}\n    */\n    has_nonce_and_leader_vrf() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_has_nonce_and_leader_vrf(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Might return nothing in case `.has_nonce_and_leader_vrf` returns false\n    * @returns {VRFCert | undefined}\n    */\n    nonce_vrf_or_nothing() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_nonce_vrf_or_nothing(this.ptr);\n        return ret === 0 ? undefined : VRFCert.__wrap(ret);\n    }\n    /**\n    * Might return nothing in case `.has_nonce_and_leader_vrf` returns false\n    * @returns {VRFCert | undefined}\n    */\n    leader_vrf_or_nothing() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_leader_vrf_or_nothing(this.ptr);\n        return ret === 0 ? undefined : VRFCert.__wrap(ret);\n    }\n    /**\n    * If this function returns true, the `.vrf_result_or_nothing`\n    * function will return a non-empty result\n    * @returns {boolean}\n    */\n    has_vrf_result() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_has_vrf_result(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * Might return nothing in case `.has_vrf_result` returns false\n    * @returns {VRFCert | undefined}\n    */\n    vrf_result_or_nothing() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_vrf_result_or_nothing(this.ptr);\n        return ret === 0 ? undefined : VRFCert.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    block_body_size() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_block_body_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BlockHash}\n    */\n    block_body_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_block_body_hash(this.ptr);\n        return BlockHash.__wrap(ret);\n    }\n    /**\n    * @returns {OperationalCert}\n    */\n    operational_cert() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_operational_cert(this.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n    /**\n    * @returns {ProtocolVersion}\n    */\n    protocol_version() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_protocol_version(this.ptr);\n        return ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This constructor uses outdated slot number format.\n    * Use `.new_headerbody` instead\n    * @param {number} block_number\n    * @param {number} slot\n    * @param {BlockHash | undefined} prev_hash\n    * @param {Vkey} issuer_vkey\n    * @param {VRFVKey} vrf_vkey\n    * @param {VRFCert} vrf_result\n    * @param {number} block_body_size\n    * @param {BlockHash} block_body_hash\n    * @param {OperationalCert} operational_cert\n    * @param {ProtocolVersion} protocol_version\n    * @returns {HeaderBody}\n    */\n    static new(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, vrf_result, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(vrf_result, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_new(block_number, slot, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, vrf_result.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n    /**\n    * @param {number} block_number\n    * @param {BigNum} slot\n    * @param {BlockHash | undefined} prev_hash\n    * @param {Vkey} issuer_vkey\n    * @param {VRFVKey} vrf_vkey\n    * @param {VRFCert} vrf_result\n    * @param {number} block_body_size\n    * @param {BlockHash} block_body_hash\n    * @param {OperationalCert} operational_cert\n    * @param {ProtocolVersion} protocol_version\n    * @returns {HeaderBody}\n    */\n    static new_headerbody(block_number, slot, prev_hash, issuer_vkey, vrf_vkey, vrf_result, block_body_size, block_body_hash, operational_cert, protocol_version) {\n        _assertClass(slot, BigNum);\n        let ptr0 = 0;\n        if (!isLikeNone(prev_hash)) {\n            _assertClass(prev_hash, BlockHash);\n            ptr0 = prev_hash.ptr;\n            prev_hash.ptr = 0;\n        }\n        _assertClass(issuer_vkey, Vkey);\n        _assertClass(vrf_vkey, VRFVKey);\n        _assertClass(vrf_result, VRFCert);\n        _assertClass(block_body_hash, BlockHash);\n        _assertClass(operational_cert, OperationalCert);\n        _assertClass(protocol_version, ProtocolVersion);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.headerbody_new_headerbody(block_number, slot.ptr, ptr0, issuer_vkey.ptr, vrf_vkey.ptr, vrf_result.ptr, block_body_size, block_body_hash.ptr, operational_cert.ptr, protocol_version.ptr);\n        return HeaderBody.__wrap(ret);\n    }\n}\n/**\n*/\nclass InputWithScriptWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(InputWithScriptWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_inputwithscriptwitness_free(ptr);\n    }\n    /**\n    * @param {TransactionInput} input\n    * @param {NativeScript} witness\n    * @returns {InputWithScriptWitness}\n    */\n    static new_with_native_script_witness(input, witness) {\n        _assertClass(input, TransactionInput);\n        _assertClass(witness, NativeScript);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputwithscriptwitness_new_with_native_script_witness(input.ptr, witness.ptr);\n        return InputWithScriptWitness.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} input\n    * @param {PlutusWitness} witness\n    * @returns {InputWithScriptWitness}\n    */\n    static new_with_plutus_witness(input, witness) {\n        _assertClass(input, TransactionInput);\n        _assertClass(witness, PlutusWitness);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputwithscriptwitness_new_with_plutus_witness(input.ptr, witness.ptr);\n        return InputWithScriptWitness.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInput}\n    */\n    input() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputwithscriptwitness_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/**\n*/\nclass InputsWithScriptWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(InputsWithScriptWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_inputswithscriptwitness_free(ptr);\n    }\n    /**\n    * @returns {InputsWithScriptWitness}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputswithscriptwitness_new();\n        return InputsWithScriptWitness.__wrap(ret);\n    }\n    /**\n    * @param {InputWithScriptWitness} input\n    */\n    add(input) {\n        _assertClass(input, InputWithScriptWitness);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputswithscriptwitness_add(this.ptr, input.ptr);\n    }\n    /**\n    * @param {number} index\n    * @returns {InputWithScriptWitness}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputswithscriptwitness_get(this.ptr, index);\n        return InputWithScriptWitness.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.inputswithscriptwitness_len(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass Int {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Int.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_int_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Int}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Int}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Int}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new(x) {\n        _assertClass(x, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_new(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} x\n    * @returns {Int}\n    */\n    static new_negative(x) {\n        _assertClass(x, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_new_negative(x.ptr);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @param {number} x\n    * @returns {Int}\n    */\n    static new_i32(x) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_new_i32(x);\n        return Int.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_positive() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_is_positive(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * BigNum can only contain unsigned u64 values\n    *\n    * This function will return the BigNum representation\n    * only in case the underlying i128 value is positive.\n    *\n    * Otherwise nothing will be returned (undefined).\n    * @returns {BigNum | undefined}\n    */\n    as_positive() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_positive(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * BigNum can only contain unsigned u64 values\n    *\n    * This function will return the *absolute* BigNum representation\n    * only in case the underlying i128 value is negative.\n    *\n    * Otherwise nothing will be returned (undefined).\n    * @returns {BigNum | undefined}\n    */\n    as_negative() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_negative(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Returns an i32 value in case the underlying original i128 value is within the limits.\n    * Otherwise will just return an empty value (undefined).\n    * @returns {number | undefined}\n    */\n    as_i32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_i32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the underlying value converted to i32 if possible (within limits)\n    * Otherwise will just return an empty value (undefined).\n    * @returns {number | undefined}\n    */\n    as_i32_or_nothing() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_i32_or_nothing(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns the underlying value converted to i32 if possible (within limits)\n    * JsError in case of out of boundary overflow\n    * @returns {number}\n    */\n    as_i32_or_fail() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_as_i32_or_fail(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns string representation of the underlying i128 value directly.\n    * Might contain the minus sign (-) in case of negative value.\n    * @returns {string}\n    */\n    to_str() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_to_str(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} string\n    * @returns {Int}\n    */\n    static from_str(string) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(string, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.int_from_str(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Ipv4 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv4.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ipv4_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv4}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Ipv4}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Ipv4}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv4}\n    */\n    static new(data) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv4.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv4_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Ipv6 {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Ipv6.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_ipv6_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Ipv6}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Ipv6}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Ipv6}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} data\n    * @returns {Ipv6}\n    */\n    static new(data) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Ipv6.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    ip() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.ipv6_ip(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KESSignature {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESSignature.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_kessignature_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kessignature_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESSignature}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kessignature_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESSignature.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass KESVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(KESVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_kesvkey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {KESVKey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {KESVKey}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {KESVKey}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.kesvkey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return KESVKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Language {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Language.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_language_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Language}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Language.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Language}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Language.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Language}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Language.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Language}\n    */\n    static new_plutus_v1() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_new_plutus_v1();\n        return Language.__wrap(ret);\n    }\n    /**\n    * @returns {Language}\n    */\n    static new_plutus_v2() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_new_plutus_v2();\n        return Language.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.language_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass Languages {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Languages.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_languages_free(ptr);\n    }\n    /**\n    * @returns {Languages}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_new();\n        return Languages.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Language}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_get(this.ptr, index);\n        return Language.__wrap(ret);\n    }\n    /**\n    * @param {Language} elem\n    */\n    add(elem) {\n        _assertClass(elem, Language);\n        var ptr0 = elem.ptr;\n        elem.ptr = 0;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_add(this.ptr, ptr0);\n    }\n    /**\n    * @returns {Languages}\n    */\n    static list() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.languages_list();\n        return Languages.__wrap(ret);\n    }\n}\n/**\n*/\nclass LegacyDaedalusPrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LegacyDaedalusPrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_legacydaedalusprivatekey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {LegacyDaedalusPrivateKey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.legacydaedalusprivatekey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return LegacyDaedalusPrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.legacydaedalusprivatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    chaincode() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.legacydaedalusprivatekey_chaincode(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass LinearFee {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinearFee.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_linearfee_free(ptr);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    constant() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.linearfee_constant(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coefficient() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.linearfee_coefficient(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coefficient\n    * @param {BigNum} constant\n    * @returns {LinearFee}\n    */\n    static new(coefficient, constant) {\n        _assertClass(coefficient, BigNum);\n        _assertClass(constant, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.linearfee_new(coefficient.ptr, constant.ptr);\n        return LinearFee.__wrap(ret);\n    }\n}\n/**\n*/\nclass MIRToStakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MIRToStakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mirtostakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MIRToStakeCredentials}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MIRToStakeCredentials}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {MIRToStakeCredentials}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MIRToStakeCredentials.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {MIRToStakeCredentials}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_new();\n        return MIRToStakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @param {Int} delta\n    * @returns {Int | undefined}\n    */\n    insert(cred, delta) {\n        _assertClass(cred, StakeCredential);\n        _assertClass(delta, Int);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_insert(this.ptr, cred.ptr, delta.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} cred\n    * @returns {Int | undefined}\n    */\n    get(cred) {\n        _assertClass(cred, StakeCredential);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_get(this.ptr, cred.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mirtostakecredentials_keys(this.ptr);\n        return StakeCredentials.__wrap(ret);\n    }\n}\n/**\n*/\nclass MetadataList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_metadatalist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataList}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MetadataList}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_new();\n        return MetadataList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionMetadatum}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_get(this.ptr, index);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatalist_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass MetadataMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MetadataMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_metadatamap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MetadataMap}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MetadataMap}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_new();\n        return MetadataMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, TransactionMetadatum);\n        _assertClass(value, TransactionMetadatum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {string} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_str(key, value) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(value, TransactionMetadatum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_insert_str(retptr, this.ptr, ptr0, len0, value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 === 0 ? undefined : TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} key\n    * @param {TransactionMetadatum} value\n    * @returns {TransactionMetadatum | undefined}\n    */\n    insert_i32(key, value) {\n        _assertClass(value, TransactionMetadatum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_insert_i32(this.ptr, key, value.ptr);\n        return ret === 0 ? undefined : TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {TransactionMetadatum}\n    */\n    get(key) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, TransactionMetadatum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_get(retptr, this.ptr, key.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} key\n    * @returns {TransactionMetadatum}\n    */\n    get_str(key) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(key, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_get_str(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} key\n    * @returns {TransactionMetadatum}\n    */\n    get_i32(key) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_get_i32(retptr, this.ptr, key);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {TransactionMetadatum} key\n    * @returns {boolean}\n    */\n    has(key) {\n        _assertClass(key, TransactionMetadatum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_has(this.ptr, key.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.metadatamap_keys(this.ptr);\n        return MetadataList.__wrap(ret);\n    }\n}\n/**\n*/\nclass Mint {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Mint.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mint_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Mint}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Mint}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Mint}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Mint.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Mint}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_new();\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {Mint}\n    */\n    static new_from_entry(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_new_from_entry(key.ptr, value.ptr);\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ScriptHash} key\n    * @param {MintAssets} value\n    * @returns {MintAssets | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, ScriptHash);\n        _assertClass(value, MintAssets);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Mint can store multiple entries for the same policy id.\n    * Use `.get_all` instead.\n    * @param {ScriptHash} key\n    * @returns {MintAssets | undefined}\n    */\n    get(key) {\n        _assertClass(key, ScriptHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} key\n    * @returns {MintsAssets | undefined}\n    */\n    get_all(key) {\n        _assertClass(key, ScriptHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_get_all(this.ptr, key.ptr);\n        return ret === 0 ? undefined : MintsAssets.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * Returns the multiasset where only positive (minting) entries are present\n    * @returns {MultiAsset}\n    */\n    as_positive_multiasset() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_as_positive_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * Returns the multiasset where only negative (burning) entries are present\n    * @returns {MultiAsset}\n    */\n    as_negative_multiasset() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mint_as_negative_multiasset(this.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/**\n*/\nclass MintAssets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintAssets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mintassets_free(ptr);\n    }\n    /**\n    * @returns {MintAssets}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_new();\n        return MintAssets.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {MintAssets}\n    */\n    static new_from_entry(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_new_from_entry(key.ptr, ptr0);\n        return MintAssets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {AssetName} key\n    * @param {Int} value\n    * @returns {Int | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, AssetName);\n        _assertClass(value, Int);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_insert(this.ptr, key.ptr, ptr0);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @param {AssetName} key\n    * @returns {Int | undefined}\n    */\n    get(key) {\n        _assertClass(key, AssetName);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : Int.__wrap(ret);\n    }\n    /**\n    * @returns {AssetNames}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintassets_keys(this.ptr);\n        return AssetNames.__wrap(ret);\n    }\n}\n/**\n*/\nclass MintBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mintbuilder_free(ptr);\n    }\n    /**\n    * @returns {MintBuilder}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_new();\n        return MintBuilder.__wrap(ret);\n    }\n    /**\n    * @param {MintWitness} mint\n    * @param {AssetName} asset_name\n    * @param {Int} amount\n    */\n    add_asset(mint, asset_name, amount) {\n        _assertClass(mint, MintWitness);\n        _assertClass(asset_name, AssetName);\n        _assertClass(amount, Int);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_add_asset(this.ptr, mint.ptr, asset_name.ptr, amount.ptr);\n    }\n    /**\n    * @param {MintWitness} mint\n    * @param {AssetName} asset_name\n    * @param {Int} amount\n    */\n    set_asset(mint, asset_name, amount) {\n        _assertClass(mint, MintWitness);\n        _assertClass(asset_name, AssetName);\n        _assertClass(amount, Int);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_set_asset(this.ptr, mint.ptr, asset_name.ptr, amount.ptr);\n    }\n    /**\n    * @returns {Mint}\n    */\n    build() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_build(this.ptr);\n        return Mint.__wrap(ret);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    get_native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_get_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusWitnesses}\n    */\n    get_plutus_witnesses() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_get_plutus_witnesses(this.ptr);\n        return PlutusWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {Redeemers}\n    */\n    get_redeeemers() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_get_redeeemers(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemers.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {boolean}\n    */\n    has_plutus_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_has_plutus_scripts(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    has_native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintbuilder_has_native_scripts(this.ptr);\n        return ret !== 0;\n    }\n}\n/**\n*/\nclass MintWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mintwitness_free(ptr);\n    }\n    /**\n    * @param {NativeScript} native_script\n    * @returns {MintWitness}\n    */\n    static new_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintwitness_new_native_script(native_script.ptr);\n        return MintWitness.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScriptSource} plutus_script\n    * @param {Redeemer} redeemer\n    * @returns {MintWitness}\n    */\n    static new_plutus_script(plutus_script, redeemer) {\n        _assertClass(plutus_script, PlutusScriptSource);\n        _assertClass(redeemer, Redeemer);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.mintwitness_new_plutus_script(plutus_script.ptr, redeemer.ptr);\n        return MintWitness.__wrap(ret);\n    }\n}\n/**\n*/\nclass MintsAssets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MintsAssets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_mintsassets_free(ptr);\n    }\n}\n/**\n*/\nclass MoveInstantaneousReward {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousReward.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_moveinstantaneousreward_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousReward}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MoveInstantaneousReward}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {MoveInstantaneousReward}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousReward.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} pot\n    * @param {BigNum} amount\n    * @returns {MoveInstantaneousReward}\n    */\n    static new_to_other_pot(pot, amount) {\n        _assertClass(amount, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_new_to_other_pot(pot, amount.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {number} pot\n    * @param {MIRToStakeCredentials} amounts\n    * @returns {MoveInstantaneousReward}\n    */\n    static new_to_stake_creds(pot, amounts) {\n        _assertClass(amounts, MIRToStakeCredentials);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_new_to_stake_creds(pot, amounts.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    pot() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_pot(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    as_to_other_pot() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_as_to_other_pot(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {MIRToStakeCredentials | undefined}\n    */\n    as_to_stake_creds() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousreward_as_to_stake_creds(this.ptr);\n        return ret === 0 ? undefined : MIRToStakeCredentials.__wrap(ret);\n    }\n}\n/**\n*/\nclass MoveInstantaneousRewardsCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MoveInstantaneousRewardsCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_moveinstantaneousrewardscert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MoveInstantaneousRewardsCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {MoveInstantaneousReward}\n    */\n    move_instantaneous_reward() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_move_instantaneous_reward(this.ptr);\n        return MoveInstantaneousReward.__wrap(ret);\n    }\n    /**\n    * @param {MoveInstantaneousReward} move_instantaneous_reward\n    * @returns {MoveInstantaneousRewardsCert}\n    */\n    static new(move_instantaneous_reward) {\n        _assertClass(move_instantaneous_reward, MoveInstantaneousReward);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.moveinstantaneousrewardscert_new(move_instantaneous_reward.ptr);\n        return MoveInstantaneousRewardsCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass MultiAsset {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiAsset.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_multiasset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiAsset}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MultiAsset}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {MultiAsset}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiAsset.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {MultiAsset}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_new();\n        return MultiAsset.__wrap(ret);\n    }\n    /**\n    * the number of unique policy IDs in the multiasset\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * set (and replace if it exists) all assets with policy {policy_id} to a copy of {assets}\n    * @param {ScriptHash} policy_id\n    * @param {Assets} assets\n    * @returns {Assets | undefined}\n    */\n    insert(policy_id, assets) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(assets, Assets);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_insert(this.ptr, policy_id.ptr, assets.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * all assets under {policy_id}, if any exist, or else None (undefined in JS)\n    * @param {ScriptHash} policy_id\n    * @returns {Assets | undefined}\n    */\n    get(policy_id) {\n        _assertClass(policy_id, ScriptHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_get(this.ptr, policy_id.ptr);\n        return ret === 0 ? undefined : Assets.__wrap(ret);\n    }\n    /**\n    * sets the asset {asset_name} to {value} under policy {policy_id}\n    * returns the previous amount if it was set, or else None (undefined in JS)\n    * @param {ScriptHash} policy_id\n    * @param {AssetName} asset_name\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    set_asset(policy_id, asset_name, value) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        _assertClass(value, BigNum);\n        var ptr0 = value.ptr;\n        value.ptr = 0;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_set_asset(this.ptr, policy_id.ptr, asset_name.ptr, ptr0);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * returns the amount of asset {asset_name} under policy {policy_id}\n    * If such an asset does not exist, 0 is returned.\n    * @param {ScriptHash} policy_id\n    * @param {AssetName} asset_name\n    * @returns {BigNum}\n    */\n    get_asset(policy_id, asset_name) {\n        _assertClass(policy_id, ScriptHash);\n        _assertClass(asset_name, AssetName);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_get_asset(this.ptr, policy_id.ptr, asset_name.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * returns all policy IDs used by assets in this multiasset\n    * @returns {ScriptHashes}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_keys(this.ptr);\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * removes an asset from the list if the result is 0 or less\n    * does not modify this object, instead the result is returned\n    * @param {MultiAsset} rhs_ma\n    * @returns {MultiAsset}\n    */\n    sub(rhs_ma) {\n        _assertClass(rhs_ma, MultiAsset);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multiasset_sub(this.ptr, rhs_ma.ptr);\n        return MultiAsset.__wrap(ret);\n    }\n}\n/**\n*/\nclass MultiHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(MultiHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_multihostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {MultiHostName}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {MultiHostName}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {MultiHostName}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MultiHostName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {DNSRecordSRV}\n    */\n    dns_name() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_dns_name(this.ptr);\n        return DNSRecordSRV.__wrap(ret);\n    }\n    /**\n    * @param {DNSRecordSRV} dns_name\n    * @returns {MultiHostName}\n    */\n    static new(dns_name) {\n        _assertClass(dns_name, DNSRecordSRV);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.multihostname_new(dns_name.ptr);\n        return MultiHostName.__wrap(ret);\n    }\n}\n/**\n*/\nclass NativeScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_nativescript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NativeScript}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {NativeScript}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {NativeScript}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NativeScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ScriptHash}\n    */\n    hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_hash(this.ptr);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptPubkey} script_pubkey\n    * @returns {NativeScript}\n    */\n    static new_script_pubkey(script_pubkey) {\n        _assertClass(script_pubkey, ScriptPubkey);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_pubkey(script_pubkey.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAll} script_all\n    * @returns {NativeScript}\n    */\n    static new_script_all(script_all) {\n        _assertClass(script_all, ScriptAll);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_all(script_all.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptAny} script_any\n    * @returns {NativeScript}\n    */\n    static new_script_any(script_any) {\n        _assertClass(script_any, ScriptAny);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_any(script_any.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {ScriptNOfK} script_n_of_k\n    * @returns {NativeScript}\n    */\n    static new_script_n_of_k(script_n_of_k) {\n        _assertClass(script_n_of_k, ScriptNOfK);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_script_n_of_k(script_n_of_k.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockStart} timelock_start\n    * @returns {NativeScript}\n    */\n    static new_timelock_start(timelock_start) {\n        _assertClass(timelock_start, TimelockStart);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_timelock_start(timelock_start.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {TimelockExpiry} timelock_expiry\n    * @returns {NativeScript}\n    */\n    static new_timelock_expiry(timelock_expiry) {\n        _assertClass(timelock_expiry, TimelockExpiry);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_new_timelock_expiry(timelock_expiry.ptr);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ScriptPubkey | undefined}\n    */\n    as_script_pubkey() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_pubkey(this.ptr);\n        return ret === 0 ? undefined : ScriptPubkey.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAll | undefined}\n    */\n    as_script_all() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_all(this.ptr);\n        return ret === 0 ? undefined : ScriptAll.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptAny | undefined}\n    */\n    as_script_any() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_any(this.ptr);\n        return ret === 0 ? undefined : ScriptAny.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptNOfK | undefined}\n    */\n    as_script_n_of_k() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_script_n_of_k(this.ptr);\n        return ret === 0 ? undefined : ScriptNOfK.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockStart | undefined}\n    */\n    as_timelock_start() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_timelock_start(this.ptr);\n        return ret === 0 ? undefined : TimelockStart.__wrap(ret);\n    }\n    /**\n    * @returns {TimelockExpiry | undefined}\n    */\n    as_timelock_expiry() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_as_timelock_expiry(this.ptr);\n        return ret === 0 ? undefined : TimelockExpiry.__wrap(ret);\n    }\n    /**\n    * Returns an array of unique Ed25519KeyHashes\n    * contained within this script recursively on any depth level.\n    * The order of the keys in the result is not determined in any way.\n    * @returns {Ed25519KeyHashes}\n    */\n    get_required_signers() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescript_get_required_signers(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n}\n/**\n*/\nclass NativeScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NativeScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_nativescripts_free(ptr);\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_new();\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {NativeScript}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_get(this.ptr, index);\n        return NativeScript.__wrap(ret);\n    }\n    /**\n    * @param {NativeScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, NativeScript);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nativescripts_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass NetworkId {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkId.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_networkid_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {NetworkId}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {NetworkId}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {NetworkId}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return NetworkId.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {NetworkId}\n    */\n    static testnet() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_testnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkId}\n    */\n    static mainnet() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_mainnet();\n        return NetworkId.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkid_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass NetworkInfo {\n\n    static __wrap(ptr) {\n        const obj = Object.create(NetworkInfo.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_networkinfo_free(ptr);\n    }\n    /**\n    * @param {number} network_id\n    * @param {number} protocol_magic\n    * @returns {NetworkInfo}\n    */\n    static new(network_id, protocol_magic) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_new(network_id, protocol_magic);\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    network_id() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_network_id(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    protocol_magic() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_protocol_magic(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static testnet_preview() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_testnet_preview();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static testnet_preprod() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_testnet_preprod();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This network does not exist anymore. Use `.testnet_preview()` or `.testnet_preprod()`\n    * @returns {NetworkInfo}\n    */\n    static testnet() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_testnet();\n        return NetworkInfo.__wrap(ret);\n    }\n    /**\n    * @returns {NetworkInfo}\n    */\n    static mainnet() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.networkinfo_mainnet();\n        return NetworkInfo.__wrap(ret);\n    }\n}\n/**\n*/\nclass Nonce {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Nonce.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_nonce_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Nonce}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Nonce}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Nonce}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Nonce}\n    */\n    static new_identity() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_new_identity();\n        return Nonce.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} hash\n    * @returns {Nonce}\n    */\n    static new_from_hash(hash) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(hash, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_new_from_hash(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Nonce.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    get_hash() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.nonce_get_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass OperationalCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(OperationalCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_operationalcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {OperationalCert}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {OperationalCert}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {OperationalCert}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return OperationalCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {KESVKey}\n    */\n    hot_vkey() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_hot_vkey(this.ptr);\n        return KESVKey.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    sequence_number() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_sequence_number(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    kes_period() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_kes_period(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    sigma() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_sigma(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @param {KESVKey} hot_vkey\n    * @param {number} sequence_number\n    * @param {number} kes_period\n    * @param {Ed25519Signature} sigma\n    * @returns {OperationalCert}\n    */\n    static new(hot_vkey, sequence_number, kes_period, sigma) {\n        _assertClass(hot_vkey, KESVKey);\n        _assertClass(sigma, Ed25519Signature);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.operationalcert_new(hot_vkey.ptr, sequence_number, kes_period, sigma.ptr);\n        return OperationalCert.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusData {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusData.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusdata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PlutusData}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {ConstrPlutusData} constr_plutus_data\n    * @returns {PlutusData}\n    */\n    static new_constr_plutus_data(constr_plutus_data) {\n        _assertClass(constr_plutus_data, ConstrPlutusData);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_constr_plutus_data(constr_plutus_data.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * Same as `.new_constr_plutus_data` but creates constr with empty data list\n    * @param {BigNum} alternative\n    * @returns {PlutusData}\n    */\n    static new_empty_constr_plutus_data(alternative) {\n        _assertClass(alternative, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_empty_constr_plutus_data(alternative.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusMap} map\n    * @returns {PlutusData}\n    */\n    static new_map(map) {\n        _assertClass(map, PlutusMap);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_map(map.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} list\n    * @returns {PlutusData}\n    */\n    static new_list(list) {\n        _assertClass(list, PlutusList);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_list(list.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {BigInt} integer\n    * @returns {PlutusData}\n    */\n    static new_integer(integer) {\n        _assertClass(integer, BigInt);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_integer(integer.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusData}\n    */\n    static new_bytes(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_new_bytes(ptr0, len0);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {ConstrPlutusData | undefined}\n    */\n    as_constr_plutus_data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_constr_plutus_data(this.ptr);\n        return ret === 0 ? undefined : ConstrPlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusMap | undefined}\n    */\n    as_map() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_map(this.ptr);\n        return ret === 0 ? undefined : PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n    as_list() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_list(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {BigInt | undefined}\n    */\n    as_integer() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_integer(this.ptr);\n        return ret === 0 ? undefined : BigInt.__wrap(ret);\n    }\n    /**\n    * @returns {Uint8Array | undefined}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            let v0;\n            if (r0 !== 0) {\n                v0 = getArrayU8FromWasm0(r0, r1).slice();\n                _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            }\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} schema\n    * @returns {string}\n    */\n    to_json(schema) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_to_json(retptr, this.ptr, schema);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @param {string} json\n    * @param {number} schema\n    * @returns {PlutusData}\n    */\n    static from_json(json, schema) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusdata_from_json(retptr, ptr0, len0, schema);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusData.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass PlutusList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutuslist_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusList}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusList.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PlutusList}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusList.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_new();\n        return PlutusList.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusData}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_get(this.ptr, index);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusData);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuslist_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass PlutusMap {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusMap.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusmap_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusMap}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusMap.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PlutusMap}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusMap.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PlutusMap}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_new();\n        return PlutusMap.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {PlutusData} key\n    * @param {PlutusData} value\n    * @returns {PlutusData | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, PlutusData);\n        _assertClass(value, PlutusData);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} key\n    * @returns {PlutusData | undefined}\n    */\n    get(key) {\n        _assertClass(key, PlutusData);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusList}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusmap_keys(this.ptr);\n        return PlutusList.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusScript {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScript.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusscript_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PlutusScript}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    *\n    *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n    *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n    *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n    *\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static new(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_new(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    *\n    *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n    *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n    *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n    *\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static new_v2(bytes) {\n        const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_new_v2(ptr0, len0);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    *\n    *     * Creates a new Plutus script from the RAW bytes of the compiled script.\n    *     * This does NOT include any CBOR encoding around these bytes (e.g. from \"cborBytes\" in cardano-cli)\n    *     * If you creating this from those you should use PlutusScript::from_bytes() instead.\n    *\n    * @param {Uint8Array} bytes\n    * @param {Language} language\n    * @returns {PlutusScript}\n    */\n    static new_with_version(bytes, language) {\n        const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(language, Language);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_new_with_version(ptr0, len0, language.ptr);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    *\n    *     * The raw bytes of this compiled Plutus script.\n    *     * If you need \"cborBytes\" for cardano-cli use PlutusScript::to_bytes() instead.\n    *\n    * @returns {Uint8Array}\n    */\n    bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Same as `.from_bytes` but will consider the script as requiring the Plutus Language V2\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScript}\n    */\n    static from_bytes_v2(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_from_bytes_v2(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Same as `.from_bytes` but will consider the script as requiring the specified language version\n    * @param {Uint8Array} bytes\n    * @param {Language} language\n    * @returns {PlutusScript}\n    */\n    static from_bytes_with_version(bytes, language) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(language, Language);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_from_bytes_with_version(retptr, ptr0, len0, language.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Same as .from_hex but will consider the script as requiring the specified language version\n    * @param {string} hex_str\n    * @param {Language} language\n    * @returns {PlutusScript}\n    */\n    static from_hex_with_version(hex_str, language) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _assertClass(language, Language);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_from_hex_with_version(retptr, ptr0, len0, language.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScript.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ScriptHash}\n    */\n    hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_hash(this.ptr);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @returns {Language}\n    */\n    language_version() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscript_language_version(this.ptr);\n        return Language.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusScriptSource {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScriptSource.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusscriptsource_free(ptr);\n    }\n    /**\n    * @param {PlutusScript} script\n    * @returns {PlutusScriptSource}\n    */\n    static new(script) {\n        _assertClass(script, PlutusScript);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscriptsource_new(script.ptr);\n        return PlutusScriptSource.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} script_hash\n    * @param {TransactionInput} input\n    * @returns {PlutusScriptSource}\n    */\n    static new_ref_input(script_hash, input) {\n        _assertClass(script_hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscriptsource_new_ref_input(script_hash.ptr, input.ptr);\n        return PlutusScriptSource.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} script_hash\n    * @param {TransactionInput} input\n    * @param {Language} lang_ver\n    * @returns {PlutusScriptSource}\n    */\n    static new_ref_input_with_lang_ver(script_hash, input, lang_ver) {\n        _assertClass(script_hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(lang_ver, Language);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscriptsource_new_ref_input_with_lang_ver(script_hash.ptr, input.ptr, lang_ver.ptr);\n        return PlutusScriptSource.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusScripts {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusScripts.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutusscripts_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PlutusScripts}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScripts.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PlutusScripts}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScripts.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {PlutusScripts}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PlutusScripts.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PlutusScripts}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_new();\n        return PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusScript}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_get(this.ptr, index);\n        return PlutusScript.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusScript);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutusscripts_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass PlutusWitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusWitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutuswitness_free(ptr);\n    }\n    /**\n    * @param {PlutusScript} script\n    * @param {PlutusData} datum\n    * @param {Redeemer} redeemer\n    * @returns {PlutusWitness}\n    */\n    static new(script, datum, redeemer) {\n        _assertClass(script, PlutusScript);\n        _assertClass(datum, PlutusData);\n        _assertClass(redeemer, Redeemer);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitness_new(script.ptr, datum.ptr, redeemer.ptr);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScriptSource} script\n    * @param {DatumSource} datum\n    * @param {Redeemer} redeemer\n    * @returns {PlutusWitness}\n    */\n    static new_with_ref(script, datum, redeemer) {\n        _assertClass(script, PlutusScriptSource);\n        _assertClass(datum, DatumSource);\n        _assertClass(redeemer, Redeemer);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitness_new_with_ref(script.ptr, datum.ptr, redeemer.ptr);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} script\n    * @param {Redeemer} redeemer\n    * @returns {PlutusWitness}\n    */\n    static new_without_datum(script, redeemer) {\n        _assertClass(script, PlutusScript);\n        _assertClass(redeemer, Redeemer);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitness_new_without_datum(script.ptr, redeemer.ptr);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScript | undefined}\n    */\n    script() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitness_script(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData | undefined}\n    */\n    datum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitness_datum(this.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {Redeemer}\n    */\n    redeemer() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitness_redeemer(this.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/**\n*/\nclass PlutusWitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PlutusWitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_plutuswitnesses_free(ptr);\n    }\n    /**\n    * @returns {PlutusWitnesses}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitnesses_new();\n        return PlutusWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PlutusWitness}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitnesses_get(this.ptr, index);\n        return PlutusWitness.__wrap(ret);\n    }\n    /**\n    * @param {PlutusWitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, PlutusWitness);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.plutuswitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Pointer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Pointer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_pointer_free(ptr);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This constructor uses outdated slot number format for the ttl value, tx_index and cert_index.\n    * Use `.new_pointer` instead\n    * @param {number} slot\n    * @param {number} tx_index\n    * @param {number} cert_index\n    * @returns {Pointer}\n    */\n    static new(slot, tx_index, cert_index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_new(slot, tx_index, cert_index);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} slot\n    * @param {BigNum} tx_index\n    * @param {BigNum} cert_index\n    * @returns {Pointer}\n    */\n    static new_pointer(slot, tx_index, cert_index) {\n        _assertClass(slot, BigNum);\n        _assertClass(tx_index, BigNum);\n        _assertClass(cert_index, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_new_pointer(slot.ptr, tx_index.ptr, cert_index.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_slot(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    tx_index() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_tx_index(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    cert_index() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_cert_index(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    slot_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_slot_bignum(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    tx_index_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_tx_index_bignum(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    cert_index_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointer_cert_index_bignum(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n}\n/**\n*/\nclass PointerAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PointerAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_pointeraddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @param {Pointer} stake\n    * @returns {PointerAddress}\n    */\n    static new(network, payment, stake) {\n        _assertClass(payment, StakeCredential);\n        _assertClass(stake, Pointer);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_new(network, payment.ptr, stake.ptr);\n        return PointerAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Pointer}\n    */\n    stake_pointer() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_stake_pointer(this.ptr);\n        return Pointer.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {PointerAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.pointeraddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : PointerAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolMetadata {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadata.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolmetadata_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadata}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PoolMetadata}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolMetadata}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadata.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {URL}\n    */\n    url() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_url(this.ptr);\n        return URL.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadataHash}\n    */\n    pool_metadata_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_pool_metadata_hash(this.ptr);\n        return PoolMetadataHash.__wrap(ret);\n    }\n    /**\n    * @param {URL} url\n    * @param {PoolMetadataHash} pool_metadata_hash\n    * @returns {PoolMetadata}\n    */\n    static new(url, pool_metadata_hash) {\n        _assertClass(url, URL);\n        _assertClass(pool_metadata_hash, PoolMetadataHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadata_new(url.ptr, pool_metadata_hash.ptr);\n        return PoolMetadata.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolMetadataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolMetadataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolmetadatahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolMetadataHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {PoolMetadataHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {PoolMetadataHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolmetadatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolMetadataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass PoolParams {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolParams.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolparams_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolParams}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PoolParams}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolParams}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolParams.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    operator() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_operator(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {VRFKeyHash}\n    */\n    vrf_keyhash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_vrf_keyhash(this.ptr);\n        return VRFKeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    pledge() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_pledge(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    cost() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_cost(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {UnitInterval}\n    */\n    margin() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_margin(this.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddress}\n    */\n    reward_account() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_reward_account(this.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHashes}\n    */\n    pool_owners() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_pool_owners(this.ptr);\n        return Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @returns {Relays}\n    */\n    relays() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_relays(this.ptr);\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {PoolMetadata | undefined}\n    */\n    pool_metadata() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_pool_metadata(this.ptr);\n        return ret === 0 ? undefined : PoolMetadata.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} operator\n    * @param {VRFKeyHash} vrf_keyhash\n    * @param {BigNum} pledge\n    * @param {BigNum} cost\n    * @param {UnitInterval} margin\n    * @param {RewardAddress} reward_account\n    * @param {Ed25519KeyHashes} pool_owners\n    * @param {Relays} relays\n    * @param {PoolMetadata | undefined} pool_metadata\n    * @returns {PoolParams}\n    */\n    static new(operator, vrf_keyhash, pledge, cost, margin, reward_account, pool_owners, relays, pool_metadata) {\n        _assertClass(operator, Ed25519KeyHash);\n        _assertClass(vrf_keyhash, VRFKeyHash);\n        _assertClass(pledge, BigNum);\n        _assertClass(cost, BigNum);\n        _assertClass(margin, UnitInterval);\n        _assertClass(reward_account, RewardAddress);\n        _assertClass(pool_owners, Ed25519KeyHashes);\n        _assertClass(relays, Relays);\n        let ptr0 = 0;\n        if (!isLikeNone(pool_metadata)) {\n            _assertClass(pool_metadata, PoolMetadata);\n            ptr0 = pool_metadata.ptr;\n            pool_metadata.ptr = 0;\n        }\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolparams_new(operator.ptr, vrf_keyhash.ptr, pledge.ptr, cost.ptr, margin.ptr, reward_account.ptr, pool_owners.ptr, relays.ptr, ptr0);\n        return PoolParams.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRegistration}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PoolRegistration}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolRegistration}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRegistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PoolParams}\n    */\n    pool_params() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_pool_params(this.ptr);\n        return PoolParams.__wrap(ret);\n    }\n    /**\n    * @param {PoolParams} pool_params\n    * @returns {PoolRegistration}\n    */\n    static new(pool_params) {\n        _assertClass(pool_params, PoolParams);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolregistration_new(pool_params.ptr);\n        return PoolRegistration.__wrap(ret);\n    }\n}\n/**\n*/\nclass PoolRetirement {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PoolRetirement.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_poolretirement_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PoolRetirement}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PoolRetirement}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {PoolRetirement}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PoolRetirement.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @param {number} epoch\n    * @returns {PoolRetirement}\n    */\n    static new(pool_keyhash, epoch) {\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.poolretirement_new(pool_keyhash.ptr, epoch);\n        return PoolRetirement.__wrap(ret);\n    }\n}\n/**\n*/\nclass PrivateKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PrivateKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_privatekey_free(ptr);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    to_public() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_to_public(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_generate_ed25519(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PrivateKey}\n    */\n    static generate_ed25519extended() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_generate_ed25519extended(retptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Get private key from its bech32 representation\n    * ```javascript\n    * PrivateKey.from_bech32(&#39;ed25519_sk1ahfetf02qwwg4dkq7mgp4a25lx5vh9920cr5wnxmpzz9906qvm8qwvlts0&#39;);\n    * ```\n    * For an extended 25519 key\n    * ```javascript\n    * PrivateKey.from_bech32(&#39;ed25519e_sk1gqwl4szuwwh6d0yk3nsqcc6xxc3fpvjlevgwvt60df59v8zd8f8prazt8ln3lmz096ux3xvhhvm3ca9wj2yctdh3pnw0szrma07rt5gl748fp&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PrivateKey}\n    */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_extended_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_from_extended_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PrivateKey}\n    */\n    static from_normal_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_from_normal_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} message\n    * @returns {Ed25519Signature}\n    */\n    sign(message) {\n        const ptr0 = passArray8ToWasm0(message, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_sign(this.ptr, ptr0, len0);\n        return Ed25519Signature.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PrivateKey}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.privatekey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PrivateKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass ProposedProtocolParameterUpdates {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProposedProtocolParameterUpdates.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_proposedprotocolparameterupdates_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProposedProtocolParameterUpdates.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_new();\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {GenesisHash} key\n    * @param {ProtocolParamUpdate} value\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, GenesisHash);\n        _assertClass(value, ProtocolParamUpdate);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @param {GenesisHash} key\n    * @returns {ProtocolParamUpdate | undefined}\n    */\n    get(key) {\n        _assertClass(key, GenesisHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : ProtocolParamUpdate.__wrap(ret);\n    }\n    /**\n    * @returns {GenesisHashes}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.proposedprotocolparameterupdates_keys(this.ptr);\n        return GenesisHashes.__wrap(ret);\n    }\n}\n/**\n*/\nclass ProtocolParamUpdate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolParamUpdate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_protocolparamupdate_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolParamUpdate}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ProtocolParamUpdate}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ProtocolParamUpdate}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolParamUpdate.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} minfee_a\n    */\n    set_minfee_a(minfee_a) {\n        _assertClass(minfee_a, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_minfee_a(this.ptr, minfee_a.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_a() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_minfee_a(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} minfee_b\n    */\n    set_minfee_b(minfee_b) {\n        _assertClass(minfee_b, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_minfee_b(this.ptr, minfee_b.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    minfee_b() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_minfee_b(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_block_body_size\n    */\n    set_max_block_body_size(max_block_body_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_block_body_size(this.ptr, max_block_body_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_body_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_block_body_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_tx_size\n    */\n    set_max_tx_size(max_tx_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_tx_size(this.ptr, max_tx_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_tx_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_tx_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_block_header_size\n    */\n    set_max_block_header_size(max_block_header_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_block_header_size(this.ptr, max_block_header_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_block_header_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_block_header_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} key_deposit\n    */\n    set_key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_key_deposit(this.ptr, key_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    key_deposit() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_key_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    */\n    set_pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_pool_deposit(this.ptr, pool_deposit.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    pool_deposit() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_pool_deposit(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {number} max_epoch\n    */\n    set_max_epoch(max_epoch) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_epoch(this.ptr, max_epoch);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_epoch() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_epoch(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} n_opt\n    */\n    set_n_opt(n_opt) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_n_opt(this.ptr, n_opt);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    n_opt() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_n_opt(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {UnitInterval} pool_pledge_influence\n    */\n    set_pool_pledge_influence(pool_pledge_influence) {\n        _assertClass(pool_pledge_influence, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_pool_pledge_influence(this.ptr, pool_pledge_influence.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    pool_pledge_influence() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_pool_pledge_influence(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} expansion_rate\n    */\n    set_expansion_rate(expansion_rate) {\n        _assertClass(expansion_rate, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_expansion_rate(this.ptr, expansion_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    expansion_rate() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_expansion_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * @param {UnitInterval} treasury_growth_rate\n    */\n    set_treasury_growth_rate(treasury_growth_rate) {\n        _assertClass(treasury_growth_rate, UnitInterval);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_treasury_growth_rate(this.ptr, treasury_growth_rate.ptr);\n    }\n    /**\n    * @returns {UnitInterval | undefined}\n    */\n    treasury_growth_rate() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_treasury_growth_rate(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Since babbage era this param is outdated. But this param you can meet in a pre-babbage block.\n    * @returns {UnitInterval | undefined}\n    */\n    d() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_d(this.ptr);\n        return ret === 0 ? undefined : UnitInterval.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Since babbage era this param is outdated. But this param you can meet in a pre-babbage block.\n    * @returns {Nonce | undefined}\n    */\n    extra_entropy() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_extra_entropy(this.ptr);\n        return ret === 0 ? undefined : Nonce.__wrap(ret);\n    }\n    /**\n    * @param {ProtocolVersion} protocol_version\n    */\n    set_protocol_version(protocol_version) {\n        _assertClass(protocol_version, ProtocolVersion);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_protocol_version(this.ptr, protocol_version.ptr);\n    }\n    /**\n    * @returns {ProtocolVersion | undefined}\n    */\n    protocol_version() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_protocol_version(this.ptr);\n        return ret === 0 ? undefined : ProtocolVersion.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} min_pool_cost\n    */\n    set_min_pool_cost(min_pool_cost) {\n        _assertClass(min_pool_cost, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_min_pool_cost(this.ptr, min_pool_cost.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    min_pool_cost() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_min_pool_cost(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} ada_per_utxo_byte\n    */\n    set_ada_per_utxo_byte(ada_per_utxo_byte) {\n        _assertClass(ada_per_utxo_byte, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_ada_per_utxo_byte(this.ptr, ada_per_utxo_byte.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    ada_per_utxo_byte() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_ada_per_utxo_byte(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {Costmdls} cost_models\n    */\n    set_cost_models(cost_models) {\n        _assertClass(cost_models, Costmdls);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_cost_models(this.ptr, cost_models.ptr);\n    }\n    /**\n    * @returns {Costmdls | undefined}\n    */\n    cost_models() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_cost_models(this.ptr);\n        return ret === 0 ? undefined : Costmdls.__wrap(ret);\n    }\n    /**\n    * @param {ExUnitPrices} execution_costs\n    */\n    set_execution_costs(execution_costs) {\n        _assertClass(execution_costs, ExUnitPrices);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_execution_costs(this.ptr, execution_costs.ptr);\n    }\n    /**\n    * @returns {ExUnitPrices | undefined}\n    */\n    execution_costs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_execution_costs(this.ptr);\n        return ret === 0 ? undefined : ExUnitPrices.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_tx_ex_units\n    */\n    set_max_tx_ex_units(max_tx_ex_units) {\n        _assertClass(max_tx_ex_units, ExUnits);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_tx_ex_units(this.ptr, max_tx_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n    max_tx_ex_units() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_tx_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {ExUnits} max_block_ex_units\n    */\n    set_max_block_ex_units(max_block_ex_units) {\n        _assertClass(max_block_ex_units, ExUnits);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_block_ex_units(this.ptr, max_block_ex_units.ptr);\n    }\n    /**\n    * @returns {ExUnits | undefined}\n    */\n    max_block_ex_units() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_block_ex_units(this.ptr);\n        return ret === 0 ? undefined : ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {number} max_value_size\n    */\n    set_max_value_size(max_value_size) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_value_size(this.ptr, max_value_size);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_value_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_value_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} collateral_percentage\n    */\n    set_collateral_percentage(collateral_percentage) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_collateral_percentage(this.ptr, collateral_percentage);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    collateral_percentage() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_collateral_percentage(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {number} max_collateral_inputs\n    */\n    set_max_collateral_inputs(max_collateral_inputs) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_set_max_collateral_inputs(this.ptr, max_collateral_inputs);\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    max_collateral_inputs() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_max_collateral_inputs(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ProtocolParamUpdate}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolparamupdate_new();\n        return ProtocolParamUpdate.__wrap(ret);\n    }\n}\n/**\n*/\nclass ProtocolVersion {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ProtocolVersion.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_protocolversion_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ProtocolVersion}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ProtocolVersion}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ProtocolVersion}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ProtocolVersion.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    major() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_major(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    minor() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_minor(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} major\n    * @param {number} minor\n    * @returns {ProtocolVersion}\n    */\n    static new(major, minor) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.protocolversion_new(major, minor);\n        return ProtocolVersion.__wrap(ret);\n    }\n}\n/**\n* ED25519 key used as public key\n*/\nclass PublicKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_publickey_free(ptr);\n    }\n    /**\n    * Get public key from its bech32 representation\n    * Example:\n    * ```javascript\n    * const pkey = PublicKey.from_bech32(&#39;ed25519_pk1dgaagyh470y66p899txcl3r0jaeaxu6yd7z2dxyk55qcycdml8gszkxze2&#39;);\n    * ```\n    * @param {string} bech32_str\n    * @returns {PublicKey}\n    */\n    static from_bech32(bech32_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech32_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_bech32() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_to_bech32(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {PublicKey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} data\n    * @param {Ed25519Signature} signature\n    * @returns {boolean}\n    */\n    verify(data, signature) {\n        const ptr0 = passArray8ToWasm0(data, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n        const len0 = WASM_VECTOR_LEN;\n        _assertClass(signature, Ed25519Signature);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_verify(this.ptr, ptr0, len0, signature.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_hash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {PublicKey}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return PublicKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass PublicKeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(PublicKeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_publickeys_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_new();\n        return PublicKeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    size() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_size(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {PublicKey}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_get(this.ptr, index);\n        return PublicKey.__wrap(ret);\n    }\n    /**\n    * @param {PublicKey} key\n    */\n    add(key) {\n        _assertClass(key, PublicKey);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.publickeys_add(this.ptr, key.ptr);\n    }\n}\n/**\n*/\nclass Redeemer {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemer.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_redeemer_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemer}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemer.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Redeemer}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemer.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Redeemer}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemer.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    tag() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_tag(this.ptr);\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    index() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_index(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData}\n    */\n    data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_data(this.ptr);\n        return PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {ExUnits}\n    */\n    ex_units() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_ex_units(this.ptr);\n        return ExUnits.__wrap(ret);\n    }\n    /**\n    * @param {RedeemerTag} tag\n    * @param {BigNum} index\n    * @param {PlutusData} data\n    * @param {ExUnits} ex_units\n    * @returns {Redeemer}\n    */\n    static new(tag, index, data, ex_units) {\n        _assertClass(tag, RedeemerTag);\n        _assertClass(index, BigNum);\n        _assertClass(data, PlutusData);\n        _assertClass(ex_units, ExUnits);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemer_new(tag.ptr, index.ptr, data.ptr, ex_units.ptr);\n        return Redeemer.__wrap(ret);\n    }\n}\n/**\n*/\nclass RedeemerTag {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RedeemerTag.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_redeemertag_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RedeemerTag}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RedeemerTag.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {RedeemerTag}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RedeemerTag.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {RedeemerTag}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RedeemerTag.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_spend() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_spend();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_mint() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_mint();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_cert() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_cert();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {RedeemerTag}\n    */\n    static new_reward() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_new_reward();\n        return RedeemerTag.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemertag_kind(this.ptr);\n        return ret >>> 0;\n    }\n}\n/**\n*/\nclass Redeemers {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Redeemers.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_redeemers_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Redeemers}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemers.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Redeemers}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemers.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Redeemers}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Redeemers.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Redeemers}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_new();\n        return Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Redeemer}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_get(this.ptr, index);\n        return Redeemer.__wrap(ret);\n    }\n    /**\n    * @param {Redeemer} elem\n    */\n    add(elem) {\n        _assertClass(elem, Redeemer);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @returns {ExUnits}\n    */\n    total_ex_units() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.redeemers_total_ex_units(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ExUnits.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Relay {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relay.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_relay_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relay}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Relay}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Relay}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relay.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {SingleHostAddr} single_host_addr\n    * @returns {Relay}\n    */\n    static new_single_host_addr(single_host_addr) {\n        _assertClass(single_host_addr, SingleHostAddr);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_new_single_host_addr(single_host_addr.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {SingleHostName} single_host_name\n    * @returns {Relay}\n    */\n    static new_single_host_name(single_host_name) {\n        _assertClass(single_host_name, SingleHostName);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_new_single_host_name(single_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {MultiHostName} multi_host_name\n    * @returns {Relay}\n    */\n    static new_multi_host_name(multi_host_name) {\n        _assertClass(multi_host_name, MultiHostName);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_new_multi_host_name(multi_host_name.ptr);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {SingleHostAddr | undefined}\n    */\n    as_single_host_addr() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_as_single_host_addr(this.ptr);\n        return ret === 0 ? undefined : SingleHostAddr.__wrap(ret);\n    }\n    /**\n    * @returns {SingleHostName | undefined}\n    */\n    as_single_host_name() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_as_single_host_name(this.ptr);\n        return ret === 0 ? undefined : SingleHostName.__wrap(ret);\n    }\n    /**\n    * @returns {MultiHostName | undefined}\n    */\n    as_multi_host_name() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relay_as_multi_host_name(this.ptr);\n        return ret === 0 ? undefined : MultiHostName.__wrap(ret);\n    }\n}\n/**\n*/\nclass Relays {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Relays.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_relays_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Relays}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Relays}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Relays}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Relays.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Relays}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_new();\n        return Relays.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Relay}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_get(this.ptr, index);\n        return Relay.__wrap(ret);\n    }\n    /**\n    * @param {Relay} elem\n    */\n    add(elem) {\n        _assertClass(elem, Relay);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.relays_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass RewardAddress {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddress.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rewardaddress_free(ptr);\n    }\n    /**\n    * @param {number} network\n    * @param {StakeCredential} payment\n    * @returns {RewardAddress}\n    */\n    static new(network, payment) {\n        _assertClass(payment, StakeCredential);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_new(network, payment.ptr);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    payment_cred() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_payment_cred(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Address}\n    */\n    to_address() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_to_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @param {Address} addr\n    * @returns {RewardAddress | undefined}\n    */\n    static from_address(addr) {\n        _assertClass(addr, Address);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddress_from_address(addr.ptr);\n        return ret === 0 ? undefined : RewardAddress.__wrap(ret);\n    }\n}\n/**\n*/\nclass RewardAddresses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(RewardAddresses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_rewardaddresses_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {RewardAddresses}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {RewardAddresses}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {RewardAddresses}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return RewardAddresses.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_new();\n        return RewardAddresses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {RewardAddress}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_get(this.ptr, index);\n        return RewardAddress.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} elem\n    */\n    add(elem) {\n        _assertClass(elem, RewardAddress);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.rewardaddresses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ScriptAll {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAll.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptall_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAll}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ScriptAll}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptAll}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAll.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAll}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptall_new(native_scripts.ptr);\n        return ScriptAll.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptAny {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptAny.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptany_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptAny}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ScriptAny}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptAny}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptAny.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptAny}\n    */\n    static new(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptany_new(native_scripts.ptr);\n        return ScriptAny.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptDataHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptDataHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptdatahash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptDataHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptDataHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {ScriptDataHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptdatahash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptDataHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass ScriptHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scripthash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {ScriptHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {ScriptHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass ScriptHashes {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptHashes.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scripthashes_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptHashes}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ScriptHashes}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptHashes}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptHashes.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ScriptHashes}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_new();\n        return ScriptHashes.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {ScriptHash}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_get(this.ptr, index);\n        return ScriptHash.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} elem\n    */\n    add(elem) {\n        _assertClass(elem, ScriptHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scripthashes_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass ScriptNOfK {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptNOfK.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptnofk_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptNOfK}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ScriptNOfK}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptNOfK}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptNOfK.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    n() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_n(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {NativeScripts}\n    */\n    native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_native_scripts(this.ptr);\n        return NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {number} n\n    * @param {NativeScripts} native_scripts\n    * @returns {ScriptNOfK}\n    */\n    static new(n, native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptnofk_new(n, native_scripts.ptr);\n        return ScriptNOfK.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptPubkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptPubkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptpubkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptPubkey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ScriptPubkey}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptPubkey}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptPubkey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    addr_keyhash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_addr_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHash} addr_keyhash\n    * @returns {ScriptPubkey}\n    */\n    static new(addr_keyhash) {\n        _assertClass(addr_keyhash, Ed25519KeyHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptpubkey_new(addr_keyhash.ptr);\n        return ScriptPubkey.__wrap(ret);\n    }\n}\n/**\n*/\nclass ScriptRef {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ScriptRef.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_scriptref_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {ScriptRef}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {ScriptRef}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {ScriptRef}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return ScriptRef.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {NativeScript} native_script\n    * @returns {ScriptRef}\n    */\n    static new_native_script(native_script) {\n        _assertClass(native_script, NativeScript);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_new_native_script(native_script.ptr);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScript} plutus_script\n    * @returns {ScriptRef}\n    */\n    static new_plutus_script(plutus_script) {\n        _assertClass(plutus_script, PlutusScript);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_new_plutus_script(plutus_script.ptr);\n        return ScriptRef.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_native_script() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_is_native_script(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_plutus_script() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_is_plutus_script(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {NativeScript | undefined}\n    */\n    native_script() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_native_script(this.ptr);\n        return ret === 0 ? undefined : NativeScript.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusScript | undefined}\n    */\n    plutus_script() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.scriptref_plutus_script(this.ptr);\n        return ret === 0 ? undefined : PlutusScript.__wrap(ret);\n    }\n}\n/**\n*/\nclass SingleHostAddr {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostAddr.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_singlehostaddr_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostAddr}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {SingleHostAddr}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {SingleHostAddr}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostAddr.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {Ipv4 | undefined}\n    */\n    ipv4() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_ipv4(this.ptr);\n        return ret === 0 ? undefined : Ipv4.__wrap(ret);\n    }\n    /**\n    * @returns {Ipv6 | undefined}\n    */\n    ipv6() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_ipv6(this.ptr);\n        return ret === 0 ? undefined : Ipv6.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {Ipv4 | undefined} ipv4\n    * @param {Ipv6 | undefined} ipv6\n    * @returns {SingleHostAddr}\n    */\n    static new(port, ipv4, ipv6) {\n        let ptr0 = 0;\n        if (!isLikeNone(ipv4)) {\n            _assertClass(ipv4, Ipv4);\n            ptr0 = ipv4.ptr;\n            ipv4.ptr = 0;\n        }\n        let ptr1 = 0;\n        if (!isLikeNone(ipv6)) {\n            _assertClass(ipv6, Ipv6);\n            ptr1 = ipv6.ptr;\n            ipv6.ptr = 0;\n        }\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostaddr_new(isLikeNone(port) ? 0xFFFFFF : port, ptr0, ptr1);\n        return SingleHostAddr.__wrap(ret);\n    }\n}\n/**\n*/\nclass SingleHostName {\n\n    static __wrap(ptr) {\n        const obj = Object.create(SingleHostName.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_singlehostname_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {SingleHostName}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {SingleHostName}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {SingleHostName}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return SingleHostName.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    port() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_port(this.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n    /**\n    * @returns {DNSRecordAorAAAA}\n    */\n    dns_name() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_dns_name(this.ptr);\n        return DNSRecordAorAAAA.__wrap(ret);\n    }\n    /**\n    * @param {number | undefined} port\n    * @param {DNSRecordAorAAAA} dns_name\n    * @returns {SingleHostName}\n    */\n    static new(port, dns_name) {\n        _assertClass(dns_name, DNSRecordAorAAAA);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.singlehostname_new(isLikeNone(port) ? 0xFFFFFF : port, dns_name.ptr);\n        return SingleHostName.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeCredential {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredential.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakecredential_free(ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_keyhash(hash) {\n        _assertClass(hash, Ed25519KeyHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_keyhash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {ScriptHash} hash\n    * @returns {StakeCredential}\n    */\n    static from_scripthash(hash) {\n        _assertClass(hash, ScriptHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_scripthash(hash.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash | undefined}\n    */\n    to_keyhash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_keyhash(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptHash | undefined}\n    */\n    to_scripthash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_scripthash(this.ptr);\n        return ret === 0 ? undefined : ScriptHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredential}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {StakeCredential}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeCredential}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredential_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredential.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass StakeCredentials {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeCredentials.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakecredentials_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeCredentials}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {StakeCredentials}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeCredentials}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeCredentials.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {StakeCredentials}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_new();\n        return StakeCredentials.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {StakeCredential}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_get(this.ptr, index);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} elem\n    */\n    add(elem) {\n        _assertClass(elem, StakeCredential);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakecredentials_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass StakeDelegation {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDelegation.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakedelegation_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDelegation}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {StakeDelegation}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeDelegation}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDelegation.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519KeyHash}\n    */\n    pool_keyhash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_pool_keyhash(this.ptr);\n        return Ed25519KeyHash.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @param {Ed25519KeyHash} pool_keyhash\n    * @returns {StakeDelegation}\n    */\n    static new(stake_credential, pool_keyhash) {\n        _assertClass(stake_credential, StakeCredential);\n        _assertClass(pool_keyhash, Ed25519KeyHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakedelegation_new(stake_credential.ptr, pool_keyhash.ptr);\n        return StakeDelegation.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeDeregistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeDeregistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakederegistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeDeregistration}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {StakeDeregistration}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeDeregistration}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeDeregistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeDeregistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakederegistration_new(stake_credential.ptr);\n        return StakeDeregistration.__wrap(ret);\n    }\n}\n/**\n*/\nclass StakeRegistration {\n\n    static __wrap(ptr) {\n        const obj = Object.create(StakeRegistration.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_stakeregistration_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {StakeRegistration}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {StakeRegistration}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {StakeRegistration}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return StakeRegistration.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {StakeCredential}\n    */\n    stake_credential() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_stake_credential(this.ptr);\n        return StakeCredential.__wrap(ret);\n    }\n    /**\n    * @param {StakeCredential} stake_credential\n    * @returns {StakeRegistration}\n    */\n    static new(stake_credential) {\n        _assertClass(stake_credential, StakeCredential);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.stakeregistration_new(stake_credential.ptr);\n        return StakeRegistration.__wrap(ret);\n    }\n}\n/**\n*/\nclass Strings {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Strings.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_strings_free(ptr);\n    }\n    /**\n    * @returns {Strings}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_new();\n        return Strings.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {string}\n    */\n    get(index) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_get(retptr, this.ptr, index);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} elem\n    */\n    add(elem) {\n        const ptr0 = passStringToWasm0(elem, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.strings_add(this.ptr, ptr0, len0);\n    }\n}\n/**\n*/\nclass TimelockExpiry {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockExpiry.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_timelockexpiry_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockExpiry}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TimelockExpiry}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TimelockExpiry}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockExpiry.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    slot() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_slot(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    slot_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_slot_bignum(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This constructor uses outdated slot number format.\n    * Use `.new_timelockexpiry` instead\n    * @param {number} slot\n    * @returns {TimelockExpiry}\n    */\n    static new(slot) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_new(slot);\n        return TimelockExpiry.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} slot\n    * @returns {TimelockExpiry}\n    */\n    static new_timelockexpiry(slot) {\n        _assertClass(slot, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockexpiry_new_timelockexpiry(slot.ptr);\n        return TimelockExpiry.__wrap(ret);\n    }\n}\n/**\n*/\nclass TimelockStart {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TimelockStart.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_timelockstart_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TimelockStart}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TimelockStart}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TimelockStart}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TimelockStart.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Returns a Slot32 (u32) value in case the underlying original BigNum (u64) value is within the limits.\n    * Otherwise will just raise an error.\n    * Use `.slot_bignum` instead\n    * @returns {number}\n    */\n    slot() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_slot(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    slot_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_slot_bignum(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This constructor uses outdated slot number format.\n    * Use `.new_timelockstart` instead.\n    * @param {number} slot\n    * @returns {TimelockStart}\n    */\n    static new(slot) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_new(slot);\n        return TimelockStart.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} slot\n    * @returns {TimelockStart}\n    */\n    static new_timelockstart(slot) {\n        _assertClass(slot, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.timelockstart_new_timelockstart(slot.ptr);\n        return TimelockStart.__wrap(ret);\n    }\n}\n/**\n*/\nclass Transaction {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transaction.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transaction_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Transaction}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Transaction}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Transaction}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionBody}\n    */\n    body() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_body(this.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    witness_set() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_witness_set(this.ptr);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_valid() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_is_valid(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {AuxiliaryData | undefined}\n    */\n    auxiliary_data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * @param {boolean} valid\n    */\n    set_is_valid(valid) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_set_is_valid(this.ptr, valid);\n    }\n    /**\n    * @param {TransactionBody} body\n    * @param {TransactionWitnessSet} witness_set\n    * @param {AuxiliaryData | undefined} auxiliary_data\n    * @returns {Transaction}\n    */\n    static new(body, witness_set, auxiliary_data) {\n        _assertClass(body, TransactionBody);\n        _assertClass(witness_set, TransactionWitnessSet);\n        let ptr0 = 0;\n        if (!isLikeNone(auxiliary_data)) {\n            _assertClass(auxiliary_data, AuxiliaryData);\n            ptr0 = auxiliary_data.ptr;\n            auxiliary_data.ptr = 0;\n        }\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transaction_new(body.ptr, witness_set.ptr, ptr0);\n        return Transaction.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionBatch {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBatch.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbatch_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbatch_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Transaction}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbatch_get(this.ptr, index);\n        return Transaction.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionBatchList {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBatchList.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbatchlist_free(ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbatchlist_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionBatch}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbatchlist_get(this.ptr, index);\n        return TransactionBatch.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionBodies {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBodies.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbodies_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBodies}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionBodies}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionBodies}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBodies.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionBodies}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_new();\n        return TransactionBodies.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionBody}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_get(this.ptr, index);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * @param {TransactionBody} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionBody);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbodies_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionBody {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBody.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbody_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionBody}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionBody}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionBody}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    inputs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    outputs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_outputs(this.ptr);\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    fee() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_fee(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Returns a Slot32 (u32) value in case the underlying original BigNum (u64) value is within the limits.\n    * Otherwise will just raise an error.\n    * @returns {number | undefined}\n    */\n    ttl() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_ttl(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    ttl_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_ttl_bignum(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} ttl\n    */\n    set_ttl(ttl) {\n        _assertClass(ttl, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_ttl(this.ptr, ttl.ptr);\n    }\n    /**\n    */\n    remove_ttl() {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_remove_ttl(this.ptr);\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @returns {Certificates | undefined}\n    */\n    certs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_certs(this.ptr);\n        return ret === 0 ? undefined : Certificates.__wrap(ret);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @returns {Withdrawals | undefined}\n    */\n    withdrawals() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_withdrawals(this.ptr);\n        return ret === 0 ? undefined : Withdrawals.__wrap(ret);\n    }\n    /**\n    * @param {Update} update\n    */\n    set_update(update) {\n        _assertClass(update, Update);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_update(this.ptr, update.ptr);\n    }\n    /**\n    * @returns {Update | undefined}\n    */\n    update() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_update(this.ptr);\n        return ret === 0 ? undefined : Update.__wrap(ret);\n    }\n    /**\n    * @param {AuxiliaryDataHash} auxiliary_data_hash\n    */\n    set_auxiliary_data_hash(auxiliary_data_hash) {\n        _assertClass(auxiliary_data_hash, AuxiliaryDataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_auxiliary_data_hash(this.ptr, auxiliary_data_hash.ptr);\n    }\n    /**\n    * @returns {AuxiliaryDataHash | undefined}\n    */\n    auxiliary_data_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_auxiliary_data_hash(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryDataHash.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Uses outdated slot number format.\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @param {BigNum} validity_start_interval\n    */\n    set_validity_start_interval_bignum(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        var ptr0 = validity_start_interval.ptr;\n        validity_start_interval.ptr = 0;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_validity_start_interval_bignum(this.ptr, ptr0);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    validity_start_interval_bignum() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_validity_start_interval_bignum(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Returns a Option<Slot32> (u32) value in case the underlying original Option<BigNum> (u64) value is within the limits.\n    * Otherwise will just raise an error.\n    * Use `.validity_start_interval_bignum` instead.\n    * @returns {number | undefined}\n    */\n    validity_start_interval() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_validity_start_interval(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Mint} mint\n    */\n    set_mint(mint) {\n        _assertClass(mint, Mint);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_mint(this.ptr, mint.ptr);\n    }\n    /**\n    * @returns {Mint | undefined}\n    */\n    mint() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * This function returns the mint value of the transaction\n    * Use `.mint()` instead.\n    * @returns {Mint | undefined}\n    */\n    multiassets() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_multiassets(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} reference_inputs\n    */\n    set_reference_inputs(reference_inputs) {\n        _assertClass(reference_inputs, TransactionInputs);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_reference_inputs(this.ptr, reference_inputs.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n    reference_inputs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_reference_inputs(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {ScriptDataHash} script_data_hash\n    */\n    set_script_data_hash(script_data_hash) {\n        _assertClass(script_data_hash, ScriptDataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_script_data_hash(this.ptr, script_data_hash.ptr);\n    }\n    /**\n    * @returns {ScriptDataHash | undefined}\n    */\n    script_data_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_script_data_hash(this.ptr);\n        return ret === 0 ? undefined : ScriptDataHash.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInputs} collateral\n    */\n    set_collateral(collateral) {\n        _assertClass(collateral, TransactionInputs);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n    collateral() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_collateral(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @param {Ed25519KeyHashes} required_signers\n    */\n    set_required_signers(required_signers) {\n        _assertClass(required_signers, Ed25519KeyHashes);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_required_signers(this.ptr, required_signers.ptr);\n    }\n    /**\n    * @returns {Ed25519KeyHashes | undefined}\n    */\n    required_signers() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_required_signers(this.ptr);\n        return ret === 0 ? undefined : Ed25519KeyHashes.__wrap(ret);\n    }\n    /**\n    * @param {NetworkId} network_id\n    */\n    set_network_id(network_id) {\n        _assertClass(network_id, NetworkId);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_network_id(this.ptr, network_id.ptr);\n    }\n    /**\n    * @returns {NetworkId | undefined}\n    */\n    network_id() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_network_id(this.ptr);\n        return ret === 0 ? undefined : NetworkId.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} collateral_return\n    */\n    set_collateral_return(collateral_return) {\n        _assertClass(collateral_return, TransactionOutput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n    * @returns {TransactionOutput | undefined}\n    */\n    collateral_return() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_collateral_return(this.ptr);\n        return ret === 0 ? undefined : TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} total_collateral\n    */\n    set_total_collateral(total_collateral) {\n        _assertClass(total_collateral, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    total_collateral() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_total_collateral(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This constructor uses outdated slot number format for the ttl value.\n    * Use `.new_tx_body` and then `.set_ttl` instead\n    * @param {TransactionInputs} inputs\n    * @param {TransactionOutputs} outputs\n    * @param {BigNum} fee\n    * @param {number | undefined} ttl\n    * @returns {TransactionBody}\n    */\n    static new(inputs, outputs, fee, ttl) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_new(inputs.ptr, outputs.ptr, fee.ptr, !isLikeNone(ttl), isLikeNone(ttl) ? 0 : ttl);\n        return TransactionBody.__wrap(ret);\n    }\n    /**\n    * Returns a new TransactionBody.\n    * In the new version of \"new\" we removed optional ttl for support it by wasm_bingen.\n    * Your can use \"set_ttl\" and \"remove_ttl\" to set a new value for ttl or set it as None.\n    * @param {TransactionInputs} inputs\n    * @param {TransactionOutputs} outputs\n    * @param {BigNum} fee\n    * @returns {TransactionBody}\n    */\n    static new_tx_body(inputs, outputs, fee) {\n        _assertClass(inputs, TransactionInputs);\n        _assertClass(outputs, TransactionOutputs);\n        _assertClass(fee, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbody_new_tx_body(inputs.ptr, outputs.ptr, fee.ptr);\n        return TransactionBody.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbuilder_free(ptr);\n    }\n    /**\n    * This automatically selects and adds inputs from {inputs} consisting of just enough to cover\n    * the outputs that have already been added.\n    * This should be called after adding all certs/outputs/etc and will be an error otherwise.\n    * Uses CIP2: https://github.com/cardano-foundation/CIPs/blob/master/CIP-0002/CIP-0002.md\n    * Adding a change output must be called after via TransactionBuilder::add_change_if_needed()\n    * This function, diverging from CIP2, takes into account fees and will attempt to add additional\n    * inputs to cover the minimum fees. This does not, however, set the txbuilder's fee.\n    * @param {TransactionUnspentOutputs} inputs\n    * @param {number} strategy\n    */\n    add_inputs_from(inputs, strategy) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(inputs, TransactionUnspentOutputs);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_inputs_from(retptr, this.ptr, inputs.ptr, strategy);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {TxInputsBuilder} inputs\n    */\n    set_inputs(inputs) {\n        _assertClass(inputs, TxInputsBuilder);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_inputs(this.ptr, inputs.ptr);\n    }\n    /**\n    * @param {TxInputsBuilder} collateral\n    */\n    set_collateral(collateral) {\n        _assertClass(collateral, TxInputsBuilder);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_collateral(this.ptr, collateral.ptr);\n    }\n    /**\n    * @param {TransactionOutput} collateral_return\n    */\n    set_collateral_return(collateral_return) {\n        _assertClass(collateral_return, TransactionOutput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_collateral_return(this.ptr, collateral_return.ptr);\n    }\n    /**\n    * This function will set the collateral-return value and then auto-calculate and assign\n    * the total collateral coin value. Will raise an error in case no collateral inputs are set\n    * or in case the total collateral value will have any assets in it except coin.\n    * @param {TransactionOutput} collateral_return\n    */\n    set_collateral_return_and_total(collateral_return) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(collateral_return, TransactionOutput);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_collateral_return_and_total(retptr, this.ptr, collateral_return.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} total_collateral\n    */\n    set_total_collateral(total_collateral) {\n        _assertClass(total_collateral, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_total_collateral(this.ptr, total_collateral.ptr);\n    }\n    /**\n    * This function will set the total-collateral coin and then auto-calculate and assign\n    * the collateral return value. Will raise an error in case no collateral inputs are set.\n    * The specified address will be the received of the collateral return\n    * @param {BigNum} total_collateral\n    * @param {Address} return_address\n    */\n    set_total_collateral_and_return(total_collateral, return_address) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(total_collateral, BigNum);\n            _assertClass(return_address, Address);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_total_collateral_and_return(retptr, this.ptr, total_collateral.ptr, return_address.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {TransactionInput} reference_input\n    */\n    add_reference_input(reference_input) {\n        _assertClass(reference_input, TransactionInput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_reference_input(this.ptr, reference_input.ptr);\n    }\n    /**\n    * We have to know what kind of inputs these are to know what kind of mock witnesses to create since\n    * 1) mock witnesses have different lengths depending on the type which changes the expecting fee\n    * 2) Witnesses are a set so we need to get rid of duplicates to avoid over-estimating the fee\n    * @param {Ed25519KeyHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_key_input(hash, input, amount) {\n        _assertClass(hash, Ed25519KeyHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * This method adds the input to the builder BUT leaves a missing spot for the witness native script\n    *\n    * After adding the input with this method, use `.add_required_native_input_scripts`\n    * and `.add_required_plutus_input_scripts` to add the witness scripts\n    *\n    * Or instead use `.add_native_script_input` and `.add_plutus_script_input`\n    * to add inputs right along with the script, instead of the script hash\n    * @param {ScriptHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_script_input(hash, input, amount) {\n        _assertClass(hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * This method will add the input to the builder and also register the required native script witness\n    * @param {NativeScript} script\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_native_script_input(script, input, amount) {\n        _assertClass(script, NativeScript);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_native_script_input(this.ptr, script.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * This method will add the input to the builder and also register the required plutus witness\n    * @param {PlutusWitness} witness\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_plutus_script_input(witness, input, amount) {\n        _assertClass(witness, PlutusWitness);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_plutus_script_input(this.ptr, witness.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ByronAddress} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_bootstrap_input(hash, input, amount) {\n        _assertClass(hash, ByronAddress);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * Note that for script inputs this method will use underlying generic `.add_script_input`\n    * which leaves a required empty spot for the script witness (or witnesses in case of Plutus).\n    * You can use `.add_native_script_input` or `.add_plutus_script_input` directly to register the input along with the witness.\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * Returns the number of still missing input scripts (either native or plutus)\n    * Use `.add_required_native_input_scripts` or `.add_required_plutus_input_scripts` to add the missing scripts\n    * @returns {number}\n    */\n    count_missing_input_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_count_missing_input_scripts(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs\n    * Any scripts that don't match any of the previously added inputs will be ignored\n    * Returns the number of remaining required missing witness scripts\n    * Use `.count_missing_input_scripts` to find the number of still missing scripts\n    * @param {NativeScripts} scripts\n    * @returns {number}\n    */\n    add_required_native_input_scripts(scripts) {\n        _assertClass(scripts, NativeScripts);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_required_native_input_scripts(this.ptr, scripts.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs\n    * Any scripts that don't match any of the previously added inputs will be ignored\n    * Returns the number of remaining required missing witness scripts\n    * Use `.count_missing_input_scripts` to find the number of still missing scripts\n    * @param {PlutusWitnesses} scripts\n    * @returns {number}\n    */\n    add_required_plutus_input_scripts(scripts) {\n        _assertClass(scripts, PlutusWitnesses);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_required_plutus_input_scripts(this.ptr, scripts.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Returns a copy of the current script input witness scripts in the builder\n    * @returns {NativeScripts | undefined}\n    */\n    get_native_input_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_native_input_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the current plutus input witness scripts in the builder.\n    * NOTE: each plutus witness will be cloned with a specific corresponding input index\n    * @returns {PlutusWitnesses | undefined}\n    */\n    get_plutus_input_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_plutus_input_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusWitnesses.__wrap(ret);\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    * @returns {BigNum}\n    */\n    fee_for_input(address, input, amount) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(address, Address);\n            _assertClass(input, TransactionInput);\n            _assertClass(amount, Value);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_fee_for_input(retptr, this.ptr, address.ptr, input.ptr, amount.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add explicit output via a TransactionOutput object\n    * @param {TransactionOutput} output\n    */\n    add_output(output) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(output, TransactionOutput);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_output(retptr, this.ptr, output.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * calculates how much the fee would increase if you added a given output\n    * @param {TransactionOutput} output\n    * @returns {BigNum}\n    */\n    fee_for_output(output) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(output, TransactionOutput);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_fee_for_output(retptr, this.ptr, output.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} fee\n    */\n    set_fee(fee) {\n        _assertClass(fee, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_fee(this.ptr, fee.ptr);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Set ttl value.\n    * @param {number} ttl\n    */\n    set_ttl(ttl) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_ttl(this.ptr, ttl);\n    }\n    /**\n    * @param {BigNum} ttl\n    */\n    set_ttl_bignum(ttl) {\n        _assertClass(ttl, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_ttl_bignum(this.ptr, ttl.ptr);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Uses outdated slot number format.\n    * @param {number} validity_start_interval\n    */\n    set_validity_start_interval(validity_start_interval) {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_validity_start_interval(this.ptr, validity_start_interval);\n    }\n    /**\n    * @param {BigNum} validity_start_interval\n    */\n    set_validity_start_interval_bignum(validity_start_interval) {\n        _assertClass(validity_start_interval, BigNum);\n        var ptr0 = validity_start_interval.ptr;\n        validity_start_interval.ptr = 0;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_validity_start_interval_bignum(this.ptr, ptr0);\n    }\n    /**\n    * @param {Certificates} certs\n    */\n    set_certs(certs) {\n        _assertClass(certs, Certificates);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_certs(this.ptr, certs.ptr);\n    }\n    /**\n    * @param {Withdrawals} withdrawals\n    */\n    set_withdrawals(withdrawals) {\n        _assertClass(withdrawals, Withdrawals);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_withdrawals(this.ptr, withdrawals.ptr);\n    }\n    /**\n    * @returns {AuxiliaryData | undefined}\n    */\n    get_auxiliary_data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_auxiliary_data(this.ptr);\n        return ret === 0 ? undefined : AuxiliaryData.__wrap(ret);\n    }\n    /**\n    * Set explicit auxiliary data via an AuxiliaryData object\n    * It might contain some metadata plus native or Plutus scripts\n    * @param {AuxiliaryData} auxiliary_data\n    */\n    set_auxiliary_data(auxiliary_data) {\n        _assertClass(auxiliary_data, AuxiliaryData);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_auxiliary_data(this.ptr, auxiliary_data.ptr);\n    }\n    /**\n    * Set metadata using a GeneralTransactionMetadata object\n    * It will be set to the existing or new auxiliary data in this builder\n    * @param {GeneralTransactionMetadata} metadata\n    */\n    set_metadata(metadata) {\n        _assertClass(metadata, GeneralTransactionMetadata);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_metadata(this.ptr, metadata.ptr);\n    }\n    /**\n    * Add a single metadatum using TransactionMetadatumLabel and TransactionMetadatum objects\n    * It will be securely added to existing or new metadata in this builder\n    * @param {BigNum} key\n    * @param {TransactionMetadatum} val\n    */\n    add_metadatum(key, val) {\n        _assertClass(key, BigNum);\n        _assertClass(val, TransactionMetadatum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_metadatum(this.ptr, key.ptr, val.ptr);\n    }\n    /**\n    * Add a single JSON metadatum using a TransactionMetadatumLabel and a String\n    * It will be securely added to existing or new metadata in this builder\n    * @param {BigNum} key\n    * @param {string} val\n    */\n    add_json_metadatum(key, val) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, BigNum);\n            const ptr0 = passStringToWasm0(val, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_json_metadatum(retptr, this.ptr, key.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a single JSON metadatum using a TransactionMetadatumLabel, a String, and a MetadataJsonSchema object\n    * It will be securely added to existing or new metadata in this builder\n    * @param {BigNum} key\n    * @param {string} val\n    * @param {number} schema\n    */\n    add_json_metadatum_with_schema(key, val, schema) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(key, BigNum);\n            const ptr0 = passStringToWasm0(val, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_json_metadatum_with_schema(retptr, this.ptr, key.ptr, ptr0, len0, schema);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {MintBuilder} mint_builder\n    */\n    set_mint_builder(mint_builder) {\n        _assertClass(mint_builder, MintBuilder);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_mint_builder(this.ptr, mint_builder.ptr);\n    }\n    /**\n    * @returns {MintBuilder | undefined}\n    */\n    get_mint_builder() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_mint_builder(this.ptr);\n        return ret === 0 ? undefined : MintBuilder.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Mints are defining by MintBuilder now.\n    * Use `.set_mint_builder()` and `MintBuilder` instead.\n    * Set explicit Mint object and the required witnesses to this builder\n    * it will replace any previously existing mint and mint scripts\n    * NOTE! Error will be returned in case a mint policy does not have a matching script\n    * @param {Mint} mint\n    * @param {NativeScripts} mint_scripts\n    */\n    set_mint(mint, mint_scripts) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(mint, Mint);\n            _assertClass(mint_scripts, NativeScripts);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_mint(retptr, this.ptr, mint.ptr, mint_scripts.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Mints are defining by MintBuilder now.\n    * Use `.get_mint_builder()` and `.build()` instead.\n    * Returns a copy of the current mint state in the builder\n    * @returns {Mint | undefined}\n    */\n    get_mint() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_mint(this.ptr);\n        return ret === 0 ? undefined : Mint.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the current mint witness scripts in the builder\n    * @returns {NativeScripts | undefined}\n    */\n    get_mint_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_mint_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Mints are defining by MintBuilder now.\n    * Use `.set_mint_builder()` and `MintBuilder` instead.\n    * Add a mint entry to this builder using a PolicyID and MintAssets object\n    * It will be securely added to existing or new Mint in this builder\n    * It will replace any existing mint assets with the same PolicyID\n    * @param {NativeScript} policy_script\n    * @param {MintAssets} mint_assets\n    */\n    set_mint_asset(policy_script, mint_assets) {\n        _assertClass(policy_script, NativeScript);\n        _assertClass(mint_assets, MintAssets);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_mint_asset(this.ptr, policy_script.ptr, mint_assets.ptr);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Mints are defining by MintBuilder now.\n    * Use `.set_mint_builder()` and `MintBuilder` instead.\n    * Add a mint entry to this builder using a PolicyID, AssetName, and Int object for amount\n    * It will be securely added to existing or new Mint in this builder\n    * It will replace any previous existing amount same PolicyID and AssetName\n    * @param {NativeScript} policy_script\n    * @param {AssetName} asset_name\n    * @param {Int} amount\n    */\n    add_mint_asset(policy_script, asset_name, amount) {\n        _assertClass(policy_script, NativeScript);\n        _assertClass(asset_name, AssetName);\n        _assertClass(amount, Int);\n        var ptr0 = amount.ptr;\n        amount.ptr = 0;\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_mint_asset(this.ptr, policy_script.ptr, asset_name.ptr, ptr0);\n    }\n    /**\n    * Add a mint entry together with an output to this builder\n    * Using a PolicyID, AssetName, Int for amount, Address, and Coin (BigNum) objects\n    * The asset will be securely added to existing or new Mint in this builder\n    * A new output will be added with the specified Address, the Coin value, and the minted asset\n    * @param {NativeScript} policy_script\n    * @param {AssetName} asset_name\n    * @param {Int} amount\n    * @param {TransactionOutputAmountBuilder} output_builder\n    * @param {BigNum} output_coin\n    */\n    add_mint_asset_and_output(policy_script, asset_name, amount, output_builder, output_coin) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(policy_script, NativeScript);\n            _assertClass(asset_name, AssetName);\n            _assertClass(amount, Int);\n            var ptr0 = amount.ptr;\n            amount.ptr = 0;\n            _assertClass(output_builder, TransactionOutputAmountBuilder);\n            _assertClass(output_coin, BigNum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_mint_asset_and_output(retptr, this.ptr, policy_script.ptr, asset_name.ptr, ptr0, output_builder.ptr, output_coin.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Add a mint entry together with an output to this builder\n    * Using a PolicyID, AssetName, Int for amount, and Address objects\n    * The asset will be securely added to existing or new Mint in this builder\n    * A new output will be added with the specified Address and the minted asset\n    * The output will be set to contain the minimum required amount of Coin\n    * @param {NativeScript} policy_script\n    * @param {AssetName} asset_name\n    * @param {Int} amount\n    * @param {TransactionOutputAmountBuilder} output_builder\n    */\n    add_mint_asset_and_output_min_required_coin(policy_script, asset_name, amount, output_builder) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(policy_script, NativeScript);\n            _assertClass(asset_name, AssetName);\n            _assertClass(amount, Int);\n            var ptr0 = amount.ptr;\n            amount.ptr = 0;\n            _assertClass(output_builder, TransactionOutputAmountBuilder);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_mint_asset_and_output_min_required_coin(retptr, this.ptr, policy_script.ptr, asset_name.ptr, ptr0, output_builder.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {TransactionBuilderConfig} cfg\n    * @returns {TransactionBuilder}\n    */\n    static new(cfg) {\n        _assertClass(cfg, TransactionBuilderConfig);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_new(cfg.ptr);\n        return TransactionBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    get_reference_inputs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_reference_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * does not include refunds or withdrawals\n    * @returns {Value}\n    */\n    get_explicit_input() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_explicit_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * withdrawals and refunds\n    * @returns {Value}\n    */\n    get_implicit_input() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_implicit_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return explicit input plus implicit input plus mint\n    * @returns {Value}\n    */\n    get_total_input() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_total_input(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Return explicit output plus deposit plus burn\n    * @returns {Value}\n    */\n    get_total_output() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_total_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * does not include fee\n    * @returns {Value}\n    */\n    get_explicit_output() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_explicit_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    get_deposit() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_deposit(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum | undefined}\n    */\n    get_fee_if_set() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_get_fee_if_set(this.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * Warning: this function will mutate the /fee/ field\n    * Make sure to call this function last after setting all other tx-body properties\n    * Editing inputs, outputs, mint, etc. after change been calculated\n    * might cause a mismatch in calculated fee versus the required fee\n    * @param {Address} address\n    * @returns {boolean}\n    */\n    add_change_if_needed(address) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(address, Address);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_change_if_needed(retptr, this.ptr, address.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 !== 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * This method will calculate the script hash data\n    * using the plutus datums and redeemers already present in the builder\n    * along with the provided cost model, and will register the calculated value\n    * in the builder to be used when building the tx body.\n    * In case there are no plutus input witnesses present - nothing will change\n    * You can set specific hash value using `.set_script_data_hash`\n    * NOTE: this function will check which language versions are used in the present scripts\n    * and will assert and require for a corresponding cost-model to be present in the passed map.\n    * Only the cost-models for the present language versions will be used in the hash calculation.\n    * @param {Costmdls} cost_models\n    */\n    calc_script_data_hash(cost_models) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(cost_models, Costmdls);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_calc_script_data_hash(retptr, this.ptr, cost_models.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            if (r1) {\n                throw takeObject(r0);\n            }\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Sets the specified hash value.\n    * Alternatively you can use `.calc_script_data_hash` to calculate the hash automatically.\n    * Or use `.remove_script_data_hash` to delete the previously set value\n    * @param {ScriptDataHash} hash\n    */\n    set_script_data_hash(hash) {\n        _assertClass(hash, ScriptDataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_set_script_data_hash(this.ptr, hash.ptr);\n    }\n    /**\n    * Deletes any previously set plutus data hash value.\n    * Use `.set_script_data_hash` or `.calc_script_data_hash` to set it.\n    */\n    remove_script_data_hash() {\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_remove_script_data_hash(this.ptr);\n    }\n    /**\n    * @param {Ed25519KeyHash} key\n    */\n    add_required_signer(key) {\n        _assertClass(key, Ed25519KeyHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_add_required_signer(this.ptr, key.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    full_size() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_full_size(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return r0 >>> 0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint32Array}\n    */\n    output_sizes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_output_sizes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU32FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns object the body of the new transaction\n    * Auxiliary data itself is not included\n    * You can use `get_auxiliary_data` or `build_tx`\n    * @returns {TransactionBody}\n    */\n    build() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBody.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Returns full Transaction object with the body and the auxiliary data\n    * NOTE: witness_set will contain all mint_scripts if any been added or set\n    * NOTE: is_valid set to true\n    * NOTE: Will fail in case there are any script inputs added with no corresponding witness\n    * @returns {Transaction}\n    */\n    build_tx() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_build_tx(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * Similar to `.build_tx()` but will NOT fail in case there are missing script witnesses\n    * @returns {Transaction}\n    */\n    build_tx_unsafe() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_build_tx_unsafe(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Transaction.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * warning: sum of all parts of a transaction must equal 0. You cannot just set the fee to the min value and forget about it\n    * warning: min_fee may be slightly larger than the actual minimum fee (ex: a few lovelaces)\n    * this is done to simplify the library code, but can be fixed later\n    * @returns {BigNum}\n    */\n    min_fee() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilder_min_fee(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return BigNum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass TransactionBuilderConfig {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfig.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbuilderconfig_free(ptr);\n    }\n}\n/**\n*/\nclass TransactionBuilderConfigBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionBuilderConfigBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionbuilderconfigbuilder_free(ptr);\n    }\n    /**\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_new();\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {LinearFee} fee_algo\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    fee_algo(fee_algo) {\n        _assertClass(fee_algo, LinearFee);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_fee_algo(this.ptr, fee_algo.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Since babbage era cardano nodes use coins per byte. Use '.coins_per_utxo_byte' instead.\n    * @param {BigNum} coins_per_utxo_word\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    coins_per_utxo_word(coins_per_utxo_word) {\n        _assertClass(coins_per_utxo_word, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_coins_per_utxo_word(this.ptr, coins_per_utxo_word.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coins_per_utxo_byte\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    coins_per_utxo_byte(coins_per_utxo_byte) {\n        _assertClass(coins_per_utxo_byte, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_coins_per_utxo_byte(this.ptr, coins_per_utxo_byte.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {ExUnitPrices} ex_unit_prices\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    ex_unit_prices(ex_unit_prices) {\n        _assertClass(ex_unit_prices, ExUnitPrices);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_ex_unit_prices(this.ptr, ex_unit_prices.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} pool_deposit\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    pool_deposit(pool_deposit) {\n        _assertClass(pool_deposit, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_pool_deposit(this.ptr, pool_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} key_deposit\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    key_deposit(key_deposit) {\n        _assertClass(key_deposit, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_key_deposit(this.ptr, key_deposit.ptr);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {number} max_value_size\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    max_value_size(max_value_size) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_max_value_size(this.ptr, max_value_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {number} max_tx_size\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    max_tx_size(max_tx_size) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_max_tx_size(this.ptr, max_tx_size);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @param {boolean} prefer_pure_change\n    * @returns {TransactionBuilderConfigBuilder}\n    */\n    prefer_pure_change(prefer_pure_change) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_prefer_pure_change(this.ptr, prefer_pure_change);\n        return TransactionBuilderConfigBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionBuilderConfig}\n    */\n    build() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionbuilderconfigbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionBuilderConfig.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass TransactionHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {TransactionHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {TransactionHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass TransactionInput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactioninput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInput}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionInput}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionInput}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionHash}\n    */\n    transaction_id() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_transaction_id(this.ptr);\n        return TransactionHash.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    index() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_index(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {TransactionHash} transaction_id\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    static new(transaction_id, index) {\n        _assertClass(transaction_id, TransactionHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninput_new(transaction_id.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionInputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionInputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactioninputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionInputs}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionInputs}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionInputs}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionInputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_new();\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionInput}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_get(this.ptr, index);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionInput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionInput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_add(this.ptr, elem.ptr);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n    to_option() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactioninputs_to_option(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionMetadatum {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatum.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionmetadatum_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionMetadatum}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {MetadataMap} map\n    * @returns {TransactionMetadatum}\n    */\n    static new_map(map) {\n        _assertClass(map, MetadataMap);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_map(map.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {MetadataList} list\n    * @returns {TransactionMetadatum}\n    */\n    static new_list(list) {\n        _assertClass(list, MetadataList);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_list(list.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Int} int\n    * @returns {TransactionMetadatum}\n    */\n    static new_int(int) {\n        _assertClass(int, Int);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_int(int.ptr);\n        return TransactionMetadatum.__wrap(ret);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatum}\n    */\n    static new_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} text\n    * @returns {TransactionMetadatum}\n    */\n    static new_text(text) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(text, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_new_text(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatum.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    kind() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_kind(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {MetadataMap}\n    */\n    as_map() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_map(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataMap.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {MetadataList}\n    */\n    as_list() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_list(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return MetadataList.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Int}\n    */\n    as_int() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_int(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Int.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    as_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            if (r3) {\n                throw takeObject(r2);\n            }\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    as_text() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatum_as_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n}\n/**\n*/\nclass TransactionMetadatumLabels {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionMetadatumLabels.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionmetadatumlabels_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionMetadatumLabels}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatumLabels.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionMetadatumLabels}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionMetadatumLabels.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionMetadatumLabels}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_new();\n        return TransactionMetadatumLabels.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {BigNum}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_get(this.ptr, index);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} elem\n    */\n    add(elem) {\n        _assertClass(elem, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionmetadatumlabels_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutput}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionOutput}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionOutput}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Address}\n    */\n    address() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_address(this.ptr);\n        return Address.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n    amount() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_amount(this.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {DataHash | undefined}\n    */\n    data_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_data_hash(this.ptr);\n        return ret === 0 ? undefined : DataHash.__wrap(ret);\n    }\n    /**\n    * @returns {PlutusData | undefined}\n    */\n    plutus_data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusData.__wrap(ret);\n    }\n    /**\n    * @returns {ScriptRef | undefined}\n    */\n    script_ref() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_script_ref(this.ptr);\n        return ret === 0 ? undefined : ScriptRef.__wrap(ret);\n    }\n    /**\n    * @param {ScriptRef} script_ref\n    */\n    set_script_ref(script_ref) {\n        _assertClass(script_ref, ScriptRef);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_set_script_ref(this.ptr, script_ref.ptr);\n    }\n    /**\n    * @param {PlutusData} data\n    */\n    set_plutus_data(data) {\n        _assertClass(data, PlutusData);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_set_plutus_data(this.ptr, data.ptr);\n    }\n    /**\n    * @param {DataHash} data_hash\n    */\n    set_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_set_data_hash(this.ptr, data_hash.ptr);\n    }\n    /**\n    * @returns {boolean}\n    */\n    has_plutus_data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_has_plutus_data(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    has_data_hash() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_has_data_hash(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {boolean}\n    */\n    has_script_ref() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_has_script_ref(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @param {Address} address\n    * @param {Value} amount\n    * @returns {TransactionOutput}\n    */\n    static new(address, amount) {\n        _assertClass(address, Address);\n        _assertClass(amount, Value);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutput_new(address.ptr, amount.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionOutputAmountBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputAmountBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionoutputamountbuilder_free(ptr);\n    }\n    /**\n    * @param {Value} amount\n    * @returns {TransactionOutputAmountBuilder}\n    */\n    with_value(amount) {\n        _assertClass(amount, Value);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputamountbuilder_with_value(this.ptr, amount.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {TransactionOutputAmountBuilder}\n    */\n    with_coin(coin) {\n        _assertClass(coin, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputamountbuilder_with_coin(this.ptr, coin.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @param {MultiAsset} multiasset\n    * @returns {TransactionOutputAmountBuilder}\n    */\n    with_coin_and_asset(coin, multiasset) {\n        _assertClass(coin, BigNum);\n        _assertClass(multiasset, MultiAsset);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputamountbuilder_with_coin_and_asset(this.ptr, coin.ptr, multiasset.ptr);\n        return TransactionOutputAmountBuilder.__wrap(ret);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * Since babbage era cardano nodes use coins per byte. Use '.with_asset_and_min_required_coin_by_utxo_cost' instead.\n    * @param {MultiAsset} multiasset\n    * @param {BigNum} coins_per_utxo_word\n    * @returns {TransactionOutputAmountBuilder}\n    */\n    with_asset_and_min_required_coin(multiasset, coins_per_utxo_word) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(multiasset, MultiAsset);\n            _assertClass(coins_per_utxo_word, BigNum);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputamountbuilder_with_asset_and_min_required_coin(retptr, this.ptr, multiasset.ptr, coins_per_utxo_word.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    * @param {DataCost} data_cost\n    * @returns {TransactionOutputAmountBuilder}\n    */\n    with_asset_and_min_required_coin_by_utxo_cost(multiasset, data_cost) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(multiasset, MultiAsset);\n            _assertClass(data_cost, DataCost);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputamountbuilder_with_asset_and_min_required_coin_by_utxo_cost(retptr, this.ptr, multiasset.ptr, data_cost.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionOutput}\n    */\n    build() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputamountbuilder_build(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n* We introduce a builder-pattern format for creating transaction outputs\n* This is because:\n* 1. Some fields (i.e. data hash) are optional, and we can't easily expose Option<> in WASM\n* 2. Some fields like amounts have many ways it could be set (some depending on other field values being known)\n* 3. Easier to adapt as the output format gets more complicated in future Cardano releases\n*/\nclass TransactionOutputBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionoutputbuilder_free(ptr);\n    }\n    /**\n    * @returns {TransactionOutputBuilder}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputbuilder_new();\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @param {Address} address\n    * @returns {TransactionOutputBuilder}\n    */\n    with_address(address) {\n        _assertClass(address, Address);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputbuilder_with_address(this.ptr, address.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @param {DataHash} data_hash\n    * @returns {TransactionOutputBuilder}\n    */\n    with_data_hash(data_hash) {\n        _assertClass(data_hash, DataHash);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputbuilder_with_data_hash(this.ptr, data_hash.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @param {PlutusData} data\n    * @returns {TransactionOutputBuilder}\n    */\n    with_plutus_data(data) {\n        _assertClass(data, PlutusData);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputbuilder_with_plutus_data(this.ptr, data.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @param {ScriptRef} script_ref\n    * @returns {TransactionOutputBuilder}\n    */\n    with_script_ref(script_ref) {\n        _assertClass(script_ref, ScriptRef);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputbuilder_with_script_ref(this.ptr, script_ref.ptr);\n        return TransactionOutputBuilder.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutputAmountBuilder}\n    */\n    next() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputbuilder_next(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputAmountBuilder.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass TransactionOutputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionOutputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionoutputs_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionOutputs}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionOutputs}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionOutputs}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionOutputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionOutputs}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_new();\n        return TransactionOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionOutput}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_get(this.ptr, index);\n        return TransactionOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionOutput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionOutput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionUnspentOutput {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutput.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionunspentoutput_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionUnspentOutput}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionUnspentOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionUnspentOutput}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionUnspentOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionUnspentOutput}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionUnspentOutput.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {TransactionInput} input\n    * @param {TransactionOutput} output\n    * @returns {TransactionUnspentOutput}\n    */\n    static new(input, output) {\n        _assertClass(input, TransactionInput);\n        _assertClass(output, TransactionOutput);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_new(input.ptr, output.ptr);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInput}\n    */\n    input() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_input(this.ptr);\n        return TransactionInput.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionOutput}\n    */\n    output() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutput_output(this.ptr);\n        return TransactionOutput.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionUnspentOutputs {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionUnspentOutputs.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionunspentoutputs_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionUnspentOutputs}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionUnspentOutputs.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionUnspentOutputs}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_new();\n        return TransactionUnspentOutputs.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionUnspentOutput}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_get(this.ptr, index);\n        return TransactionUnspentOutput.__wrap(ret);\n    }\n    /**\n    * @param {TransactionUnspentOutput} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionUnspentOutput);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionunspentoutputs_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TransactionWitnessSet {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSet.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionwitnessset_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSet}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionWitnessSet}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionWitnessSet}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSet.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Vkeywitnesses} vkeys\n    */\n    set_vkeys(vkeys) {\n        _assertClass(vkeys, Vkeywitnesses);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_vkeys(this.ptr, vkeys.ptr);\n    }\n    /**\n    * @returns {Vkeywitnesses | undefined}\n    */\n    vkeys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_vkeys(this.ptr);\n        return ret === 0 ? undefined : Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @param {NativeScripts} native_scripts\n    */\n    set_native_scripts(native_scripts) {\n        _assertClass(native_scripts, NativeScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_native_scripts(this.ptr, native_scripts.ptr);\n    }\n    /**\n    * @returns {NativeScripts | undefined}\n    */\n    native_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_native_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * @param {BootstrapWitnesses} bootstraps\n    */\n    set_bootstraps(bootstraps) {\n        _assertClass(bootstraps, BootstrapWitnesses);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_bootstraps(this.ptr, bootstraps.ptr);\n    }\n    /**\n    * @returns {BootstrapWitnesses | undefined}\n    */\n    bootstraps() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_bootstraps(this.ptr);\n        return ret === 0 ? undefined : BootstrapWitnesses.__wrap(ret);\n    }\n    /**\n    * @param {PlutusScripts} plutus_scripts\n    */\n    set_plutus_scripts(plutus_scripts) {\n        _assertClass(plutus_scripts, PlutusScripts);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_plutus_scripts(this.ptr, plutus_scripts.ptr);\n    }\n    /**\n    * @returns {PlutusScripts | undefined}\n    */\n    plutus_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_plutus_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusScripts.__wrap(ret);\n    }\n    /**\n    * @param {PlutusList} plutus_data\n    */\n    set_plutus_data(plutus_data) {\n        _assertClass(plutus_data, PlutusList);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_plutus_data(this.ptr, plutus_data.ptr);\n    }\n    /**\n    * @returns {PlutusList | undefined}\n    */\n    plutus_data() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_plutus_data(this.ptr);\n        return ret === 0 ? undefined : PlutusList.__wrap(ret);\n    }\n    /**\n    * @param {Redeemers} redeemers\n    */\n    set_redeemers(redeemers) {\n        _assertClass(redeemers, Redeemers);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_set_redeemers(this.ptr, redeemers.ptr);\n    }\n    /**\n    * @returns {Redeemers | undefined}\n    */\n    redeemers() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_redeemers(this.ptr);\n        return ret === 0 ? undefined : Redeemers.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionWitnessSet}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnessset_new();\n        return TransactionWitnessSet.__wrap(ret);\n    }\n}\n/**\n*/\nclass TransactionWitnessSets {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TransactionWitnessSets.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_transactionwitnesssets_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {TransactionWitnessSets}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {TransactionWitnessSets}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {TransactionWitnessSets}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return TransactionWitnessSets.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionWitnessSets}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_new();\n        return TransactionWitnessSets.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {TransactionWitnessSet}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_get(this.ptr, index);\n        return TransactionWitnessSet.__wrap(ret);\n    }\n    /**\n    * @param {TransactionWitnessSet} elem\n    */\n    add(elem) {\n        _assertClass(elem, TransactionWitnessSet);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.transactionwitnesssets_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass TxBuilderConstants {\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_txbuilderconstants_free(ptr);\n    }\n    /**\n    * @returns {Costmdls}\n    */\n    static plutus_default_cost_models() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txbuilderconstants_plutus_default_cost_models();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {Costmdls}\n    */\n    static plutus_alonzo_cost_models() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txbuilderconstants_plutus_alonzo_cost_models();\n        return Costmdls.__wrap(ret);\n    }\n    /**\n    * @returns {Costmdls}\n    */\n    static plutus_vasil_cost_models() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txbuilderconstants_plutus_vasil_cost_models();\n        return Costmdls.__wrap(ret);\n    }\n}\n/**\n*/\nclass TxInputsBuilder {\n\n    static __wrap(ptr) {\n        const obj = Object.create(TxInputsBuilder.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_txinputsbuilder_free(ptr);\n    }\n    /**\n    * @returns {TxInputsBuilder}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_new();\n        return TxInputsBuilder.__wrap(ret);\n    }\n    /**\n    * We have to know what kind of inputs these are to know what kind of mock witnesses to create since\n    * 1) mock witnesses have different lengths depending on the type which changes the expecting fee\n    * 2) Witnesses are a set so we need to get rid of duplicates to avoid over-estimating the fee\n    * @param {Ed25519KeyHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_key_input(hash, input, amount) {\n        _assertClass(hash, Ed25519KeyHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_key_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This function can make a mistake in choosing right input index. Use `.add_native_script_input` or `.add_plutus_script_input` instead.\n    * This method adds the input to the builder BUT leaves a missing spot for the witness native script\n    *\n    * After adding the input with this method, use `.add_required_native_input_scripts`\n    * and `.add_required_plutus_input_scripts` to add the witness scripts\n    *\n    * Or instead use `.add_native_script_input` and `.add_plutus_script_input`\n    * to add inputs right along with the script, instead of the script hash\n    * @param {ScriptHash} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_script_input(hash, input, amount) {\n        _assertClass(hash, ScriptHash);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_script_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * This method will add the input to the builder and also register the required native script witness\n    * @param {NativeScript} script\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_native_script_input(script, input, amount) {\n        _assertClass(script, NativeScript);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_native_script_input(this.ptr, script.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * This method will add the input to the builder and also register the required plutus witness\n    * @param {PlutusWitness} witness\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_plutus_script_input(witness, input, amount) {\n        _assertClass(witness, PlutusWitness);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_plutus_script_input(this.ptr, witness.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * @param {ByronAddress} hash\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_bootstrap_input(hash, input, amount) {\n        _assertClass(hash, ByronAddress);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_bootstrap_input(this.ptr, hash.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * Note that for script inputs this method will use underlying generic `.add_script_input`\n    * which leaves a required empty spot for the script witness (or witnesses in case of Plutus).\n    * You can use `.add_native_script_input` or `.add_plutus_script_input` directly to register the input along with the witness.\n    * @param {Address} address\n    * @param {TransactionInput} input\n    * @param {Value} amount\n    */\n    add_input(address, input, amount) {\n        _assertClass(address, Address);\n        _assertClass(input, TransactionInput);\n        _assertClass(amount, Value);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_input(this.ptr, address.ptr, input.ptr, amount.ptr);\n    }\n    /**\n    * Returns the number of still missing input scripts (either native or plutus)\n    * Use `.add_required_native_input_scripts` or `.add_required_plutus_input_scripts` to add the missing scripts\n    * @returns {number}\n    */\n    count_missing_input_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_count_missing_input_scripts(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs\n    * Any scripts that don't match any of the previously added inputs will be ignored\n    * Returns the number of remaining required missing witness scripts\n    * Use `.count_missing_input_scripts` to find the number of still missing scripts\n    * @param {NativeScripts} scripts\n    * @returns {number}\n    */\n    add_required_native_input_scripts(scripts) {\n        _assertClass(scripts, NativeScripts);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_required_native_input_scripts(this.ptr, scripts.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * !!! DEPRECATED !!!\n    * This function can make a mistake in choosing right input index. Use `.add_required_script_input_witnesses` instead.\n    * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs\n    * Any scripts that don't match any of the previously added inputs will be ignored\n    * Returns the number of remaining required missing witness scripts\n    * Use `.count_missing_input_scripts` to find the number of still missing scripts\n    * @param {PlutusWitnesses} scripts\n    * @returns {number}\n    */\n    add_required_plutus_input_scripts(scripts) {\n        _assertClass(scripts, PlutusWitnesses);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_required_plutus_input_scripts(this.ptr, scripts.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * Try adding the specified scripts as witnesses for ALREADY ADDED script inputs\n    * Any scripts that don't match any of the previously added inputs will be ignored\n    * Returns the number of remaining required missing witness scripts\n    * Use `.count_missing_input_scripts` to find the number of still missing scripts\n    * @param {InputsWithScriptWitness} inputs_with_wit\n    * @returns {number}\n    */\n    add_required_script_input_witnesses(inputs_with_wit) {\n        _assertClass(inputs_with_wit, InputsWithScriptWitness);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_required_script_input_witnesses(this.ptr, inputs_with_wit.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    get_ref_inputs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_get_ref_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the current script input witness scripts in the builder\n    * @returns {NativeScripts | undefined}\n    */\n    get_native_input_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_get_native_input_scripts(this.ptr);\n        return ret === 0 ? undefined : NativeScripts.__wrap(ret);\n    }\n    /**\n    * Returns a copy of the current plutus input witness scripts in the builder.\n    * NOTE: each plutus witness will be cloned with a specific corresponding input index\n    * @returns {PlutusWitnesses | undefined}\n    */\n    get_plutus_input_scripts() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_get_plutus_input_scripts(this.ptr);\n        return ret === 0 ? undefined : PlutusWitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {Ed25519KeyHash} key\n    */\n    add_required_signer(key) {\n        _assertClass(key, Ed25519KeyHash);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_required_signer(this.ptr, key.ptr);\n    }\n    /**\n    * @param {Ed25519KeyHashes} keys\n    */\n    add_required_signers(keys) {\n        _assertClass(keys, Ed25519KeyHashes);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_add_required_signers(this.ptr, keys.ptr);\n    }\n    /**\n    * @returns {Value}\n    */\n    total_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_total_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {TransactionInputs}\n    */\n    inputs() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_inputs(this.ptr);\n        return TransactionInputs.__wrap(ret);\n    }\n    /**\n    * @returns {TransactionInputs | undefined}\n    */\n    inputs_option() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.txinputsbuilder_inputs_option(this.ptr);\n        return ret === 0 ? undefined : TransactionInputs.__wrap(ret);\n    }\n}\n/**\n*/\nclass URL {\n\n    static __wrap(ptr) {\n        const obj = Object.create(URL.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_url_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {URL}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return URL.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {URL}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return URL.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {URL}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return URL.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} url\n    * @returns {URL}\n    */\n    static new(url) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(url, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_new(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return URL.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    url() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.url_url(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n}\n/**\n*/\nclass UnitInterval {\n\n    static __wrap(ptr) {\n        const obj = Object.create(UnitInterval.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_unitinterval_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {UnitInterval}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {UnitInterval}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {UnitInterval}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return UnitInterval.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {BigNum}\n    */\n    numerator() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_numerator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {BigNum}\n    */\n    denominator() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_denominator(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} numerator\n    * @param {BigNum} denominator\n    * @returns {UnitInterval}\n    */\n    static new(numerator, denominator) {\n        _assertClass(numerator, BigNum);\n        _assertClass(denominator, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.unitinterval_new(numerator.ptr, denominator.ptr);\n        return UnitInterval.__wrap(ret);\n    }\n}\n/**\n*/\nclass Update {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Update.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_update_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Update}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Update}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Update}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Update.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {ProposedProtocolParameterUpdates}\n    */\n    proposed_protocol_parameter_updates() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_proposed_protocol_parameter_updates(this.ptr);\n        return ProposedProtocolParameterUpdates.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    epoch() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_epoch(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {ProposedProtocolParameterUpdates} proposed_protocol_parameter_updates\n    * @param {number} epoch\n    * @returns {Update}\n    */\n    static new(proposed_protocol_parameter_updates, epoch) {\n        _assertClass(proposed_protocol_parameter_updates, ProposedProtocolParameterUpdates);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.update_new(proposed_protocol_parameter_updates.ptr, epoch);\n        return Update.__wrap(ret);\n    }\n}\n/**\n*/\nclass VRFCert {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFCert.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vrfcert_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFCert}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {VRFCert}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {VRFCert}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    output() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_output(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    proof() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_proof(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} output\n    * @param {Uint8Array} proof\n    * @returns {VRFCert}\n    */\n    static new(output, proof) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(output, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passArray8ToWasm0(proof, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len1 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfcert_new(retptr, ptr0, len0, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFCert.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass VRFKeyHash {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFKeyHash.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vrfkeyhash_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFKeyHash}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFKeyHash}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {VRFKeyHash}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfkeyhash_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFKeyHash.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass VRFVKey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(VRFVKey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vrfvkey_free(ptr);\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {VRFVKey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFVKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} prefix\n    * @returns {string}\n    */\n    to_bech32(prefix) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(prefix, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_to_bech32(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr1 = r0;\n            var len1 = r1;\n            if (r3) {\n                ptr1 = 0; len1 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr1, len1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr1, len1);\n        }\n    }\n    /**\n    * @param {string} bech_str\n    * @returns {VRFVKey}\n    */\n    static from_bech32(bech_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(bech_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_from_bech32(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFVKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex\n    * @returns {VRFVKey}\n    */\n    static from_hex(hex) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vrfvkey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return VRFVKey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass Value {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Value.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_value_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Value}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Value}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Value}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {BigNum} coin\n    * @returns {Value}\n    */\n    static new(coin) {\n        _assertClass(coin, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_new(coin.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    * @returns {Value}\n    */\n    static new_from_assets(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_new_from_assets(multiasset.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    * @param {MultiAsset} multiasset\n    * @returns {Value}\n    */\n    static new_with_assets(coin, multiasset) {\n        _assertClass(coin, BigNum);\n        _assertClass(multiasset, MultiAsset);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_new_with_assets(coin.ptr, multiasset.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {Value}\n    */\n    static zero() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_zero();\n        return Value.__wrap(ret);\n    }\n    /**\n    * @returns {boolean}\n    */\n    is_zero() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_is_zero(this.ptr);\n        return ret !== 0;\n    }\n    /**\n    * @returns {BigNum}\n    */\n    coin() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_coin(this.ptr);\n        return BigNum.__wrap(ret);\n    }\n    /**\n    * @param {BigNum} coin\n    */\n    set_coin(coin) {\n        _assertClass(coin, BigNum);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_set_coin(this.ptr, coin.ptr);\n    }\n    /**\n    * @returns {MultiAsset | undefined}\n    */\n    multiasset() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_multiasset(this.ptr);\n        return ret === 0 ? undefined : MultiAsset.__wrap(ret);\n    }\n    /**\n    * @param {MultiAsset} multiasset\n    */\n    set_multiasset(multiasset) {\n        _assertClass(multiasset, MultiAsset);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_set_multiasset(this.ptr, multiasset.ptr);\n    }\n    /**\n    * @param {Value} rhs\n    * @returns {Value}\n    */\n    checked_add(rhs) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rhs, Value);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_checked_add(retptr, this.ptr, rhs.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    checked_sub(rhs_value) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _assertClass(rhs_value, Value);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_checked_sub(retptr, this.ptr, rhs_value.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Value.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Value} rhs_value\n    * @returns {Value}\n    */\n    clamped_sub(rhs_value) {\n        _assertClass(rhs_value, Value);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_clamped_sub(this.ptr, rhs_value.ptr);\n        return Value.__wrap(ret);\n    }\n    /**\n    * note: values are only partially comparable\n    * @param {Value} rhs_value\n    * @returns {number | undefined}\n    */\n    compare(rhs_value) {\n        _assertClass(rhs_value, Value);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.value_compare(this.ptr, rhs_value.ptr);\n        return ret === 0xFFFFFF ? undefined : ret;\n    }\n}\n/**\n*/\nclass Vkey {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkey.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkey_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkey}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Vkey}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Vkey}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkey.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {PublicKey} pk\n    * @returns {Vkey}\n    */\n    static new(pk) {\n        _assertClass(pk, PublicKey);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_new(pk.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {PublicKey}\n    */\n    public_key() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkey_public_key(this.ptr);\n        return PublicKey.__wrap(ret);\n    }\n}\n/**\n*/\nclass Vkeys {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeys.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkeys_free(ptr);\n    }\n    /**\n    * @returns {Vkeys}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_new();\n        return Vkeys.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkey}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_get(this.ptr, index);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @param {Vkey} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkey);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeys_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Vkeywitness {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitness.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkeywitness_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkeywitness}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Vkeywitness}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Vkeywitness}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitness.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Vkey} vkey\n    * @param {Ed25519Signature} signature\n    * @returns {Vkeywitness}\n    */\n    static new(vkey, signature) {\n        _assertClass(vkey, Vkey);\n        _assertClass(signature, Ed25519Signature);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_new(vkey.ptr, signature.ptr);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @returns {Vkey}\n    */\n    vkey() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_vkey(this.ptr);\n        return Vkey.__wrap(ret);\n    }\n    /**\n    * @returns {Ed25519Signature}\n    */\n    signature() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitness_signature(this.ptr);\n        return Ed25519Signature.__wrap(ret);\n    }\n}\n/**\n*/\nclass Vkeywitnesses {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Vkeywitnesses.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_vkeywitnesses_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Vkeywitnesses}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitnesses.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Vkeywitnesses}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitnesses.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Vkeywitnesses}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Vkeywitnesses.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Vkeywitnesses}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_new();\n        return Vkeywitnesses.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} index\n    * @returns {Vkeywitness}\n    */\n    get(index) {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_get(this.ptr, index);\n        return Vkeywitness.__wrap(ret);\n    }\n    /**\n    * @param {Vkeywitness} elem\n    */\n    add(elem) {\n        _assertClass(elem, Vkeywitness);\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.vkeywitnesses_add(this.ptr, elem.ptr);\n    }\n}\n/**\n*/\nclass Withdrawals {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Withdrawals.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbg_withdrawals_free(ptr);\n    }\n    /**\n    * @returns {Uint8Array}\n    */\n    to_bytes() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_to_bytes(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var v0 = getArrayU8FromWasm0(r0, r1).slice();\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {Uint8Array} bytes\n    * @returns {Withdrawals}\n    */\n    static from_bytes(bytes) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passArray8ToWasm0(bytes, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_from_bytes(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_hex() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_to_hex(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} hex_str\n    * @returns {Withdrawals}\n    */\n    static from_hex(hex_str) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hex_str, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_from_hex(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {string}\n    */\n    to_json() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_to_json(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            var r3 = getInt32Memory0()[retptr / 4 + 3];\n            var ptr0 = r0;\n            var len0 = r1;\n            if (r3) {\n                ptr0 = 0; len0 = 0;\n                throw takeObject(r2);\n            }\n            return getStringFromWasm0(ptr0, len0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_free(ptr0, len0);\n        }\n    }\n    /**\n    * @returns {any}\n    */\n    to_js_value() {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_to_js_value(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} json\n    * @returns {Withdrawals}\n    */\n    static from_json(json) {\n        try {\n            const retptr = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(json, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_from_json(retptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return Withdrawals.__wrap(r0);\n        } finally {\n            _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Withdrawals}\n    */\n    static new() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_new();\n        return Withdrawals.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    len() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_len(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {RewardAddress} key\n    * @param {BigNum} value\n    * @returns {BigNum | undefined}\n    */\n    insert(key, value) {\n        _assertClass(key, RewardAddress);\n        _assertClass(value, BigNum);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_insert(this.ptr, key.ptr, value.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @param {RewardAddress} key\n    * @returns {BigNum | undefined}\n    */\n    get(key) {\n        _assertClass(key, RewardAddress);\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_get(this.ptr, key.ptr);\n        return ret === 0 ? undefined : BigNum.__wrap(ret);\n    }\n    /**\n    * @returns {RewardAddresses}\n    */\n    keys() {\n        const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.withdrawals_keys(this.ptr);\n        return RewardAddresses.__wrap(ret);\n    }\n}\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_string_new(arg0, arg1) {\n    const ret = getStringFromWasm0(arg0, arg1);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_error_new(arg0, arg1) {\n    const ret = new Error(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_string_get(arg0, arg1) {\n    const obj = getObject(arg1);\n    const ret = typeof(obj) === 'string' ? obj : undefined;\n    var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbindgen_number_new(arg0) {\n    const ret = arg0;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_object_clone_ref(arg0) {\n    const ret = getObject(arg0);\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_object(arg0) {\n    const val = getObject(arg0);\n    const ret = typeof(val) === 'object' && val !== null;\n    return ret;\n};\n\nfunction __wbg_String_91fba7ded13ba54c(arg0, arg1) {\n    const ret = String(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbg_set_20cbc34131e76824(arg0, arg1, arg2) {\n    getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n};\n\nfunction __wbg_crypto_e1d53a1d73fb10b8(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_process_038c26bf42b093f8(arg0) {\n    const ret = getObject(arg0).process;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_versions_ab37218d2f0b24a8(arg0) {\n    const ret = getObject(arg0).versions;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_node_080f4b19d15bc1fe(arg0) {\n    const ret = getObject(arg0).node;\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_string(arg0) {\n    const ret = typeof(getObject(arg0)) === 'string';\n    return ret;\n};\n\nfunction __wbg_require_78a3dcfbdba9cbce() { return handleError(function () {\n    const ret = module.require;\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_msCrypto_6e7d3e1f92610cbb(arg0) {\n    const ret = getObject(arg0).msCrypto;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getRandomValues_805f1c3d65988a5a() { return handleError(function (arg0, arg1) {\n    getObject(arg0).getRandomValues(getObject(arg1));\n}, arguments) };\n\nfunction __wbg_randomFillSync_6894564c2c334c42() { return handleError(function (arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n}, arguments) };\n\nfunction __wbg_new_1d9a920c6bfc44a8() {\n    const ret = new Array();\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_is_function(arg0) {\n    const ret = typeof(getObject(arg0)) === 'function';\n    return ret;\n};\n\nfunction __wbg_newnoargs_b5b063fc6c2f0376(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_268f7b7dd3430798() {\n    const ret = new Map();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_call_97ae9d8645dc388b() { return handleError(function (arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_new_0b9bfdd97583284e() {\n    const ret = new Object();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_self_6d479506f72c6a71() { return handleError(function () {\n    const ret = self.self;\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_window_f2557cc78490aceb() { return handleError(function () {\n    const ret = window.window;\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_globalThis_7f206bda628d5286() { return handleError(function () {\n    const ret = globalThis.globalThis;\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_global_ba75c50d1cf384f4() { return handleError(function () {\n    const ret = __webpack_require__.g.global;\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbindgen_is_undefined(arg0) {\n    const ret = getObject(arg0) === undefined;\n    return ret;\n};\n\nfunction __wbg_set_a68214f35c417fa9(arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n};\n\nfunction __wbg_call_168da88779e35f61() { return handleError(function (arg0, arg1, arg2) {\n    const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n}, arguments) };\n\nfunction __wbg_set_933729cf5b66ac11(arg0, arg1, arg2) {\n    const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_buffer_3f3d764d4747d564(arg0) {\n    const ret = getObject(arg0).buffer;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_8c3f0052272a457a(arg0) {\n    const ret = new Uint8Array(getObject(arg0));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_set_83db9690f9353e79(arg0, arg1, arg2) {\n    getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n};\n\nfunction __wbg_length_9e1ae1900cb0fbd5(arg0) {\n    const ret = getObject(arg0).length;\n    return ret;\n};\n\nfunction __wbg_newwithlength_f5933855e4f48a19(arg0) {\n    const ret = new Uint8Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_subarray_58ad4efbb5bcb886(arg0, arg1, arg2) {\n    const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n    return addHeapObject(ret);\n};\n\nfunction __wbg_new_d87f272aec784ec0(arg0, arg1) {\n    const ret = new Function(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_call_eae29933372a39be(arg0, arg1) {\n    const ret = getObject(arg0).call(getObject(arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbindgen_jsval_eq(arg0, arg1) {\n    const ret = getObject(arg0) === getObject(arg1);\n    return ret;\n};\n\nfunction __wbg_self_e0b3266d2d9eba1a(arg0) {\n    const ret = getObject(arg0).self;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_crypto_e95a6e54c5c2e37f(arg0) {\n    const ret = getObject(arg0).crypto;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_getRandomValues_dc67302a7bd1aec5(arg0) {\n    const ret = getObject(arg0).getRandomValues;\n    return addHeapObject(ret);\n};\n\nfunction __wbg_require_0993fe224bf8e202(arg0, arg1) {\n    const ret = __webpack_require__(\"./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser sync recursive\")(getStringFromWasm0(arg0, arg1));\n    return addHeapObject(ret);\n};\n\nfunction __wbg_randomFillSync_dd2297de5917c74e(arg0, arg1, arg2) {\n    getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n};\n\nfunction __wbg_getRandomValues_02639197c8166a96(arg0, arg1, arg2) {\n    getObject(arg0).getRandomValues(getArrayU8FromWasm0(arg1, arg2));\n};\n\nfunction __wbindgen_debug_string(arg0, arg1) {\n    const ret = debugString(getObject(arg1));\n    const ptr0 = passStringToWasm0(ret, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_malloc, _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\nfunction __wbindgen_memory() {\n    const ret = _cardano_serialization_lib_bg_wasm__WEBPACK_IMPORTED_MODULE_0__.memory;\n    return addHeapObject(ret);\n};\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js\n"));

/***/ }),

/***/ "./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser sync recursive":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/ sync ***!
  \*************************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

function webpackEmptyContext(req) {
	var e = new Error("Cannot find module '" + req + "'");
	e.code = 'MODULE_NOT_FOUND';
	throw e;
}
webpackEmptyContext.keys = function() { return []; };
webpackEmptyContext.resolve = webpackEmptyContext;
webpackEmptyContext.id = "./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser sync recursive";
module.exports = webpackEmptyContext;

/***/ }),

/***/ "./components/Navbar/Navbar.tsx":
/*!**************************************!*\
  !*** ./components/Navbar/Navbar.tsx ***!
  \**************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(module, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/image */ \"./node_modules/next/image.js\");\n/* harmony import */ var next_image__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_image__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/link */ \"./node_modules/next/link.js\");\n/* harmony import */ var next_link__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_link__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! next/router */ \"./node_modules/next/router.js\");\n/* harmony import */ var next_router__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(next_router__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils */ \"./utils/index.ts\");\n/* harmony import */ var _Modal__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../Modal */ \"./components/Modal/index.ts\");\n/* harmony import */ var _contexts_wallet__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../contexts/wallet */ \"./contexts/wallet.tsx\");\n/* harmony import */ var _meshsdk_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @meshsdk/react */ \"./node_modules/@meshsdk/react/dist/react.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_contexts_wallet__WEBPACK_IMPORTED_MODULE_7__, _meshsdk_react__WEBPACK_IMPORTED_MODULE_8__]);\n([_contexts_wallet__WEBPACK_IMPORTED_MODULE_7__, _meshsdk_react__WEBPACK_IMPORTED_MODULE_8__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\nvar _s = $RefreshSig$();\n\n\n\n\n\n\n\n\nconst NavLinks = [\n    {\n        title: \"Scholarship Pools\",\n        link: \"/\"\n    },\n    {\n        title: \"\",\n        link: \"/progress\"\n    },\n    {\n        title: \"Donors' Portal\",\n        link: \"/Donors\"\n    }\n];\nconst Navbar = ()=>{\n    _s();\n    const [open, setOpen] = react__WEBPACK_IMPORTED_MODULE_4___default().useState(false);\n    const [loading, setLoading] = react__WEBPACK_IMPORTED_MODULE_4___default().useState(false);\n    const { connecting , walletNameConnected , connectWallet , walletConnected , connectedAddress , currentNetwork  } = (0,_contexts_wallet__WEBPACK_IMPORTED_MODULE_7__[\"default\"])();\n    const [wallet, setWallet] = react__WEBPACK_IMPORTED_MODULE_4___default().useState(false);\n    const handleConnectWallet = async ()=>{\n        setLoading(true);\n        await (0,_utils__WEBPACK_IMPORTED_MODULE_5__.sleep)(2000).then(()=>{\n            setLoading(false);\n            setWallet(true);\n            setOpen(true);\n        });\n    };\n    const router = (0,next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter)();\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"nav\", {\n                className: \"bg-primary h-fit py-2 w-full\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"container flex items-center justify-between w-full h-full\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {\n                            href: \"https://directed.dev/\",\n                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                className: \"flex items-center space-x-3 cursor-pointer\",\n                                children: [\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_image__WEBPACK_IMPORTED_MODULE_1___default()), {\n                                        id: \"logo\",\n                                        src: \"/static/images/logo.png\",\n                                        width: 50,\n                                        height: 50,\n                                        alt: \"Direct Ed Logo\"\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                        lineNumber: 50,\n                                        columnNumber: 15\n                                    }, undefined),\n                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h1\", {\n                                                className: \"text-white text-l font-semibold\",\n                                                id: \"title\",\n                                                children: \"DirectEd Development\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                lineNumber: 58,\n                                                columnNumber: 17\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                className: \"text-white\",\n                                                id: \"subtitle\",\n                                                children: \"Realising Potential\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                lineNumber: 61,\n                                                columnNumber: 17\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                        lineNumber: 57,\n                                        columnNumber: 15\n                                    }, undefined)\n                                ]\n                            }, void 0, true, {\n                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                lineNumber: 49,\n                                columnNumber: 13\n                            }, undefined)\n                        }, void 0, false, {\n                            fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                            lineNumber: 48,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                            className: \"hidden md:flex items-center space-x-5\",\n                            children: [\n                                NavLinks.map((link, index)=>/*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {\n                                        href: link.link,\n                                        passHref: true,\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                            className: \"text-xl text-white \".concat(router.pathname === link.link ? \"font-semibold\" : \"font-light\"),\n                                            children: link.title\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                            lineNumber: 72,\n                                            columnNumber: 19\n                                        }, undefined)\n                                    }, void 0, false, {\n                                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                        lineNumber: 70,\n                                        columnNumber: 15\n                                    }, undefined)),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"dropdown dropdown-hover\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                                            tabIndex: 0,\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {\n                                                href: \"/transactions\",\n                                                style: {\n                                                    pointerEvents: \"none\"\n                                                },\n                                                passHref: true,\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                                    className: \"text-xl text-white \".concat(router.pathname === \"/transactions\" ? \"font-semibold\" : \"font-light\")\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                    lineNumber: 88,\n                                                    columnNumber: 21\n                                                }, undefined)\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                lineNumber: 86,\n                                                columnNumber: 17\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                            lineNumber: 85,\n                                            columnNumber: 15\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            tabIndex: 0,\n                                            className: \"dropdown-content card card-compact w-60 p-2 shadow bg-white mt-1\",\n                                            children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                className: \"card-body\",\n                                                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                    className: \"text-lg font-semibold\",\n                                                    children: \"The transaction page will be available after a donation has been made\"\n                                                }, void 0, false, {\n                                                    fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                    lineNumber: 105,\n                                                    columnNumber: 19\n                                                }, undefined)\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                lineNumber: 104,\n                                                columnNumber: 17\n                                            }, undefined)\n                                        }, void 0, false, {\n                                            fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                            lineNumber: 100,\n                                            columnNumber: 15\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                    lineNumber: 84,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                            lineNumber: 68,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"dropdown dropdown-hover\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_meshsdk_react__WEBPACK_IMPORTED_MODULE_8__.CardanoWallet, {}, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                    lineNumber: 115,\n                                    columnNumber: 11\n                                }, undefined),\n                                !walletConnected && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    tabIndex: 0,\n                                    className: \"hidden md:block dropdown-content card card-compact w-52 p-2 shadow bg-white mt-1\",\n                                    children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"card-body\",\n                                        children: [\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                                className: \"text-lg font-semibold\",\n                                                children: \"Start by connecting your wallet\"\n                                            }, void 0, false, {\n                                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                lineNumber: 123,\n                                                columnNumber: 19\n                                            }, undefined),\n                                            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                children: [\n                                                    \"Need help? Follow this\",\n                                                    \" \",\n                                                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)((next_link__WEBPACK_IMPORTED_MODULE_2___default()), {\n                                                        href: \"#\"\n                                                    }, void 0, false, {\n                                                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                        lineNumber: 128,\n                                                        columnNumber: 21\n                                                    }, undefined)\n                                                ]\n                                            }, void 0, true, {\n                                                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                                lineNumber: 126,\n                                                columnNumber: 19\n                                            }, undefined)\n                                        ]\n                                    }, void 0, true, {\n                                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                        lineNumber: 122,\n                                        columnNumber: 17\n                                    }, undefined)\n                                }, void 0, false, {\n                                    fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                                    lineNumber: 118,\n                                    columnNumber: 15\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                            lineNumber: 114,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                    lineNumber: 47,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                lineNumber: 46,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_Modal__WEBPACK_IMPORTED_MODULE_6__[\"default\"], {\n                open: open,\n                onClose: ()=>setOpen(false),\n                className: \"w-fit space-y-8\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                        className: \"font-semibold text-2xl text-center w-64 capitalize\",\n                        children: \"you have successfully connected a wallet!\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                        lineNumber: 144,\n                        columnNumber: 9\n                    }, undefined),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        onClick: ()=>setOpen(false),\n                        className: \"btn btn-primary btn-block\",\n                        children: \"Close\"\n                    }, void 0, false, {\n                        fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                        lineNumber: 147,\n                        columnNumber: 9\n                    }, undefined)\n                ]\n            }, void 0, true, {\n                fileName: \"C:\\\\Users\\\\user\\\\Desktop\\\\work\\\\Directed-dapp\\\\components\\\\Navbar\\\\Navbar.tsx\",\n                lineNumber: 139,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_s(Navbar, \"sexTVE5snJ56Rf5hbZ8SBgA6+VY=\", false, function() {\n    return [\n        _contexts_wallet__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n        next_router__WEBPACK_IMPORTED_MODULE_3__.useRouter\n    ];\n});\n_c = Navbar;\n/* harmony default export */ __webpack_exports__[\"default\"] = (Navbar);\nvar _c;\n$RefreshReg$(_c, \"Navbar\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./components/Navbar/Navbar.tsx\n"));

/***/ }),

/***/ "./node_modules/@meshsdk/core/dist/core.js":
/*!*************************************************!*\
  !*** ./node_modules/@meshsdk/core/dist/core.js ***!
  \*************************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(__webpack_module__, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"AppWallet\": function() { return /* binding */ fr; },\n/* harmony export */   \"BlockfrostProvider\": function() { return /* binding */ Ir; },\n/* harmony export */   \"BrowserWallet\": function() { return /* binding */ Nt; },\n/* harmony export */   \"EmbeddedWallet\": function() { return /* binding */ y; },\n/* harmony export */   \"ForgeScript\": function() { return /* binding */ lr; },\n/* harmony export */   \"InfuraProvider\": function() { return /* binding */ hr; },\n/* harmony export */   \"KoiosProvider\": function() { return /* binding */ ur; },\n/* harmony export */   \"MinaWallet\": function() { return /* binding */ _r; },\n/* harmony export */   \"TangoProvider\": function() { return /* binding */ dr; },\n/* harmony export */   \"Transaction\": function() { return /* binding */ R; },\n/* harmony export */   \"checkSignature\": function() { return /* binding */ Xs; },\n/* harmony export */   \"generateNonce\": function() { return /* binding */ cr; },\n/* harmony export */   \"largestFirst\": function() { return /* binding */ Ze; },\n/* harmony export */   \"largestFirstMultiAsset\": function() { return /* binding */ ts; },\n/* harmony export */   \"resolveDataHash\": function() { return /* binding */ Zs; },\n/* harmony export */   \"resolveEpochNo\": function() { return /* binding */ tr; },\n/* harmony export */   \"resolveFingerprint\": function() { return /* binding */ Ys; },\n/* harmony export */   \"resolveLanguageView\": function() { return /* binding */ er; },\n/* harmony export */   \"resolveNativeScriptHash\": function() { return /* binding */ sr; },\n/* harmony export */   \"resolvePaymentKeyHash\": function() { return /* binding */ et; },\n/* harmony export */   \"resolvePlutusScriptAddress\": function() { return /* binding */ rr; },\n/* harmony export */   \"resolvePlutusScriptHash\": function() { return /* binding */ ir; },\n/* harmony export */   \"resolvePoolId\": function() { return /* binding */ ar; },\n/* harmony export */   \"resolvePrivateKey\": function() { return /* binding */ nr; },\n/* harmony export */   \"resolveRewardAddress\": function() { return /* binding */ Ot; },\n/* harmony export */   \"resolveScriptRef\": function() { return /* binding */ or; },\n/* harmony export */   \"resolveSlotNo\": function() { return /* binding */ Ar; },\n/* harmony export */   \"resolveStakeKeyHash\": function() { return /* binding */ It; },\n/* harmony export */   \"resolveTxFees\": function() { return /* binding */ Ye; },\n/* harmony export */   \"resolveTxHash\": function() { return /* binding */ Gs; }\n/* harmony export */ });\n/* harmony import */ var nanoid__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! nanoid */ \"./node_modules/nanoid/index.browser.js\");\n/* harmony import */ var _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @emurgo/cardano-serialization-lib-nodejs */ \"./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib.js\");\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"./node_modules/axios/index.js\");\n/* harmony import */ var bip39__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! bip39 */ \"./node_modules/bip39/src/index.js\");\n/* harmony import */ var _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emurgo/cardano-message-signing-nodejs */ \"./node_modules/@emurgo/cardano-message-signing-browser/cardano_message_signing.js\");\n/* provided dependency */ var Buffer = __webpack_require__(/*! buffer */ \"./node_modules/next/dist/compiled/buffer/index.js\")[\"Buffer\"];\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__, _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__]);\n([_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__, _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n\nconst me = {\n  mem: 7e6,\n  steps: 3e9\n}, Y = {\n  epoch: 0,\n  coinsPerUTxOSize: \"4310\",\n  priceMem: 0.0577,\n  priceStep: 721e-7,\n  minFeeA: 44,\n  minFeeB: 155381,\n  keyDeposit: \"2000000\",\n  maxTxSize: 16384,\n  maxValSize: \"5000\",\n  poolDeposit: \"500000000\",\n  maxCollateralInputs: 3,\n  decentralisation: 0,\n  maxBlockSize: 98304,\n  collateralPercent: 150,\n  maxBlockHeaderSize: 1100,\n  minPoolCost: \"340000000\",\n  maxTxExMem: \"16000000\",\n  maxTxExSteps: \"10000000000\",\n  maxBlockExMem: \"80000000\",\n  maxBlockExSteps: \"40000000000\"\n}, bt = 2147483648, mt = {\n  V1: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Language.new_plutus_v1(),\n  V2: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Language.new_plutus_v2()\n}, N = 56, je = {\n  CERT: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.RedeemerTag.new_cert(),\n  MINT: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.RedeemerTag.new_mint(),\n  REWARD: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.RedeemerTag.new_reward(),\n  SPEND: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.RedeemerTag.new_spend()\n}, Et = {\n  testnet: [\"74\", \"1598400\", \"1595967616\", \"432000\"],\n  preview: [\"0\", \"0\", \"1660003200\", \"86400\"],\n  preprod: [\"0\", \"0\", \"1654041600\", \"432000\"],\n  mainnet: [\"208\", \"4492800\", \"1596059091\", \"432000\"]\n}, zt = {\n  ALONZO: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TxBuilderConstants.plutus_alonzo_cost_models(),\n  BABBAGE: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TxBuilderConstants.plutus_vasil_cost_models()\n}, Xe = {\n  ALONZO: {\n    V1: \"a141005901d59f1a000302590001011a00060bc719026d00011a000249f01903e800011a000249f018201a0025cea81971f70419744d186419744d186419744d186419744d186419744d186419744d18641864186419744d18641a000249f018201a000249f018201a000249f018201a000249f01903e800011a000249f018201a000249f01903e800081a000242201a00067e2318760001011a000249f01903e800081a000249f01a0001b79818f7011a000249f0192710011a0002155e19052e011903e81a000249f01903e8011a000249f018201a000249f018201a000249f0182001011a000249f0011a000249f0041a000194af18f8011a000194af18f8011a0002377c190556011a0002bdea1901f1011a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000242201a00067e23187600010119f04c192bd200011a000249f018201a000242201a00067e2318760001011a000242201a00067e2318760001011a0025cea81971f704001a000141bb041a000249f019138800011a000249f018201a000302590001011a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a000249f018201a00330da70101ff\"\n  },\n  BABBAGE: {\n    V1: \"a141005901b69f1a0003236119032c01011903e819023b00011903e8195e7104011903e818201a0001ca761928eb041959d818641959d818641959d818641959d818641959d818641959d81864186418641959d81864194c5118201a0002acfa182019b551041a000363151901ff00011a00015c3518201a000797751936f404021a0002ff941a0006ea7818dc0001011903e8196ff604021a0003bd081a00034ec5183e011a00102e0f19312a011a00032e801901a5011a0002da781903e819cf06011a00013a34182019a8f118201903e818201a00013aac0119e143041903e80a1a00030219189c011a00030219189c011a0003207c1901d9011a000330001901ff0119ccf3182019fd40182019ffd5182019581e18201940b318201a00012adf18201a0002ff941a0006ea7818dc0001011a00010f92192da7000119eabb18201a0002ff941a0006ea7818dc0001011a0002ff941a0006ea7818dc0001011a000c504e197712041a001d6af61a0001425b041a00040c660004001a00014fab18201a0003236119032c010119a0de18201a00033d7618201979f41820197fb8182019a95d1820197df718201995aa18201a009063b91903fd0aff\",\n    V2: \"a20198af1a0003236119032c01011903e819023b00011903e8195e7104011903e818201a0001ca761928eb041959d818641959d818641959d818641959d818641959d818641959d81864186418641959d81864194c5118201a0002acfa182019b551041a000363151901ff00011a00015c3518201a000797751936f404021a0002ff941a0006ea7818dc0001011903e8196ff604021a0003bd081a00034ec5183e011a00102e0f19312a011a00032e801901a5011a0002da781903e819cf06011a00013a34182019a8f118201903e818201a00013aac0119e143041903e80a1a00030219189c011a00030219189c011a0003207c1901d9011a000330001901ff0119ccf3182019fd40182019ffd5182019581e18201940b318201a00012adf18201a0002ff941a0006ea7818dc0001011a00010f92192da7000119eabb18201a0002ff941a0006ea7818dc0001011a0002ff941a0006ea7818dc0001011a0011b22c1a0005fdde00021a000c504e197712041a001d6af61a0001425b041a00040c660004001a00014fab18201a0003236119032c010119a0de18201a00033d7618201979f41820197fb8182019a95d1820197df718201995aa18201b00000004a817c8001b00000004a817c8001a009063b91903fd0a1b00000004a817c800001b00000004a817c80041005901b69f1a0003236119032c01011903e819023b00011903e8195e7104011903e818201a0001ca761928eb041959d818641959d818641959d818641959d818641959d818641959d81864186418641959d81864194c5118201a0002acfa182019b551041a000363151901ff00011a00015c3518201a000797751936f404021a0002ff941a0006ea7818dc0001011903e8196ff604021a0003bd081a00034ec5183e011a00102e0f19312a011a00032e801901a5011a0002da781903e819cf06011a00013a34182019a8f118201903e818201a00013aac0119e143041903e80a1a00030219189c011a00030219189c011a0003207c1901d9011a000330001901ff0119ccf3182019fd40182019ffd5182019581e18201940b318201a00012adf18201a0002ff941a0006ea7818dc0001011a00010f92192da7000119eabb18201a0002ff941a0006ea7818dc0001011a0002ff941a0006ea7818dc0001011a000c504e197712041a001d6af61a0001425b041a00040c660004001a00014fab18201a0003236119032c010119a0de18201a00033d7618201979f41820197fb8182019a95d1820197df718201995aa18201a009063b91903fd0aff\"\n  }\n}, Ht = {\n  [_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NetworkInfo.testnet().network_id()]: \"8d18d786e92776c824607fd8e193ec535c79dc61ea2405ddf3b09fe3\",\n  [_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NetworkInfo.mainnet().network_id()]: \"f0ff48bbb7bbe9d59a40f1ce90e9e9d0ff5002ec48f232b49ca0fb9a\"\n}, Jt = [\n  \"begin\",\n  \"eternl\",\n  \"flint\",\n  \"nami\",\n  \"nufi\",\n  \"gerowallet\",\n  \"typhoncip30\"\n], Ze = (s, e, t = !1, { maxTxSize: r, minFeeA: i, minFeeB: n } = Y) => {\n  const o = e.filter((h) => Be(h) === !1).sort(Ee), A = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(Ye(r, i, n)), c = t ? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s).checked_add(A).to_str() : s;\n  return Bt(o, /* @__PURE__ */ new Map([\n    [\"lovelace\", c]\n  ]));\n}, ts = (s, e, t = !1, r = Y) => {\n  const i = e.filter(Be).sort(Ee), n = s.get(\"lovelace\") ?? \"0\", { maxTxSize: o, minFeeA: A, minFeeB: c } = r, I = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(Ye(o, A, c)), u = t ? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(n).checked_add(I).to_str() : n;\n  return s.set(\"lovelace\", u), Bt(i, s);\n}, es = (s, e) => Array.from(e, (t) => ({ unit: t[0], quantity: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t[1]) })).every((t) => s.filter((r) => r.output.amount.find((i) => i.unit === t.unit) !== void 0).reduce((r, i) => {\n  const n = i.output.amount.reduce((o, A) => o.checked_add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(A.quantity)), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(\"0\"));\n  return r.checked_add(n);\n}, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(\"0\")).less_than(t.quantity) === !1), Ee = (s, e) => {\n  var i, n;\n  const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(((i = s.output.amount.find((o) => o.unit === \"lovelace\")) == null ? void 0 : i.quantity) ?? \"0\");\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(((n = e.output.amount.find((o) => o.unit === \"lovelace\")) == null ? void 0 : n.quantity) ?? \"0\").compare(t);\n}, Be = (s) => s.output.amount.length > 1, Bt = (s, e, t = []) => s.length === 0 || es(t, e) ? t : ss(s[0], e) ? Bt(s.slice(1), e, [...t, s[0]]) : Bt(s.slice(1), e, t), ss = (s, e) => Array.from(e.keys()).some((t) => s.output.amount.find((r) => r.unit === t) !== void 0), rs = (s, e) => {\n  const t = as(e), r = ns(s, e);\n  return {\n    coseKey: K(t.to_bytes()),\n    coseSign1: K(r.to_bytes())\n  };\n}, Xs = (s, e, { key: t, signature: r }) => {\n  var o, A;\n  const i = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.COSEKey.from_bytes(f(t)), n = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.COSESign1.from_bytes(f(r));\n  if ((s == null ? void 0 : s.length) > 0) {\n    const c = K(n.payload() ?? new Uint8Array());\n    if (S(s) !== c)\n      return !1;\n  }\n  if ((e == null ? void 0 : e.length) > 0) {\n    const I = (o = n.headers().protected().deserialized_headers().header(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.new_text(\"address\"))) == null ? void 0 : o.as_bytes();\n    if (I === void 0)\n      throw new Error(\"Couldn't find a signer address in signature\");\n    const u = (A = i.header(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.new_int(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Int.new_negative(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.BigNum.from_str(\"2\"))))) == null ? void 0 : A.as_bytes();\n    if (u === void 0)\n      throw new Error(\"Couldn't find a signer key in signature\");\n    const h = tt(K(I)), g = Us(K(u));\n    if (is(e, h, g) === !1)\n      throw new Error(\"Couldn't check signature because of address mismatch\");\n    const p = Ks(K(n.signature())), x = n.signed_data().to_bytes();\n    return g.verify(x, p);\n  }\n  return !1;\n}, is = (s, e, t) => {\n  if (s !== e.to_bech32())\n    return !1;\n  try {\n    return It(s) === t.hash().to_hex();\n  } catch {\n    return !1;\n  }\n}, as = (s) => {\n  const e = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.COSEKey[\"new\"](_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.from_key_type(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.KeyType.OKP));\n  return e.set_algorithm_id(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.from_algorithm_id(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.AlgorithmId.EdDSA)), e.set_header(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.new_int(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Int.new_negative(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.BigNum.from_str(\"1\"))), _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.CBORValue.new_int(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Int.new_i32(6))), e.set_header(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.new_int(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Int.new_negative(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.BigNum.from_str(\"2\"))), _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.CBORValue.new_bytes(s.key.to_public().as_bytes())), e;\n}, ns = (s, e) => {\n  const t = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.HeaderMap[\"new\"](), r = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.HeaderMap[\"new\"]();\n  t.set_algorithm_id(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.from_algorithm_id(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.AlgorithmId.EdDSA)), t.set_header(_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Label.new_text(\"address\"), _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.CBORValue.new_bytes(e.address.to_bytes()));\n  const i = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.Headers[\"new\"](_emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.ProtectedHeaderMap[\"new\"](t), r), n = _emurgo_cardano_message_signing_nodejs__WEBPACK_IMPORTED_MODULE_3__.COSESign1Builder[\"new\"](i, f(s.payload), !1);\n  s.externalAAD !== void 0 && n.set_external_aad(f(s.externalAAD));\n  const o = n.make_data_to_sign(), A = e.key.sign(o.to_bytes());\n  return n.build(A.to_bytes());\n};\nvar Wt = typeof globalThis < \"u\" ? globalThis : typeof window < \"u\" ? window : typeof global < \"u\" ? global : typeof self < \"u\" ? self : {}, xe = {}, Q = { exports: {} };\nG.notEqual = As;\nG.notOk = cs;\nG.equal = os;\nG.ok = G;\nvar Qe = G;\nfunction os(s, e, t) {\n  G(s == e, t);\n}\nfunction As(s, e, t) {\n  G(s != e, t);\n}\nfunction cs(s, e) {\n  G(!s, e);\n}\nfunction G(s, e) {\n  if (!s)\n    throw new Error(e || \"AssertionError\");\n}\nvar P = { exports: {} };\nfunction Is(s) {\n  throw new Error('Could not dynamically require \"' + s + '\". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');\n}\nvar hs = Pt;\nPt.supported = typeof WebAssembly < \"u\";\nfunction Pt(s) {\n  if (!Pt.supported)\n    return null;\n  var e = s && s.imports, t = us(\"\"), r = null, i = {\n    buffer: t,\n    memory: null,\n    exports: null,\n    realloc: n,\n    onload: o\n  };\n  return o(function() {\n  }), i;\n  function n(c) {\n    i.exports.memory.grow(Math.ceil(Math.abs(c - i.memory.length) / 65536)), i.memory = new Uint8Array(i.exports.memory.buffer);\n  }\n  function o(c) {\n    if (i.exports)\n      return c();\n    if (r) {\n      r.then(c.bind(null, null)).catch(c);\n      return;\n    }\n    try {\n      if (s && s.async)\n        throw new Error(\"async\");\n      A({ instance: new WebAssembly.Instance(new WebAssembly.Module(t), e) });\n    } catch {\n      r = WebAssembly.instantiate(t, e).then(A);\n    }\n    o(c);\n  }\n  function A(c) {\n    i.exports = c.instance.exports, i.memory = i.exports.memory && i.exports.memory.buffer && new Uint8Array(i.exports.memory.buffer);\n  }\n}\nfunction us(s) {\n  return typeof atob == \"function\" ? new Uint8Array(atob(s).split(\"\").map(ds)) : new (Is(\"buffer\")).Buffer(s, \"base64\");\n}\nfunction ds(s) {\n  return s.charCodeAt(0);\n}\nvar k = Qe, C = hs(), V = 64, wt = [];\nP.exports = D;\nvar jt = P.exports.BYTES_MIN = 16, Xt = P.exports.BYTES_MAX = 64;\nP.exports.BYTES = 32;\nvar Zt = P.exports.KEYBYTES_MIN = 16, te = P.exports.KEYBYTES_MAX = 64;\nP.exports.KEYBYTES = 32;\nvar ee = P.exports.SALTBYTES = 16, se = P.exports.PERSONALBYTES = 16;\nfunction D(s, e, t, r, i) {\n  if (!(this instanceof D))\n    return new D(s, e, t, r, i);\n  if (!(C && C.exports))\n    throw new Error(\"WASM not loaded. Wait for Blake2b.ready(cb)\");\n  s || (s = 32), i !== !0 && (k(s >= jt, \"digestLength must be at least \" + jt + \", was given \" + s), k(s <= Xt, \"digestLength must be at most \" + Xt + \", was given \" + s), e != null && k(e.length >= Zt, \"key must be at least \" + Zt + \", was given \" + e.length), e != null && k(e.length <= te, \"key must be at least \" + te + \", was given \" + e.length), t != null && k(t.length === ee, \"salt must be exactly \" + ee + \", was given \" + t.length), r != null && k(r.length === se, \"personal must be exactly \" + se + \", was given \" + r.length)), wt.length || (wt.push(V), V += 216), this.digestLength = s, this.finalized = !1, this.pointer = wt.pop(), C.memory.fill(0, 0, 64), C.memory[0] = this.digestLength, C.memory[1] = e ? e.length : 0, C.memory[2] = 1, C.memory[3] = 1, t && C.memory.set(t, 32), r && C.memory.set(r, 48), this.pointer + 216 > C.memory.length && C.realloc(this.pointer + 216), C.exports.blake2b_init(this.pointer, this.digestLength), e && (this.update(e), C.memory.fill(0, V, V + e.length), C.memory[this.pointer + 200] = 128);\n}\nD.prototype.update = function(s) {\n  return k(this.finalized === !1, \"Hash instance finalized\"), k(s, \"input must be TypedArray or Buffer\"), V + s.length > C.memory.length && C.realloc(V + s.length), C.memory.set(s, V), C.exports.blake2b_update(this.pointer, V, V + s.length), this;\n};\nD.prototype.digest = function(s) {\n  if (k(this.finalized === !1, \"Hash instance finalized\"), this.finalized = !0, wt.push(this.pointer), C.exports.blake2b_final(this.pointer), !s || s === \"binary\")\n    return C.memory.slice(this.pointer + 128, this.pointer + 128 + this.digestLength);\n  if (s === \"hex\")\n    return gs(C.memory, this.pointer + 128, this.digestLength);\n  k(s.length >= this.digestLength, \"input must be TypedArray or Buffer\");\n  for (var e = 0; e < this.digestLength; e++)\n    s[e] = C.memory[this.pointer + 128 + e];\n  return s;\n};\nD.prototype.final = D.prototype.digest;\nD.WASM = C && C.buffer;\nD.SUPPORTED = typeof WebAssembly < \"u\";\nD.ready = function(s) {\n  if (s || (s = ls), !C)\n    return s(new Error(\"WebAssembly not supported\"));\n  var e = new Promise(function(t, r) {\n    C.onload(function(i) {\n      i ? r() : t(), s(i);\n    });\n  });\n  return e;\n};\nD.prototype.ready = D.ready;\nfunction ls() {\n}\nfunction gs(s, e, t) {\n  for (var r = \"\", i = 0; i < t; i++)\n    r += fs(s[e + i]);\n  return r;\n}\nfunction fs(s) {\n  return s < 16 ? \"0\" + s.toString(16) : s.toString(16);\n}\nvar z = Qe, ut = P.exports;\nfunction gt(s, e, t) {\n  var r = s[e] + s[t], i = s[e + 1] + s[t + 1];\n  r >= 4294967296 && i++, s[e] = r, s[e + 1] = i;\n}\nfunction re(s, e, t, r) {\n  var i = s[e] + t;\n  t < 0 && (i += 4294967296);\n  var n = s[e + 1] + r;\n  i >= 4294967296 && n++, s[e] = i, s[e + 1] = n;\n}\nfunction Se(s, e) {\n  return s[e] ^ s[e + 1] << 8 ^ s[e + 2] << 16 ^ s[e + 3] << 24;\n}\nfunction $(s, e, t, r, i, n) {\n  var o = ct[i], A = ct[i + 1], c = ct[n], I = ct[n + 1];\n  gt(d, s, e), re(d, s, o, A);\n  var u = d[r] ^ d[s], h = d[r + 1] ^ d[s + 1];\n  d[r] = h, d[r + 1] = u, gt(d, t, r), u = d[e] ^ d[t], h = d[e + 1] ^ d[t + 1], d[e] = u >>> 24 ^ h << 8, d[e + 1] = h >>> 24 ^ u << 8, gt(d, s, e), re(d, s, c, I), u = d[r] ^ d[s], h = d[r + 1] ^ d[s + 1], d[r] = u >>> 16 ^ h << 16, d[r + 1] = h >>> 16 ^ u << 16, gt(d, t, r), u = d[e] ^ d[t], h = d[e + 1] ^ d[t + 1], d[e] = h >>> 31 ^ u << 1, d[e + 1] = u >>> 31 ^ h << 1;\n}\nvar De = new Uint32Array([\n  4089235720,\n  1779033703,\n  2227873595,\n  3144134277,\n  4271175723,\n  1013904242,\n  1595750129,\n  2773480762,\n  2917565137,\n  1359893119,\n  725511199,\n  2600822924,\n  4215389547,\n  528734635,\n  327033209,\n  1541459225\n]), _s = [\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  14,\n  10,\n  4,\n  8,\n  9,\n  15,\n  13,\n  6,\n  1,\n  12,\n  0,\n  2,\n  11,\n  7,\n  5,\n  3,\n  11,\n  8,\n  12,\n  0,\n  5,\n  2,\n  15,\n  13,\n  10,\n  14,\n  3,\n  6,\n  7,\n  1,\n  9,\n  4,\n  7,\n  9,\n  3,\n  1,\n  13,\n  12,\n  11,\n  14,\n  2,\n  6,\n  5,\n  10,\n  4,\n  0,\n  15,\n  8,\n  9,\n  0,\n  5,\n  7,\n  2,\n  4,\n  10,\n  15,\n  14,\n  1,\n  11,\n  12,\n  6,\n  8,\n  3,\n  13,\n  2,\n  12,\n  6,\n  10,\n  0,\n  11,\n  8,\n  3,\n  4,\n  13,\n  7,\n  5,\n  15,\n  14,\n  1,\n  9,\n  12,\n  5,\n  1,\n  15,\n  14,\n  13,\n  4,\n  10,\n  0,\n  7,\n  6,\n  3,\n  9,\n  2,\n  8,\n  11,\n  13,\n  11,\n  7,\n  14,\n  12,\n  1,\n  3,\n  9,\n  5,\n  0,\n  15,\n  4,\n  8,\n  6,\n  2,\n  10,\n  6,\n  15,\n  14,\n  9,\n  11,\n  3,\n  0,\n  8,\n  12,\n  2,\n  13,\n  7,\n  1,\n  4,\n  10,\n  5,\n  10,\n  2,\n  8,\n  4,\n  7,\n  6,\n  1,\n  5,\n  15,\n  11,\n  9,\n  14,\n  3,\n  12,\n  13,\n  0,\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  14,\n  10,\n  4,\n  8,\n  9,\n  15,\n  13,\n  6,\n  1,\n  12,\n  0,\n  2,\n  11,\n  7,\n  5,\n  3\n], E = new Uint8Array(_s.map(function(s) {\n  return s * 2;\n})), d = new Uint32Array(32), ct = new Uint32Array(32);\nfunction ve(s, e) {\n  var t = 0;\n  for (t = 0; t < 16; t++)\n    d[t] = s.h[t], d[t + 16] = De[t];\n  for (d[24] = d[24] ^ s.t, d[25] = d[25] ^ s.t / 4294967296, e && (d[28] = ~d[28], d[29] = ~d[29]), t = 0; t < 32; t++)\n    ct[t] = Se(s.b, 4 * t);\n  for (t = 0; t < 12; t++)\n    $(0, 8, 16, 24, E[t * 16 + 0], E[t * 16 + 1]), $(2, 10, 18, 26, E[t * 16 + 2], E[t * 16 + 3]), $(4, 12, 20, 28, E[t * 16 + 4], E[t * 16 + 5]), $(6, 14, 22, 30, E[t * 16 + 6], E[t * 16 + 7]), $(0, 10, 20, 30, E[t * 16 + 8], E[t * 16 + 9]), $(2, 12, 22, 24, E[t * 16 + 10], E[t * 16 + 11]), $(4, 14, 16, 26, E[t * 16 + 12], E[t * 16 + 13]), $(6, 8, 18, 28, E[t * 16 + 14], E[t * 16 + 15]);\n  for (t = 0; t < 16; t++)\n    s.h[t] = s.h[t] ^ d[t] ^ d[t + 16];\n}\nvar q = new Uint8Array([\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0,\n  0\n]);\nfunction rt(s, e, t, r) {\n  q.fill(0), this.b = new Uint8Array(128), this.h = new Uint32Array(16), this.t = 0, this.c = 0, this.outlen = s, q[0] = s, e && (q[1] = e.length), q[2] = 1, q[3] = 1, t && q.set(t, 32), r && q.set(r, 48);\n  for (var i = 0; i < 16; i++)\n    this.h[i] = De[i] ^ Se(q, i * 4);\n  e && (be(this, e), this.c = 128);\n}\nrt.prototype.update = function(s) {\n  return z(s != null, \"input must be Uint8Array or Buffer\"), be(this, s), this;\n};\nrt.prototype.digest = function(s) {\n  var e = !s || s === \"binary\" || s === \"hex\" ? new Uint8Array(this.outlen) : s;\n  return z(e.length >= this.outlen, \"out must have at least outlen bytes of space\"), Cs(this, e), s === \"hex\" ? ps(e) : e;\n};\nrt.prototype.final = rt.prototype.digest;\nrt.ready = function(s) {\n  ut.ready(function() {\n    s();\n  });\n};\nfunction be(s, e) {\n  for (var t = 0; t < e.length; t++)\n    s.c === 128 && (s.t += s.c, ve(s, !1), s.c = 0), s.b[s.c++] = e[t];\n}\nfunction Cs(s, e) {\n  for (s.t += s.c; s.c < 128; )\n    s.b[s.c++] = 0;\n  ve(s, !0);\n  for (var t = 0; t < s.outlen; t++)\n    e[t] = s.h[t >> 2] >> 8 * (t & 3);\n  return e;\n}\nfunction ps(s) {\n  for (var e = \"\", t = 0; t < s.length; t++)\n    e += ws(s[t]);\n  return e;\n}\nfunction ws(s) {\n  return s < 16 ? \"0\" + s.toString(16) : s.toString(16);\n}\nvar Ke = rt;\nQ.exports = function(e, t, r, i, n) {\n  return n !== !0 && (z(e >= ie, \"outlen must be at least \" + ie + \", was given \" + e), z(e <= ae, \"outlen must be at most \" + ae + \", was given \" + e), t != null && z(t.length >= ne, \"key must be at least \" + ne + \", was given \" + t.length), t != null && z(t.length <= oe, \"key must be at most \" + oe + \", was given \" + t.length), r != null && z(r.length === Ae, \"salt must be exactly \" + Ae + \", was given \" + r.length), i != null && z(i.length === ce, \"personal must be exactly \" + ce + \", was given \" + i.length)), new Ke(e, t, r, i);\n};\nQ.exports.ready = function(s) {\n  ut.ready(function() {\n    s();\n  });\n};\nQ.exports.WASM_SUPPORTED = ut.SUPPORTED;\nQ.exports.WASM_LOADED = !1;\nvar ie = Q.exports.BYTES_MIN = 16, ae = Q.exports.BYTES_MAX = 64;\nQ.exports.BYTES = 32;\nvar ne = Q.exports.KEYBYTES_MIN = 16, oe = Q.exports.KEYBYTES_MAX = 64;\nQ.exports.KEYBYTES = 32;\nvar Ae = Q.exports.SALTBYTES = 16, ce = Q.exports.PERSONALBYTES = 16;\nut.ready(function(s) {\n  s || (Q.exports.WASM_LOADED = !0, Ke = ut);\n});\nvar it = {};\nObject.defineProperty(it, \"__esModule\", { value: !0 });\nit.bech32m = it.bech32 = void 0;\nconst xt = \"qpzry9x8gf2tvdw0s3jn54khce6mua7l\", Ue = {};\nfor (let s = 0; s < xt.length; s++) {\n  const e = xt.charAt(s);\n  Ue[e] = s;\n}\nfunction st(s) {\n  const e = s >> 25;\n  return (s & 33554431) << 5 ^ -(e >> 0 & 1) & 996825010 ^ -(e >> 1 & 1) & 642813549 ^ -(e >> 2 & 1) & 513874426 ^ -(e >> 3 & 1) & 1027748829 ^ -(e >> 4 & 1) & 705979059;\n}\nfunction Ie(s) {\n  let e = 1;\n  for (let t = 0; t < s.length; ++t) {\n    const r = s.charCodeAt(t);\n    if (r < 33 || r > 126)\n      return \"Invalid prefix (\" + s + \")\";\n    e = st(e) ^ r >> 5;\n  }\n  e = st(e);\n  for (let t = 0; t < s.length; ++t) {\n    const r = s.charCodeAt(t);\n    e = st(e) ^ r & 31;\n  }\n  return e;\n}\nfunction Mt(s, e, t, r) {\n  let i = 0, n = 0;\n  const o = (1 << t) - 1, A = [];\n  for (let c = 0; c < s.length; ++c)\n    for (i = i << e | s[c], n += e; n >= t; )\n      n -= t, A.push(i >> n & o);\n  if (r)\n    n > 0 && A.push(i << t - n & o);\n  else {\n    if (n >= e)\n      return \"Excess padding\";\n    if (i << t - n & o)\n      return \"Non-zero padding\";\n  }\n  return A;\n}\nfunction ys(s) {\n  return Mt(s, 8, 5, !0);\n}\nfunction ms(s) {\n  const e = Mt(s, 5, 8, !1);\n  if (Array.isArray(e))\n    return e;\n}\nfunction Es(s) {\n  const e = Mt(s, 5, 8, !1);\n  if (Array.isArray(e))\n    return e;\n  throw new Error(e);\n}\nfunction ke(s) {\n  let e;\n  s === \"bech32\" ? e = 1 : e = 734539939;\n  function t(o, A, c) {\n    if (c = c || 90, o.length + 7 + A.length > c)\n      throw new TypeError(\"Exceeds length limit\");\n    o = o.toLowerCase();\n    let I = Ie(o);\n    if (typeof I == \"string\")\n      throw new Error(I);\n    let u = o + \"1\";\n    for (let h = 0; h < A.length; ++h) {\n      const g = A[h];\n      if (g >> 5 !== 0)\n        throw new Error(\"Non 5-bit word\");\n      I = st(I) ^ g, u += xt.charAt(g);\n    }\n    for (let h = 0; h < 6; ++h)\n      I = st(I);\n    I ^= e;\n    for (let h = 0; h < 6; ++h) {\n      const g = I >> (5 - h) * 5 & 31;\n      u += xt.charAt(g);\n    }\n    return u;\n  }\n  function r(o, A) {\n    if (A = A || 90, o.length < 8)\n      return o + \" too short\";\n    if (o.length > A)\n      return \"Exceeds length limit\";\n    const c = o.toLowerCase(), I = o.toUpperCase();\n    if (o !== c && o !== I)\n      return \"Mixed-case string \" + o;\n    o = c;\n    const u = o.lastIndexOf(\"1\");\n    if (u === -1)\n      return \"No separator character for \" + o;\n    if (u === 0)\n      return \"Missing prefix for \" + o;\n    const h = o.slice(0, u), g = o.slice(u + 1);\n    if (g.length < 6)\n      return \"Data too short\";\n    let p = Ie(h);\n    if (typeof p == \"string\")\n      return p;\n    const x = [];\n    for (let M = 0; M < g.length; ++M) {\n      const L = g.charAt(M), _ = Ue[L];\n      if (_ === void 0)\n        return \"Unknown character \" + L;\n      p = st(p) ^ _, !(M + 6 >= g.length) && x.push(_);\n    }\n    return p !== e ? \"Invalid checksum for \" + o : { prefix: h, words: x };\n  }\n  function i(o, A) {\n    const c = r(o, A);\n    if (typeof c == \"object\")\n      return c;\n  }\n  function n(o, A) {\n    const c = r(o, A);\n    if (typeof c == \"object\")\n      return c;\n    throw new Error(c);\n  }\n  return {\n    decodeUnsafe: i,\n    decode: n,\n    encode: t,\n    toWords: ys,\n    fromWordsUnsafe: ms,\n    fromWords: Es\n  };\n}\nit.bech32 = ke(\"bech32\");\nit.bech32m = ke(\"bech32m\");\nvar Bs = Wt && Wt.__importDefault || function(s) {\n  return s && s.__esModule ? s : { default: s };\n};\nObject.defineProperty(xe, \"__esModule\", { value: !0 });\nconst xs = Bs(Q.exports), ft = it, Kt = \"asset\";\nclass ht {\n  constructor(e) {\n    this.hashBuf = e;\n  }\n  static fromHash(e) {\n    return new ht(e);\n  }\n  static fromParts(e, t) {\n    const r = (0, xs.default)(20).update(new Uint8Array([...e, ...t])).digest(\"binary\");\n    return ht.fromHash(r);\n  }\n  static fromBech32(e) {\n    const { prefix: t, words: r } = ft.bech32.decode(e);\n    if (t !== Kt)\n      throw new Error(\"Invalid asset fingerprint\");\n    const i = Buffer.from(ft.bech32.fromWords(r));\n    return ht.fromHash(i);\n  }\n  fingerprint() {\n    const e = ft.bech32.toWords(this.hashBuf);\n    return ft.bech32.encode(Kt, e);\n  }\n  hash() {\n    return Buffer.from(this.hashBuf).toString(\"hex\");\n  }\n  prefix() {\n    return Kt;\n  }\n  checksum() {\n    return this.fingerprint().slice(-6);\n  }\n}\nvar Qs = xe.default = ht;\nconst Ss = Qs, Ds = (s, e) => {\n  const t = vs(s), r = t.derive(bt + 1852).derive(bt + 1815).derive(bt + e), i = r.derive(0).derive(0).to_raw_key(), n = r.derive(2).derive(0).to_raw_key();\n  return r.free(), t.free(), { paymentKey: i, stakeKey: n };\n}, tt = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Address.from_bytes(f(s)), vs = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Bip32PrivateKey.from_bytes(f(s)), bs = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.DataHash.from_bytes(f(s)), F = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ed25519KeyHash.from_bytes(f(s)), Ks = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ed25519Signature.from_bytes(f(s)), St = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.from_bytes(f(s)), Us = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PublicKey.from_bytes(f(s)), ks = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusData.from_bytes(f(s)), at = (s, e) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusScript.from_bytes_with_version(f(s), mt[e]), Fs = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptRef.from_bytes(f(s)), Ns = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptHash.from_bytes(f(s)), W = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Transaction.from_bytes(f(s)), Fe = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionHash.from_bytes(f(s)), he = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionUnspentOutput.from_bytes(f(s)), Hs = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionWitnessSet.from_bytes(f(s)), Ps = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Value.from_bytes(f(s)), H = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Address.from_bech32(s), Tt = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BaseAddress.from_address(H(s)), Ne = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.EnterpriseAddress.from_address(H(s)), He = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.RewardAddress.from_address(H(s)), K = (s) => Buffer.from(s).toString(\"hex\"), f = (s) => s.length % 2 === 0 && /^[0-9A-F]*$/i.test(s) ? Buffer.from(s, \"hex\") : Buffer.from(s, \"utf-8\"), Dt = (s) => {\n  const e = (t) => {\n    const r = new Array();\n    for (let i = 0; i < t.len(); i += 1)\n      r.push(Dt(t.get(i)));\n    return r;\n  };\n  switch (s.kind()) {\n    case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptAll: {\n      const t = s.as_script_all();\n      return {\n        type: \"all\",\n        scripts: e(t.native_scripts())\n      };\n    }\n    case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptAny: {\n      const t = s.as_script_any();\n      return {\n        type: \"any\",\n        scripts: e(t.native_scripts())\n      };\n    }\n    case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptNOfK: {\n      const t = s.as_script_n_of_k();\n      return {\n        type: \"atLeast\",\n        required: t.n(),\n        scripts: e(t.native_scripts())\n      };\n    }\n    case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.TimelockStart: {\n      const t = s.as_timelock_start();\n      return {\n        type: \"after\",\n        slot: t.slot_bignum().to_str()\n      };\n    }\n    case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.TimelockExpiry: {\n      const t = s.as_timelock_expiry();\n      return {\n        type: \"before\",\n        slot: t.slot_bignum().to_str()\n      };\n    }\n    case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptPubkey: {\n      const t = s.as_script_pubkey();\n      return {\n        type: \"sig\",\n        keyHash: t.addr_keyhash().to_hex()\n      };\n    }\n    default:\n      throw new Error(`Script Kind: ${s.kind()}, is not supported`);\n  }\n}, vt = (s) => {\n  const e = (t) => {\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScripts[\"new\"]();\n    return t.forEach((i) => {\n      r.add(vt(i));\n    }), r;\n  };\n  switch (s.type) {\n    case \"all\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_all(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptAll[\"new\"](e(s.scripts)));\n    case \"any\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_any(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptAny[\"new\"](e(s.scripts)));\n    case \"atLeast\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_n_of_k(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptNOfK[\"new\"](s.required, e(s.scripts)));\n    case \"after\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_timelock_start(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TimelockStart.new_timelockstart(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.slot)));\n    case \"before\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_timelock_expiry(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TimelockExpiry.new_timelockexpiry(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.slot)));\n    case \"sig\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_pubkey(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptPubkey[\"new\"](F(s.keyHash)));\n  }\n}, X = (s) => {\n  const e = (t) => {\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusList[\"new\"]();\n    return t.forEach((i) => {\n      r.add(X(i));\n    }), r;\n  };\n  switch (typeof s) {\n    case \"string\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusData.new_bytes(f(s));\n    case \"number\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusData.new_integer(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigInt.from_str(s.toString()));\n    case \"object\":\n      if (s instanceof Array) {\n        const t = e(s);\n        return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusData.new_list(t);\n      } else if (s instanceof Map) {\n        const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusMap[\"new\"]();\n        return s.forEach((r, i) => {\n          t.insert(X(i), X(r));\n        }), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusData.new_map(t);\n      } else\n        return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusData.new_constr_plutus_data(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ConstrPlutusData[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.alternative.toString()), e(s.fields)));\n  }\n}, Ms = (s) => {\n  const e = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Relays[\"new\"]();\n  throw s.relays.forEach((t) => {\n    e.add(Ts(t));\n  }), new Error(\"toPoolParams not implemented.\");\n}, Pe = (s) => {\n  const e = (t) => je[t];\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Redeemer[\"new\"](e(s.tag), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.index.toString()), X(s.data), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ExUnits[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.budget.mem.toString()), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.budget.steps.toString())));\n}, Ts = (s) => {\n  switch (s.type) {\n    case \"SingleHostAddr\": {\n      const e = s.IPV4 ? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ipv4[\"new\"](new Uint8Array(s.IPV4.split(\".\").map((r) => parseInt(r)))) : void 0, t = s.IPV6 ? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ipv6[\"new\"](f(s.IPV6.replaceAll(\":\", \"\"))) : void 0;\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Relay.new_single_host_addr(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.SingleHostAddr[\"new\"](s.port, e, t));\n    }\n    case \"SingleHostName\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Relay.new_single_host_name(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.SingleHostName[\"new\"](s.port, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.DNSRecordAorAAAA[\"new\"](s.domainName)));\n    case \"MultiHostName\":\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Relay.new_multi_host_name(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.MultiHostName[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.DNSRecordSRV[\"new\"](s.domainName)));\n  }\n}, Me = (s) => {\n  if (s.is_plutus_script()) {\n    const t = s.plutus_script();\n    return {\n      code: t.to_hex(),\n      version: Object.keys(mt).find((r) => mt[r].to_hex() === t.language_version().to_hex())\n    };\n  }\n  const e = s.native_script();\n  return Dt(e);\n}, dt = (s) => {\n  if (\"code\" in s) {\n    const e = at(s.code, s.version);\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptRef.new_plutus_script(e);\n  }\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptRef.new_native_script(vt(s));\n}, Qt = (s) => {\n  var i, n, o;\n  const e = s.output().has_data_hash() ? (i = s.output().data_hash()) == null ? void 0 : i.to_hex() : void 0, t = s.output().has_plutus_data() ? (n = s.output().plutus_data()) == null ? void 0 : n.to_hex() : void 0, r = s.output().has_script_ref() ? (o = s.output().script_ref()) == null ? void 0 : o.to_hex() : void 0;\n  return {\n    input: {\n      outputIndex: s.input().index(),\n      txHash: s.input().transaction_id().to_hex()\n    },\n    output: {\n      address: s.output().address().to_bech32(),\n      amount: Te(s.output().amount()),\n      dataHash: e,\n      plutusData: t,\n      scriptRef: r\n    }\n  };\n}, O = (s) => {\n  const e = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionInput[\"new\"](Fe(s.input.txHash), s.input.outputIndex), t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionOutput[\"new\"](H(s.output.address), yt(s.output.amount));\n  return s.output.dataHash !== void 0 && t.set_data_hash(bs(s.output.dataHash)), s.output.plutusData !== void 0 && t.set_plutus_data(ks(s.output.plutusData)), s.output.scriptRef !== void 0 && t.set_script_ref(Fs(s.output.scriptRef)), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionUnspentOutput[\"new\"](e, t);\n}, ue = (s) => {\n  const e = s.split(\".\")[1] ?? \"0\", t = `${parseInt(e, 10)}`, r = \"1\" + \"0\".repeat(e.length);\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.UnitInterval[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(r));\n}, S = (s) => s.length % 2 === 0 && /^[0-9A-F]*$/i.test(s) ? s : K(Buffer.from(s, \"utf-8\")), Vt = (s) => Buffer.from(s, \"hex\").toString(\"utf-8\"), Te = (s) => {\n  const e = [\n    { unit: \"lovelace\", quantity: s.coin().to_str() }\n  ], t = s.multiasset();\n  if (t !== void 0) {\n    const r = t.keys();\n    for (let i = 0; i < r.len(); i += 1) {\n      const n = r.get(i), o = t.get(n);\n      if (o !== void 0) {\n        const A = o.keys();\n        for (let c = 0; c < A.len(); c += 1) {\n          const I = A.get(c), u = o.get(I) ?? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(\"0\"), h = n.to_hex() + K(I.name());\n          e.push({ unit: h, quantity: u.to_str() });\n        }\n      }\n    }\n  }\n  return e;\n}, yt = (s) => {\n  const e = s.find((n) => n.unit === \"lovelace\"), t = Array.from(new Set(s.filter((n) => n.unit !== \"lovelace\").map((n) => n.unit.slice(0, N)))), r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.MultiAsset[\"new\"]();\n  t.forEach((n) => {\n    const o = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Assets[\"new\"]();\n    s.filter((A) => A.unit.slice(0, N) === n).forEach((A) => {\n      o.insert(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.AssetName[\"new\"](f(A.unit.slice(N))), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(A.quantity));\n    }), r.insert(Ns(n), o);\n  });\n  const i = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Value[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(e ? e.quantity : \"0\"));\n  return (s.length > 1 || !e) && i.set_multiasset(r), i;\n}, de = (s, e, t) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BaseAddress[\"new\"](s, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(e), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(t)), Ve = (s, e = \"\") => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Bip32PrivateKey.from_bip39_entropy(f(s), f(S(e))), le = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.DataCost.new_coins_per_byte(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s)), Vs = (s) => {\n  if (typeof s != \"object\" || !(\"input\" in s))\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.DatumSource[\"new\"](X(s));\n  const e = O(s);\n  if (e.output().has_plutus_data())\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.DatumSource.new_ref_input(e.input());\n  throw new Error(`No inline datum found in UTxO: ${e.input().transaction_id().to_hex()}`);\n}, ge = (s, e) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.EnterpriseAddress[\"new\"](s, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(e)), fe = (s, e) => {\n  if (typeof s == \"string\")\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.MintWitness.new_native_script(St(s));\n  if (e === void 0)\n    throw new Error(\"Minting with plutus requires a redeemer to be defined\");\n  if (e.tag !== \"MINT\")\n    throw new Error(\"Minting redeemer's tag must be defined as 'MINT'\");\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.MintWitness.new_plutus_script(Oe(s), Pe({\n    tag: \"MINT\",\n    index: 0,\n    budget: me,\n    data: {\n      alternative: 0,\n      fields: []\n    },\n    ...e\n  }));\n}, Ft = (s, e) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.RewardAddress[\"new\"](s, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(e)), Oe = (s) => {\n  if (\"code\" in s)\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusScriptSource[\"new\"](at(s.code, s.version));\n  const e = O(s);\n  if (e.output().has_script_ref()) {\n    const t = e.output().script_ref();\n    if (t.is_plutus_script()) {\n      const r = Me(t), i = at(r.code, r.version).hash();\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusScriptSource.new_ref_input_with_lang_ver(i, e.input(), mt[r.version]);\n    }\n  }\n  throw new Error(`No plutus script reference found in UTxO: ${e.input().transaction_id().to_hex()}`);\n}, _t = (s) => {\n  const e = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptPubkey[\"new\"](s);\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_pubkey(e);\n}, Os = (s = Y) => {\n  const e = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionBuilderConfigBuilder[\"new\"]().coins_per_utxo_byte(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.coinsPerUTxOSize)).ex_unit_prices(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ExUnitPrices[\"new\"](ue(s.priceMem.toString()), ue(s.priceStep.toString()))).fee_algo(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.LinearFee[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.minFeeA.toString()), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.minFeeB.toString()))).key_deposit(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.keyDeposit)).max_tx_size(s.maxTxSize).max_value_size(parseInt(s.maxValSize, 10)).pool_deposit(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(s.poolDeposit)).build();\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionBuilder[\"new\"](e);\n}, _e = (s) => {\n  const e = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TxInputsBuilder[\"new\"]();\n  return s.map((t) => t instanceof _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionUnspentOutput ? t : O(t)).forEach((t) => {\n    e.add_input(t.output().address(), t.input(), t.output().amount());\n  }), e;\n}, Ct = (s) => {\n  if (typeof s == \"string\")\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionOutputBuilder[\"new\"]().with_address(H(s));\n  let e = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionOutputBuilder[\"new\"]().with_address(H(s.address));\n  if (s.datum) {\n    const { value: t, inline: r } = s.datum, i = X(t);\n    e = e.with_data_hash(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.hash_plutus_data(i)), r && (e = e.with_plutus_data(i));\n  }\n  if (s.script) {\n    const t = dt(s.script);\n    e = e.with_script_ref(t);\n  }\n  return e;\n}, nt = (s) => {\n  const e = s.slice(0, N), t = s.includes(\".\") ? S(s.split(\".\")[1]) : s.slice(N);\n  return { policyId: e, assetName: t };\n}, l = (s) => axios__WEBPACK_IMPORTED_MODULE_0__.isAxiosError(s) ? s.response ? JSON.stringify({\n  data: s.response.data,\n  headers: s.response.headers,\n  status: s.response.status\n}) : s.request ? JSON.stringify(s.request) : s.message : JSON.stringify(s), Zs = (s) => {\n  const e = X(s);\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.hash_plutus_data(e).to_hex();\n}, tr = (s, e = Date.now()) => {\n  if (Et[s]) {\n    const [t, r, i, n] = Et[s];\n    return parseInt(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(e.toString()).div_floor(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(\"1000\")).checked_sub(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(i)).div_floor(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(n)).checked_add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t)).to_str(), 10);\n  }\n  throw new Error(`Couldn't resolve EpochNo for network: ${s}`);\n}, Ys = (s, e) => Ss.fromParts(f(s), f(e)).fingerprint(), er = (s, e) => Xe[s][e], sr = (s) => vt(s).hash().to_hex(), et = (s) => {\n  var e, t;\n  try {\n    const r = [\n      (e = Tt(s)) == null ? void 0 : e.payment_cred().to_keyhash(),\n      (t = Ne(s)) == null ? void 0 : t.payment_cred().to_keyhash()\n    ].find((i) => i !== void 0);\n    if (r !== void 0)\n      return r.to_hex();\n    throw new Error(`Couldn't resolve payment key hash from address: ${s}`);\n  } catch (r) {\n    throw new Error(`An error occurred during resolvePaymentKeyHash: ${r}.`);\n  }\n}, rr = (s, e = 0) => {\n  const t = at(s.code, s.version);\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.EnterpriseAddress[\"new\"](e, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_scripthash(t.hash())).to_address().to_bech32();\n}, ir = (s) => {\n  try {\n    const e = Ne(s), t = e == null ? void 0 : e.payment_cred().to_scripthash();\n    if (t !== void 0)\n      return t.to_hex();\n    throw new Error(`Couldn't resolve script hash from address: ${s}`);\n  } catch (e) {\n    throw new Error(`An error occurred during resolveScriptHash: ${e}.`);\n  }\n}, ar = (s) => _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ed25519KeyHash.from_hex(s).to_bech32(\"pool1\"), nr = (s) => {\n  const e = (0,bip39__WEBPACK_IMPORTED_MODULE_1__.mnemonicToEntropy)(s.join(\" \")), t = Ve(e), r = t.to_bech32();\n  return t.free(), r;\n}, or = (s) => dt(s).to_hex(), Ar = (s, e = Date.now()) => {\n  if (Et[s]) {\n    const [t, r, i] = Et[s];\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(e.toString()).div_floor(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(\"1000\")).checked_sub(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(i)).checked_add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(r)).to_str();\n  }\n  throw new Error(`Couldn't resolve SlotNo for network: ${s}`);\n}, Ot = (s) => {\n  try {\n    const e = H(s), t = Tt(s), r = t == null ? void 0 : t.stake_cred().to_keyhash();\n    if (r !== void 0)\n      return Ft(e.network_id(), r).to_address().to_bech32();\n    throw new Error(`Couldn't resolve reward address from address: ${s}`);\n  } catch (e) {\n    throw new Error(`An error occurred during resolveRewardAddress: ${e}.`);\n  }\n}, It = (s) => {\n  var e, t;\n  try {\n    const r = [\n      (e = Tt(s)) == null ? void 0 : e.stake_cred().to_keyhash(),\n      (t = He(s)) == null ? void 0 : t.payment_cred().to_keyhash()\n    ].find((i) => i !== void 0);\n    if (r !== void 0)\n      return r.to_hex();\n    throw new Error(`Couldn't resolve stake key hash from address: ${s}`);\n  } catch (r) {\n    throw new Error(`An error occurred during resolveStakeKeyHash: ${r}.`);\n  }\n}, Ye = (s, e = Y.minFeeA, t = Y.minFeeB) => (BigInt(e) * BigInt(s) + BigInt(t)).toString(), Gs = (s) => {\n  const e = W(s).body();\n  return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.hash_transaction(e).to_hex();\n}, cr = (s = \"\", e = 32) => {\n  if (e <= 0 || e > 2048)\n    throw new Error(\"Length must be bewteen 1 and 2048\");\n  const r = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.customAlphabet)(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\")(e);\n  return S(`${s}${r}`);\n}, Ge = (s, e) => {\n  const t = s.vkeys();\n  if (t !== void 0) {\n    const r = /* @__PURE__ */ new Set();\n    for (let n = 0; n < t.len(); n += 1)\n      r.add(t.get(n).to_hex());\n    for (let n = 0; n < e.len(); n += 1)\n      r.add(e.get(n).to_hex());\n    const i = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Vkeywitnesses[\"new\"]();\n    return r.forEach((n) => {\n      i.add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Vkeywitness.from_hex(n));\n    }), i;\n  }\n  return e;\n};\nclass Ir {\n  _axiosInstance;\n  constructor(e, t = 0) {\n    const r = e.slice(0, 7);\n    this._axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0__.create({\n      baseURL: `https://cardano-${r}.blockfrost.io/api/v${t}`,\n      headers: { project_id: e }\n    });\n  }\n  async fetchAccountInfo(e) {\n    const t = e.startsWith(\"addr\") ? Ot(e) : e;\n    try {\n      const { data: r, status: i } = await this._axiosInstance.get(`accounts/${t}`);\n      if (i === 200)\n        return {\n          poolId: r.pool_id,\n          active: r.active || r.active_epoch !== null,\n          balance: r.controlled_amount,\n          rewards: r.withdrawable_amount,\n          withdrawals: r.withdrawals_sum\n        };\n      throw l(r);\n    } catch (r) {\n      throw l(r);\n    }\n  }\n  async fetchAddressUTxOs(e, t) {\n    const r = t !== void 0 ? `/${t}` : \"\", i = `addresses/${e}/utxos` + r, n = async (c = 1, I = []) => {\n      const { data: u, status: h } = await this._axiosInstance.get(`${i}?page=${c}`);\n      if (h === 200)\n        return u.length > 0 ? n(c + 1, [...I, ...await Promise.all(u.map(A))]) : I;\n      throw l(u);\n    }, o = async (c) => {\n      if (c) {\n        const { data: I, status: u } = await this._axiosInstance.get(`scripts/${c}`);\n        if (u === 200) {\n          const h = I.type.startsWith(\"plutus\") ? {\n            code: await this.fetchPlutusScriptCBOR(c),\n            version: I.type.replace(\"plutus\", \"\")\n          } : await this.fetchNativeScriptJSON(c);\n          return dt(h).to_hex();\n        }\n        throw l(I);\n      }\n    }, A = async (c) => ({\n      input: {\n        outputIndex: c.output_index,\n        txHash: c.tx_hash\n      },\n      output: {\n        address: e,\n        amount: c.amount,\n        dataHash: c.data_hash ?? void 0,\n        plutusData: c.inline_datum ?? void 0,\n        scriptRef: await o(c.reference_script_hash)\n      }\n    });\n    try {\n      return await n();\n    } catch {\n      return [];\n    }\n  }\n  async fetchAssetAddresses(e) {\n    const t = async (r = 1, i = []) => {\n      const { policyId: n, assetName: o } = nt(e), { data: A, status: c } = await this._axiosInstance.get(`assets/${n}${o}/addresses?page=${r}`);\n      if (c === 200)\n        return A.length > 0 ? t(r + 1, [...i, ...A]) : i;\n      throw l(A);\n    };\n    try {\n      return await t();\n    } catch {\n      return [];\n    }\n  }\n  async fetchAssetMetadata(e) {\n    try {\n      const { policyId: t, assetName: r } = nt(e), { data: i, status: n } = await this._axiosInstance.get(`assets/${t}${r}`);\n      if (n === 200)\n        return {\n          ...i.onchain_metadata\n        };\n      throw l(i);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchHandleAddress(e) {\n    try {\n      const t = S(e.replace(\"$\", \"\")), { data: r, status: i } = await this._axiosInstance.get(`assets/${Ht[1]}${t}/addresses`);\n      if (i === 200)\n        return r[0].address;\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchProtocolParameters(e = Number.NaN) {\n    try {\n      const { data: t, status: r } = await this._axiosInstance.get(`epochs/${isNaN(e) ? \"latest\" : e}/parameters`);\n      if (r === 200)\n        return {\n          coinsPerUTxOSize: t.coins_per_utxo_word,\n          collateralPercent: t.collateral_percent,\n          decentralisation: t.decentralisation_param,\n          epoch: t.epoch,\n          keyDeposit: t.key_deposit,\n          maxBlockExMem: t.max_block_ex_mem,\n          maxBlockExSteps: t.max_block_ex_steps,\n          maxBlockHeaderSize: t.max_block_header_size,\n          maxBlockSize: t.max_block_size,\n          maxCollateralInputs: t.max_collateral_inputs,\n          maxTxExMem: t.max_tx_ex_mem,\n          maxTxExSteps: t.max_tx_ex_steps,\n          maxTxSize: t.max_tx_size,\n          maxValSize: t.max_val_size,\n          minFeeA: t.min_fee_a,\n          minFeeB: t.min_fee_b,\n          minPoolCost: t.min_pool_cost,\n          poolDeposit: t.pool_deposit,\n          priceMem: t.price_mem,\n          priceStep: t.price_step\n        };\n      throw l(t);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async submitTx(e) {\n    try {\n      const t = { \"Content-Type\": \"application/cbor\" }, { data: r, status: i } = await this._axiosInstance.post(\"tx/submit\", f(e), { headers: t });\n      if (i === 200)\n        return r;\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchPlutusScriptCBOR(e) {\n    const { data: t, status: r } = await this._axiosInstance.get(`scripts/${e}/cbor`);\n    if (r === 200)\n      return t.cbor;\n    throw l(t);\n  }\n  async fetchNativeScriptJSON(e) {\n    const { data: t, status: r } = await this._axiosInstance.get(`scripts/${e}/json`);\n    if (r === 200)\n      return t.json;\n    throw l(t);\n  }\n}\nclass hr {\n  _axiosInstance;\n  constructor(e, t, r) {\n    const i = r.host ?? \"ipfs.infura.io\", n = r.port ?? 5001, o = r.version ?? 0;\n    this._axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0__.create({\n      baseURL: `https://${i}:${n}/api/v${o}`,\n      auth: { username: e, password: t }\n    });\n  }\n  async uploadContent(e, t = !1) {\n    try {\n      const r = { \"Content-Type\": \"multipart/form-data\" }, { data: i, status: n } = await this._axiosInstance.post(`add?recursive=${t}`, e, { headers: r });\n      if (n === 200)\n        return i;\n      throw l(i);\n    } catch (r) {\n      throw l(r);\n    }\n  }\n}\nclass ur {\n  _axiosInstance;\n  constructor(e, t = 0) {\n    this._axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0__.create({\n      baseURL: `https://${e}.koios.rest/api/v${t}`\n    });\n  }\n  async fetchAccountInfo(e) {\n    try {\n      const t = e.startsWith(\"addr\") ? Ot(e) : e, { data: r, status: i } = await this._axiosInstance.post(\"account_info\", { _stake_addresses: [t] });\n      if (i === 200)\n        return {\n          poolId: r[0].delegated_pool,\n          active: r[0].status === \"registered\",\n          balance: r[0].total_balance.toString(),\n          rewards: r[0].rewards_available,\n          withdrawals: r[0].withdrawals\n        };\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchAddressUTxOs(e, t) {\n    const r = (i) => {\n      if (i) {\n        const n = i.type.startsWith(\"plutus\") ? {\n          code: i.bytes,\n          version: i.type.replace(\"plutus\", \"\")\n        } : Dt(St(i.bytes));\n        return dt(n).to_hex();\n      }\n    };\n    try {\n      const { data: i, status: n } = await this._axiosInstance.post(\"address_info\", { _addresses: [e] });\n      if (n === 200) {\n        const o = i.flatMap((A) => A.utxo_set).map((A) => {\n          var c;\n          return {\n            input: {\n              outputIndex: A.tx_index,\n              txHash: A.tx_hash\n            },\n            output: {\n              address: e,\n              amount: [\n                { unit: \"lovelace\", quantity: A.value },\n                ...A.asset_list.map((I) => ({\n                  unit: `${I.policy_id}${I.asset_name}`,\n                  quantity: `${I.quantity}`\n                }))\n              ],\n              dataHash: A.datum_hash ?? void 0,\n              plutusData: ((c = A.inline_datum) == null ? void 0 : c.bytes) ?? void 0,\n              scriptRef: r(A.reference_script)\n            }\n          };\n        });\n        return t !== void 0 ? o.filter((A) => A.output.amount.find((c) => c.unit === t) !== void 0) : o;\n      }\n      throw l(i);\n    } catch {\n      return [];\n    }\n  }\n  async fetchAssetAddresses(e) {\n    try {\n      const { policyId: t, assetName: r } = nt(e), { data: i, status: n } = await this._axiosInstance.get(`asset_address_list?_asset_policy=${t}&_asset_name=${r}`);\n      if (n === 200)\n        return i.map((o) => ({\n          address: o.payment_address,\n          quantity: o.quantity\n        }));\n      throw l(i);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchAssetMetadata(e) {\n    try {\n      const { policyId: t, assetName: r } = nt(e), { data: i, status: n } = await this._axiosInstance.get(`asset_info?_asset_policy=${t}&_asset_name=${r}`);\n      if (n === 200)\n        return {\n          ...i[0].minting_tx_metadata[721][t][Vt(r)]\n        };\n      throw l(i);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchHandleAddress(e) {\n    try {\n      const t = S(e.replace(\"$\", \"\")), { data: r, status: i } = await this._axiosInstance.get(`asset_address_list?_asset_policy=${Ht[1]}&_asset_name=${t}`);\n      if (i === 200)\n        return r[0].payment_address;\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchProtocolParameters(e) {\n    try {\n      const { data: t, status: r } = await this._axiosInstance.get(`epoch_params?_epoch_no=${e}`);\n      if (r === 200)\n        return {\n          coinsPerUTxOSize: t[0].coins_per_utxo_size,\n          collateralPercent: t[0].collateral_percent,\n          decentralisation: t[0].decentralisation,\n          epoch: t[0].epoch_no,\n          keyDeposit: t[0].key_deposit,\n          maxBlockExMem: t[0].max_block_ex_mem.toString(),\n          maxBlockExSteps: t[0].max_block_ex_steps.toString(),\n          maxBlockHeaderSize: t[0].max_bh_size,\n          maxBlockSize: t[0].max_block_size,\n          maxCollateralInputs: t[0].max_collateral_inputs,\n          maxTxExMem: t[0].max_tx_ex_mem.toString(),\n          maxTxExSteps: t[0].max_tx_ex_steps.toString(),\n          maxTxSize: t[0].max_tx_size,\n          maxValSize: t[0].max_val_size.toString(),\n          minFeeA: t[0].min_fee_a,\n          minFeeB: t[0].min_fee_b,\n          minPoolCost: t[0].min_pool_cost,\n          poolDeposit: t[0].pool_deposit,\n          priceMem: t[0].price_mem,\n          priceStep: t[0].price_step\n        };\n      throw l(t);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async submitTx(e) {\n    try {\n      const t = { \"Content-Type\": \"application/cbor\" }, { data: r, status: i } = await this._axiosInstance.post(\"submittx\", f(e), { headers: t });\n      if (i === 202)\n        return r;\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n}\nclass dr {\n  _axiosInstance;\n  constructor(e, t, r, i = 1) {\n    this._axiosInstance = axios__WEBPACK_IMPORTED_MODULE_0__.create({\n      baseURL: `https://cardano-${e}.tangocrypto.com/${t}/v${i}`,\n      headers: { \"x-api-key\": r }\n    });\n  }\n  async fetchAccountInfo(e) {\n    try {\n      const t = e.startsWith(\"addr\") ? Ot(e) : e, { data: r, status: i } = await this._axiosInstance.get(`wallets/${t}`);\n      if (i === 200)\n        return {\n          poolId: r.pool_id,\n          active: r.active,\n          balance: r.controlled_total_stake,\n          rewards: r.rewards_sum,\n          withdrawals: r.withdrawals_sum\n        };\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchAddressUTxOs(e, t) {\n    const r = t !== void 0 ? `/assets/${t}` : \"\", i = `addresses/${e}${r}/utxos?size=50`, n = async (I = \"\", u = []) => {\n      var p;\n      const { data: h, status: g } = await this._axiosInstance.get(`${i}&cursor=${I}`);\n      if (g === 200)\n        return h.cursor !== null && ((p = h.cursor) == null ? void 0 : p.length) > 0 ? n(h.cursor, [...u, ...h.data.map(c)]) : h.data.map(c);\n      throw l(h);\n    }, o = (I, u) => {\n      const h = [{\n        unit: \"lovelace\",\n        quantity: I.toString()\n      }];\n      return u.forEach((g) => {\n        const p = S(g.asset_name);\n        h.push({\n          unit: `${g.policy_id}${p}`,\n          quantity: g.quantity.toString()\n        });\n      }), h;\n    }, A = (I) => {\n      if (I) {\n        const u = I.type.startsWith(\"plutus\") ? {\n          code: I.code,\n          version: I.type.replace(\"plutus\", \"\")\n        } : Dt(St(I.json));\n        return dt(u).to_hex();\n      }\n    }, c = (I) => {\n      var u;\n      return {\n        input: {\n          outputIndex: I.index,\n          txHash: I.hash\n        },\n        output: {\n          address: e,\n          amount: o(I.value, I.assets),\n          dataHash: void 0,\n          plutusData: ((u = I.inline_datum) == null ? void 0 : u.value_raw) ?? void 0,\n          scriptRef: A(I.reference_script)\n        }\n      };\n    };\n    try {\n      return await n();\n    } catch {\n      return [];\n    }\n  }\n  async fetchAssetAddresses(e) {\n    const t = (i) => ({\n      address: i.address,\n      quantity: i.quantity.toString()\n    }), r = async (i = \"\", n = []) => {\n      var u;\n      const { policyId: o, assetName: A } = nt(e), { data: c, status: I } = await this._axiosInstance.get(`assets/${o}${A}/addresses?size=100&cursor=${i}`);\n      if (I === 200)\n        return c.cursor !== null && ((u = c.cursor) == null ? void 0 : u.length) > 0 ? r(c.cursor, [...n, ...c.data.map(t)]) : c.data.map(t);\n      throw l(c);\n    };\n    try {\n      return await r();\n    } catch {\n      return [];\n    }\n  }\n  async fetchAssetMetadata(e) {\n    var t;\n    try {\n      const { policyId: r, assetName: i } = nt(e), { data: n, status: o } = await this._axiosInstance.get(`assets/${r}${i}`);\n      if (o === 200)\n        return {\n          ...(t = n.metadata[0]) == null ? void 0 : t.json[r][Vt(i)]\n        };\n      throw l(n);\n    } catch (r) {\n      throw l(r);\n    }\n  }\n  async fetchHandleAddress(e) {\n    try {\n      const t = S(e.replace(\"$\", \"\")), { data: r, status: i } = await this._axiosInstance.get(`assets/${Ht[1]}${t}/addresses`);\n      if (i === 200)\n        return r.data[0].address;\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async fetchProtocolParameters(e) {\n    try {\n      const { data: t, status: r } = await this._axiosInstance.get(`epochs/${e}/parameters`);\n      if (r === 200)\n        return {\n          coinsPerUTxOSize: t.coins_per_utxo_size.toString(),\n          collateralPercent: t.collateral_percent,\n          decentralisation: t.decentralisation,\n          epoch: t.epoch_no,\n          keyDeposit: t.key_deposit.toString(),\n          maxBlockExMem: t.max_block_ex_mem.toString(),\n          maxBlockExSteps: t.max_block_ex_steps.toString(),\n          maxBlockHeaderSize: t.max_block_header_size,\n          maxBlockSize: t.max_block_size,\n          maxCollateralInputs: t.max_collateral_inputs,\n          maxTxExMem: t.max_tx_ex_mem.toString(),\n          maxTxExSteps: t.max_tx_ex_steps.toString(),\n          maxTxSize: t.max_tx_size,\n          maxValSize: t.max_val_size.toString(),\n          minFeeA: t.min_fee_a,\n          minFeeB: t.min_fee_b,\n          minPoolCost: t.min_pool_cost.toString(),\n          poolDeposit: t.pool_deposit.toString(),\n          priceMem: t.price_mem,\n          priceStep: t.price_step\n        };\n      throw l(t);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n  async submitTx(e) {\n    try {\n      const t = { \"Content-Type\": \"application/json\" }, { data: r, status: i } = await this._axiosInstance.post(\"transactions/submit\", { tx: e }, { headers: t });\n      if (i === 200)\n        return r.tx_id;\n      throw l(r);\n    } catch (t) {\n      throw l(t);\n    }\n  }\n}\nclass lr {\n  static withOneSignature(e) {\n    const t = F(et(e));\n    return _t(t).to_hex();\n  }\n  static withAtLeastNSignatures(e, t) {\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScripts[\"new\"]();\n    e.forEach((n) => {\n      const o = F(et(n));\n      r.add(_t(o));\n    });\n    const i = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptNOfK[\"new\"](t, r);\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_any(i).to_hex();\n  }\n  static withAnySignature(e) {\n    const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScripts[\"new\"]();\n    e.forEach((i) => {\n      const n = F(et(i));\n      t.add(_t(n));\n    });\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptAny[\"new\"](t);\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_any(r).to_hex();\n  }\n  static withAllSignatures(e) {\n    const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScripts[\"new\"]();\n    e.forEach((i) => {\n      const n = F(et(i));\n      t.add(_t(n));\n    });\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.ScriptAll[\"new\"](t);\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScript.new_script_any(r).to_hex();\n  }\n  static fromNativeScript(e) {\n    return vt(e).to_hex();\n  }\n}\nfunction j(s, e, t, r) {\n  var i = arguments.length, n = i < 3 ? e : r === null ? r = Object.getOwnPropertyDescriptor(e, t) : r, o;\n  if (typeof Reflect == \"object\" && typeof Reflect.decorate == \"function\")\n    n = Reflect.decorate(s, e, t, r);\n  else\n    for (var A = s.length - 1; A >= 0; A--)\n      (o = s[A]) && (n = (i < 3 ? o(n) : i > 3 ? o(e, t, n) : o(e, t)) || n);\n  return i > 3 && n && Object.defineProperty(e, t, n), n;\n}\nconst Rs = (s) => class extends s {\n  __visits = [];\n}, Z = () => function(s, e, t) {\n  const r = t.value;\n  t.value = function(...i) {\n    const n = r.call(this, ...i);\n    return this.__visits && this.__visits.push(e), n;\n  };\n};\nlet R = class {\n  _changeAddress;\n  _recipients = /* @__PURE__ */ new Map();\n  _totalBurns = /* @__PURE__ */ new Map();\n  _totalMints = /* @__PURE__ */ new Map();\n  _era;\n  _initiator;\n  _mintBuilder;\n  _protocolParameters;\n  _txBuilder;\n  _txCertificates;\n  _txInputsBuilder;\n  _txWithdrawals;\n  constructor(e = {}) {\n    this._era = e.era, this._initiator = e.initiator, this._mintBuilder = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.MintBuilder[\"new\"](), this._protocolParameters = e.parameters ?? Y, this._txBuilder = Os(e.parameters), this._txCertificates = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Certificates[\"new\"](), this._txInputsBuilder = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TxInputsBuilder[\"new\"](), this._txWithdrawals = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Withdrawals[\"new\"]();\n  }\n  static maskMetadata(e, t = \"ALONZO\") {\n    var n;\n    const r = W(e), i = (n = r.auxiliary_data()) == null ? void 0 : n.metadata();\n    if (i !== void 0) {\n      const o = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.GeneralTransactionMetadata[\"new\"]();\n      for (let c = 0; c < i.len(); c += 1) {\n        const I = i.keys().get(c), u = i.get(I);\n        o.insert(I, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionMetadatum.from_hex(\"0\".repeat(((u == null ? void 0 : u.to_hex()) ?? \"\").length)));\n      }\n      const A = r.auxiliary_data();\n      return A !== void 0 && (A.set_metadata(o), A.set_prefer_alonzo_format(t === \"ALONZO\")), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Transaction[\"new\"](r.body(), r.witness_set(), A).to_hex();\n    }\n    return e;\n  }\n  static readMetadata(e) {\n    var r, i;\n    return ((i = (r = W(e).auxiliary_data()) == null ? void 0 : r.metadata()) == null ? void 0 : i.to_hex()) ?? \"\";\n  }\n  static writeMetadata(e, t, r = \"ALONZO\") {\n    const i = W(e), n = i.auxiliary_data() ?? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.AuxiliaryData[\"new\"]();\n    return n.set_metadata(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.GeneralTransactionMetadata.from_hex(t)), n.set_prefer_alonzo_format(r === \"ALONZO\"), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Transaction[\"new\"](i.body(), i.witness_set(), n).to_hex();\n  }\n  get size() {\n    return this._txBuilder.full_size();\n  }\n  async build() {\n    try {\n      return (this._mintBuilder.has_plutus_scripts() || this.notVisited(\"redeemValue\") === !1) && (await this.addRequiredSignersIfNeeded(), await this.addCollateralIfNeeded()), await this.forgeAssetsIfNeeded(), await this.addTxInputsAsNeeded(), await this.addChangeAddress(), this._txBuilder.build_tx().to_hex();\n    } catch (e) {\n      throw new Error(`[Transaction] An error occurred during build: ${e}.`);\n    }\n  }\n  burnAsset(e, t, r) {\n    const i = this._totalBurns.has(t.unit) ? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(this._totalBurns.get(t.unit) ?? \"0\").checked_add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t.quantity)).to_str() : t.quantity;\n    return this._mintBuilder.add_asset(fe(e, r), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.AssetName[\"new\"](f(t.unit.slice(N))), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Int.new_negative(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t.quantity))), this._totalBurns.set(t.unit, i), this;\n  }\n  delegateStake(e, t) {\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Certificate.new_stake_delegation(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeDelegation[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(F(It(e))), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ed25519KeyHash.from_bech32(t)));\n    return this._txCertificates.add(r), this;\n  }\n  deregisterStake(e) {\n    const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Certificate.new_stake_deregistration(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeDeregistration[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(F(It(e)))));\n    return this._txCertificates.add(t), this;\n  }\n  mintAsset(e, t, r) {\n    var I, u;\n    const i = (h, g) => {\n      const p = typeof h == \"string\" ? St(h).hash().to_hex() : n(h).hash().to_hex(), x = S(g.assetName);\n      return {\n        unit: `${p}${x}`,\n        quantity: g.assetQuantity\n      };\n    }, n = (h) => {\n      if (\"code\" in h)\n        return at(h.code, h.version);\n      const g = O(h);\n      if (g.output().has_script_ref()) {\n        const p = g.output().script_ref();\n        if (p.is_plutus_script()) {\n          const x = Me(p);\n          return at(x.code, x.version);\n        }\n      }\n      throw new Error(`No plutus script reference found in UTxO: ${g.input().transaction_id().to_hex()}`);\n    }, o = i(e, t), c = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(((I = this._totalMints.get(o.unit)) == null ? void 0 : I.assetQuantity) ?? \"0\").checked_add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(o.quantity));\n    return this._mintBuilder.add_asset(fe(e, r), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.AssetName[\"new\"](f(S(t.assetName))), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Int[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(o.quantity))), this._recipients.has(t.recipient) ? (u = this._recipients.get(t.recipient)) == null || u.push(o) : this._recipients.set(t.recipient, [o]), this._totalMints.set(o.unit, {\n      ...t,\n      assetQuantity: c.to_str()\n    }), this;\n  }\n  redeemValue(e) {\n    const t = {\n      tag: \"SPEND\",\n      budget: me,\n      index: this._txInputsBuilder.inputs().len(),\n      data: {\n        alternative: 0,\n        fields: []\n      },\n      ...e.redeemer\n    }, r = O(e.value), i = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PlutusWitness.new_with_ref(Oe(e.script), Vs(e.datum), Pe(t));\n    return this._txInputsBuilder.add_plutus_script_input(i, r.input(), r.output().amount()), this;\n  }\n  registerStake(e) {\n    const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Certificate.new_stake_registration(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeRegistration[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredential.from_keyhash(F(It(e)))));\n    return this._txCertificates.add(t), this;\n  }\n  registerPool(e) {\n    const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Certificate.new_pool_registration(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PoolRegistration[\"new\"](Ms(e)));\n    return this._txCertificates.add(t), this;\n  }\n  retirePool(e, t) {\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Certificate.new_pool_retirement(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PoolRetirement[\"new\"](_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Ed25519KeyHash.from_bech32(e), t));\n    return this._txCertificates.add(r), this;\n  }\n  sendAssets(e, t) {\n    const r = yt(t), i = r.multiasset();\n    if (r.is_zero() || i === void 0)\n      return this;\n    const o = Ct(e).next().with_asset_and_min_required_coin_by_utxo_cost(i, le(this._protocolParameters.coinsPerUTxOSize)).build();\n    return this._txBuilder.add_output(o), this;\n  }\n  sendLovelace(e, t) {\n    const i = Ct(e).next().with_coin(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t)).build();\n    return this._txBuilder.add_output(i), this;\n  }\n  sendValue(e, t) {\n    const r = yt(t.output.amount), n = Ct(e).next().with_value(r).build();\n    return this._txBuilder.add_output(n), this;\n  }\n  setChangeAddress(e) {\n    return this._changeAddress = H(e), this;\n  }\n  setCollateral(e) {\n    const t = _e(e);\n    return this._txBuilder.set_collateral(t), this;\n  }\n  setMetadata(e, t) {\n    return this._txBuilder.add_json_metadatum_with_schema(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(e.toString()), JSON.stringify(t), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.MetadataJsonSchema.NoConversions), this;\n  }\n  setRequiredSigners(e) {\n    return Array.from(new Set(e.map((r) => r.startsWith(\"addr\") ? et(r) : It(r)).map((r) => F(r)))).forEach((r) => {\n      this._txBuilder.add_required_signer(r);\n    }), this;\n  }\n  setTimeToStart(e) {\n    return this._txBuilder.set_validity_start_interval_bignum(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(e)), this;\n  }\n  setTimeToExpire(e) {\n    return this._txBuilder.set_ttl_bignum(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(e)), this;\n  }\n  setTxInputs(e) {\n    return e.map((t) => O(t)).forEach((t) => {\n      this._txInputsBuilder.add_input(t.output().address(), t.input(), t.output().amount());\n    }), this;\n  }\n  withdrawRewards(e, t) {\n    const r = He(e);\n    return r !== void 0 && this._txWithdrawals.insert(r, _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(t)), this;\n  }\n  async addBurnInputsIfNeeded() {\n    if (this._initiator && this._totalBurns.size > 0 && this.notVisited(\"setTxInputs\")) {\n      const e = await this._initiator.getUsedUTxOs();\n      ts(this._totalBurns, e.map((r) => Qt(r))).map((r) => O(r)).forEach((r) => {\n        this._txInputsBuilder.add_input(r.output().address(), r.input(), r.output().amount());\n      });\n    }\n  }\n  async addChangeAddress() {\n    if (this._initiator && this._changeAddress === void 0) {\n      const e = await this._initiator.getUsedAddress();\n      this._txBuilder.add_change_if_needed(e);\n    } else\n      this._changeAddress !== void 0 && this._txBuilder.add_change_if_needed(this._changeAddress);\n  }\n  async addCollateralIfNeeded() {\n    if (this._initiator && this.notVisited(\"setCollateral\")) {\n      const e = await this._initiator.getUsedCollateral();\n      this._txBuilder.set_collateral(_e(e));\n    }\n  }\n  async addRequiredSignersIfNeeded() {\n    if (this._initiator && this.notVisited(\"setRequiredSigners\")) {\n      const e = await this._initiator.getUsedAddress(), t = et(e.to_bech32());\n      this._txBuilder.add_required_signer(F(t));\n    }\n  }\n  async addTxInputsAsNeeded() {\n    if (this._txBuilder.set_inputs(this._txInputsBuilder), (this._mintBuilder.has_native_scripts() || this._mintBuilder.has_plutus_scripts()) && this._txBuilder.set_mint_builder(this._mintBuilder), this._txCertificates.len() > 0 && this._txBuilder.set_certs(this._txCertificates), this._txWithdrawals.len() > 0 && this._txBuilder.set_withdrawals(this._txWithdrawals), this.notVisited(\"setTxInputs\")) {\n      const e = !this.notVisited(\"mintAsset\") || !this.notVisited(\"sendAssets\") || !this.notVisited(\"sendValue\"), t = await this.selectLovelaceUTxOs(!1), r = await this.filterAvailableUTxOs(t), i = e ? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CoinSelectionStrategyCIP2.LargestFirstMultiAsset : _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CoinSelectionStrategyCIP2.LargestFirst;\n      this._txBuilder.add_inputs_from(r, i);\n    }\n    if (this._txBuilder.get_mint_builder() || this.notVisited(\"redeemValue\") === !1) {\n      const e = this._era !== void 0 ? zt[this._era] : zt.BABBAGE;\n      this._txBuilder.calc_script_data_hash(e);\n    }\n  }\n  async forgeAssetsIfNeeded() {\n    const e = (t, r) => {\n      const i = t.data.assetName, n = t.data.metadata, o = t.unit.slice(0, N);\n      if (r && r[o]) {\n        const { [o]: A, ...c } = r, I = {\n          [i]: n,\n          ...A\n        };\n        return {\n          [o]: {\n            ...I\n          },\n          ...c\n        };\n      }\n      return r !== void 0 ? {\n        [o]: {\n          [i]: n\n        },\n        ...r\n      } : {\n        [o]: { [i]: n }\n      };\n    };\n    await this.addBurnInputsIfNeeded(), Array.from(this._totalMints, (t) => ({\n      unit: t[0],\n      data: t[1]\n    })).reduce((t, r) => t.set(r.data.label, e(r, t.get(r.data.label))), /* @__PURE__ */ new Map()).forEach((t, r) => {\n      this._txBuilder.add_json_metadatum(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.BigNum.from_str(r), JSON.stringify(t));\n    }), this.addMintOutputs();\n  }\n  async filterAvailableUTxOs(e = []) {\n    const t = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.TransactionUnspentOutputs[\"new\"]();\n    return this._initiator === void 0 || (await this._initiator.getUsedUTxOs()).filter((i) => e.find((n) => n.input.txHash === i.input().transaction_id().to_hex()) === void 0).forEach((i) => {\n      t.add(i);\n    }), t;\n  }\n  async selectLovelaceUTxOs(e) {\n    if (this._initiator === void 0 || e === !1)\n      return [];\n    const t = await this._initiator.getUsedUTxOs(), r = Ze(\"5000000\", t.map((n) => Qt(n)));\n    return r.map((n) => O(n)).forEach((n) => {\n      this._txBuilder.add_input(n.output().address(), n.input(), n.output().amount());\n    }), r;\n  }\n  addMintOutputs() {\n    this._recipients.forEach((e, t) => {\n      const i = yt(e).multiasset();\n      if (i !== void 0) {\n        const o = Ct(t).next().with_asset_and_min_required_coin_by_utxo_cost(i, le(this._protocolParameters.coinsPerUTxOSize)).build();\n        this._txBuilder.add_output(o);\n      }\n    });\n  }\n  notVisited(e) {\n    return this.__visits.includes(e) === !1;\n  }\n};\nj([\n  Z()\n], R.prototype, \"mintAsset\", null);\nj([\n  Z()\n], R.prototype, \"redeemValue\", null);\nj([\n  Z()\n], R.prototype, \"sendAssets\", null);\nj([\n  Z()\n], R.prototype, \"sendValue\", null);\nj([\n  Z()\n], R.prototype, \"setCollateral\", null);\nj([\n  Z()\n], R.prototype, \"setRequiredSigners\", null);\nj([\n  Z()\n], R.prototype, \"setTxInputs\", null);\nR = j([\n  Rs\n], R);\nclass y {\n  _networkId;\n  _encryptedSecret;\n  constructor(e, t) {\n    this._networkId = e, this._encryptedSecret = t;\n  }\n  getAccount(e, t) {\n    return this.accountContext(e, t, (r, i) => {\n      const n = de(this._networkId, r.to_public().hash(), i.to_public().hash()).to_address().to_bech32(), o = ge(this._networkId, r.to_public().hash()).to_address().to_bech32(), A = Ft(this._networkId, i.to_public().hash()).to_address().to_bech32();\n      return {\n        baseAddress: n,\n        enterpriseAddress: o,\n        rewardAddress: A\n      };\n    });\n  }\n  signData(e, t, r, i) {\n    try {\n      return this.accountContext(e, t, (n, o) => {\n        const A = { payload: i }, c = {\n          address: y.resolveAddress(this._networkId, r, n, o),\n          key: r.startsWith(\"stake\") ? o : n\n        }, { coseSign1: I, coseKey: u } = rs(A, c);\n        return { signature: I, key: u };\n      });\n    } catch (n) {\n      throw new Error(`An error occurred during signData: ${n}.`);\n    }\n  }\n  signTx(e, t, r, i, n) {\n    try {\n      const o = Fe(Gs(i));\n      return this.accountContext(e, t, (A, c) => {\n        const I = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Vkeywitnesses[\"new\"]();\n        return y.resolveSigners(i, r, A.to_public().hash().to_hex()).forEach((h) => {\n          if (h === A.to_public().hash().to_hex())\n            I.add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.make_vkey_witness(o, A));\n          else if (h === c.to_public().hash().to_hex())\n            I.add(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.make_vkey_witness(o, c));\n          else if (n === !1)\n            throw new Error(`Missing key witness for: ${h}`);\n        }), I;\n      });\n    } catch (o) {\n      throw new Error(`An error occurred during signTx: ${o}.`);\n    }\n  }\n  static encryptMnemonic(e, t) {\n    const r = (0,bip39__WEBPACK_IMPORTED_MODULE_1__.mnemonicToEntropy)(e.join(\" \")), i = Ve(r), n = K(i.as_bytes());\n    return i.free(), y.encrypt(n, t);\n  }\n  static encryptPrivateKey(e, t) {\n    const r = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Bip32PrivateKey.from_bech32(e), i = K(r.as_bytes());\n    return r.free(), y.encrypt(i, t);\n  }\n  static encryptSigningKeys(e, t, r) {\n    const i = y.encrypt(e.slice(4), r), n = y.encrypt(t.slice(4), r);\n    return [i, n];\n  }\n  static generateMnemonic(e = 256) {\n    return (0,bip39__WEBPACK_IMPORTED_MODULE_1__.generateMnemonic)(e).split(\" \");\n  }\n  accountContext(e, t, r) {\n    const { paymentKey: i, stakeKey: n } = y.resolveKeys(e, t, this._encryptedSecret), o = r(i, n);\n    return i.free(), n.free(), o;\n  }\n  static decrypt(e, t) {\n    try {\n      return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.decrypt_with_password(S(t), e);\n    } catch {\n      throw new Error(\"The password is incorrect.\");\n    }\n  }\n  static encrypt(e, t) {\n    const r = (0,nanoid__WEBPACK_IMPORTED_MODULE_4__.customAlphabet)(\"0123456789abcdef\"), i = r(64), n = r(24);\n    return _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.encrypt_with_password(S(t), i, n, e);\n  }\n  static resolveAddress(e, t, r, i) {\n    const n = [\n      de(e, r.to_public().hash(), i.to_public().hash()),\n      ge(e, r.to_public().hash()),\n      Ft(e, i.to_public().hash())\n    ].find((o) => o.to_address().to_bech32() === t);\n    if (n !== void 0)\n      return n.to_address();\n    throw new Error(`Address: ${t} doesn't belong to this account.`);\n  }\n  static resolveKeys(e, t, r) {\n    if (typeof r == \"string\") {\n      const o = y.decrypt(r, t);\n      return Ds(o, e);\n    }\n    const i = y.decrypt(r[0], t), n = y.decrypt(r[1], t);\n    return {\n      paymentKey: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PrivateKey.from_hex(i),\n      stakeKey: _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.PrivateKey.from_hex(n)\n    };\n  }\n  static resolveSigners(e, t, r) {\n    const i = (A) => {\n      const c = (_, B = [], m = 0) => {\n        var lt, At, Yt, Gt, Rt;\n        if (_ === void 0 || m >= _.len())\n          return B;\n        const v = _.get(m), b = new Array();\n        switch (v.kind()) {\n          case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CertificateKind.StakeDeregistration: {\n            const w = (lt = v.as_stake_deregistration()) == null ? void 0 : lt.stake_credential(), T = (w == null ? void 0 : w.kind()) === _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredKind.Key ? w.to_keyhash() : void 0;\n            T && b.push(T.to_hex());\n            break;\n          }\n          case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CertificateKind.StakeDelegation: {\n            const w = (At = v.as_stake_delegation()) == null ? void 0 : At.stake_credential(), T = (w == null ? void 0 : w.kind()) === _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredKind.Key ? w.to_keyhash() : void 0;\n            T && b.push(T.to_hex());\n            break;\n          }\n          case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CertificateKind.PoolRegistration: {\n            const w = (Yt = v.as_pool_registration()) == null ? void 0 : Yt.pool_params().pool_owners();\n            b.push(...u(w));\n            break;\n          }\n          case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CertificateKind.PoolRetirement: {\n            const w = (Gt = v.as_pool_retirement()) == null ? void 0 : Gt.pool_keyhash();\n            w && b.push(w.to_hex());\n            break;\n          }\n          case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.CertificateKind.MoveInstantaneousRewardsCert: {\n            const w = (Rt = v.as_move_instantaneous_rewards_cert()) == null ? void 0 : Rt.move_instantaneous_reward().as_to_stake_creds();\n            if (w)\n              for (let T = 0; T < w.len(); T += 1) {\n                const Lt = w.keys().get(T), $t = Lt.kind() === _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredKind.Key ? Lt.to_keyhash() : void 0;\n                $t && b.push($t.to_hex());\n              }\n            break;\n          }\n        }\n        return c(_, [...B, ...b], m + 1);\n      }, I = (_, B = [], m = 0) => {\n        if (_ === void 0 || m >= _.len())\n          return B;\n        const v = _.get(m).index(), b = _.get(m).transaction_id(), lt = t.find((At) => At.input.outputIndex === v && At.input.txHash === b.to_hex()) !== void 0 ? r : \"OUR_PRINCESS_IS_IN_ANOTHER_CASTLE\";\n        return I(_, [...B, lt], m + 1);\n      }, u = (_, B = [], m = 0) => _ === void 0 || m >= _.len() ? B : u(_, [...B, _.get(m).to_hex()], m + 1), h = (_, B = [], m = 0) => {\n        if (_ === void 0 || m >= _.len())\n          return B;\n        const v = _.keys().get(m).payment_cred(), b = v.kind() === _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.StakeCredKind.Key ? v.to_keyhash() : void 0;\n        return h(_, b ? [...B, b.to_hex()] : B, m + 1);\n      }, g = A.certs(), p = A.collateral(), x = A.inputs(), M = A.required_signers(), L = A.withdrawals();\n      return [\n        ...c(g),\n        ...I(p),\n        ...I(x),\n        ...u(M),\n        ...h(L)\n      ];\n    }, n = (A) => {\n      const c = (u, h = []) => {\n        var g, p, x, M;\n        if (u)\n          for (let L = 0; L < u.len(); L += 1) {\n            const _ = u.get(L);\n            switch (_.kind()) {\n              case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptPubkey: {\n                const B = (g = _.as_script_pubkey()) == null ? void 0 : g.addr_keyhash().to_hex();\n                return B ? [...h, B] : h;\n              }\n              case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptAll:\n                return c((p = _.as_script_all()) == null ? void 0 : p.native_scripts(), h);\n              case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptAny:\n                return c((x = _.as_script_any()) == null ? void 0 : x.native_scripts(), h);\n              case _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.NativeScriptKind.ScriptNOfK:\n                return c((M = _.as_script_n_of_k()) == null ? void 0 : M.native_scripts(), h);\n            }\n          }\n        return h;\n      }, I = A.native_scripts();\n      return [\n        ...c(I)\n      ];\n    }, o = W(e);\n    return /* @__PURE__ */ new Set([\n      ...i(o.body()),\n      ...n(o.witness_set())\n    ]);\n  }\n}\nconst U = \"MARI0TIME\";\nclass fr {\n  _fetcher;\n  _submitter;\n  _wallet;\n  constructor(e) {\n    switch (this._fetcher = e.fetcher, this._submitter = e.submitter, e.key.type) {\n      case \"mnemonic\":\n        this._wallet = new y(e.networkId, y.encryptMnemonic(e.key.words, U));\n        break;\n      case \"root\":\n        this._wallet = new y(e.networkId, y.encryptPrivateKey(e.key.bech32, U));\n        break;\n      case \"cli\":\n        this._wallet = new y(e.networkId, y.encryptSigningKeys(e.key.payment, e.key.stake ?? \"f0\".repeat(34), U));\n    }\n  }\n  getPaymentAddress(e = 0) {\n    return this._wallet.getAccount(e, U).enterpriseAddress;\n  }\n  getRewardAddress(e = 0) {\n    return this._wallet.getAccount(e, U).rewardAddress;\n  }\n  getUsedAddress(e = 0) {\n    const t = this._wallet.getAccount(e, U);\n    return H(t.enterpriseAddress);\n  }\n  getUsedCollateral(e = Y.maxCollateralInputs) {\n    throw new Error(\"getUsedCollateral not implemented.\");\n  }\n  async getUsedUTxOs(e = 0) {\n    const t = this._wallet.getAccount(e, U);\n    return (await this._fetcher.fetchAddressUTxOs(t.enterpriseAddress)).map((i) => O(i));\n  }\n  signData(e, t, r = 0) {\n    try {\n      return this._wallet.signData(r, U, e, t);\n    } catch (i) {\n      throw new Error(`[AppWallet] An error occurred during signData: ${i}.`);\n    }\n  }\n  async signTx(e, t = !1, r = 0) {\n    try {\n      const i = this._wallet.getAccount(r, U), n = await this._fetcher.fetchAddressUTxOs(i.enterpriseAddress), o = this._wallet.signTx(r, U, n, e, t), A = W(e), c = A.witness_set(), I = Ge(c, o);\n      return c.set_vkeys(I), _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Transaction[\"new\"](A.body(), c, A.auxiliary_data()).to_hex();\n    } catch (i) {\n      throw new Error(`[AppWallet] An error occurred during signTx: ${i}.`);\n    }\n  }\n  submitTx(e) {\n    return this._submitter.submitTx(e);\n  }\n  static brew(e = 256) {\n    return y.generateMnemonic(e);\n  }\n}\nclass Nt {\n  _walletInstance;\n  constructor(e) {\n    this._walletInstance = e;\n  }\n  static getInstalledWallets() {\n    return window.cardano === void 0 ? [] : Jt.filter((e) => window.cardano[e] !== void 0).map((e) => ({\n      name: window.cardano[e].name,\n      icon: window.cardano[e].icon,\n      version: window.cardano[e].apiVersion\n    }));\n  }\n  static async enable(e) {\n    try {\n      const t = await Nt.resolveInstance(e);\n      if (t !== void 0)\n        return new Nt(t);\n      throw new Error(`Couldn't create an instance of wallet: ${e}`);\n    } catch (t) {\n      throw new Error(`[BrowserWallet] An error occurred during enable: ${t}.`);\n    }\n  }\n  async getBalance() {\n    const e = await this._walletInstance.getBalance();\n    return Te(Ps(e));\n  }\n  async getChangeAddress() {\n    const e = await this._walletInstance.getChangeAddress();\n    return tt(e).to_bech32();\n  }\n  async getCollateral(e = Y.maxCollateralInputs) {\n    return (await this.getUsedCollateral(e)).map((r) => Qt(r));\n  }\n  getNetworkId() {\n    return this._walletInstance.getNetworkId();\n  }\n  async getRewardAddresses() {\n    return (await this._walletInstance.getRewardAddresses()).map((t) => tt(t).to_bech32());\n  }\n  async getUnusedAddresses() {\n    return (await this._walletInstance.getUnusedAddresses()).map((t) => tt(t).to_bech32());\n  }\n  async getUsedAddresses() {\n    return (await this._walletInstance.getUsedAddresses()).map((t) => tt(t).to_bech32());\n  }\n  async getUtxos() {\n    return (await this.getUsedUTxOs()).map((t) => Qt(t));\n  }\n  signData(e, t) {\n    const r = H(e).to_hex();\n    return this._walletInstance.signData(r, S(t));\n  }\n  async signTx(e, t = !1) {\n    try {\n      const r = W(e), i = r.witness_set(), n = await this._walletInstance.signTx(e, t), o = Hs(n).vkeys() ?? _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Vkeywitnesses[\"new\"](), A = Ge(i, o);\n      return i.set_vkeys(A), K(_emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Transaction[\"new\"](r.body(), i, r.auxiliary_data()).to_bytes());\n    } catch (r) {\n      throw new Error(`[BrowserWallet] An error occurred during signTx: ${JSON.stringify(r)}.`);\n    }\n  }\n  submitTx(e) {\n    return this._walletInstance.submitTx(e);\n  }\n  async getUsedAddress() {\n    const e = await this._walletInstance.getUsedAddresses();\n    return tt(e[0]);\n  }\n  async getUsedCollateral(e = Y.maxCollateralInputs) {\n    return (await this._walletInstance.experimental.getCollateral() ?? []).map((r) => he(r)).slice(0, e);\n  }\n  async getUsedUTxOs() {\n    return (await this._walletInstance.getUtxos() ?? []).map((t) => he(t));\n  }\n  async getAssets() {\n    return (await this.getBalance()).filter((t) => t.unit !== \"lovelace\").map((t) => {\n      const r = t.unit.slice(0, N), i = t.unit.slice(N), n = Ys(r, i);\n      return {\n        unit: t.unit,\n        policyId: r,\n        assetName: Vt(i),\n        fingerprint: n,\n        quantity: t.quantity\n      };\n    });\n  }\n  async getLovelace() {\n    const t = (await this.getBalance()).find((r) => r.unit === \"lovelace\");\n    return t !== void 0 ? t.quantity : \"0\";\n  }\n  async getPolicyIdAssets(e) {\n    return (await this.getAssets()).filter((r) => r.policyId === e);\n  }\n  async getPolicyIds() {\n    const e = await this.getBalance();\n    return Array.from(new Set(e.map((t) => t.unit.slice(0, N)))).filter((t) => t !== \"lovelace\");\n  }\n  static resolveInstance(e) {\n    if (window.cardano === void 0)\n      return;\n    const t = Jt.map((r) => window.cardano[r]).filter((r) => r !== void 0).find((r) => r.name.toLowerCase() === e.toLowerCase());\n    return t == null ? void 0 : t.enable();\n  }\n}\nconst Re = \"http://localhost:4000/\", Ls = \"http://localhost:5000/\", $s = `${Re}access`, qs = `${Re}transaction/signtx`;\nclass _r {\n  static getAxiosInstance() {\n    return axios__WEBPACK_IMPORTED_MODULE_0__.create({\n      baseURL: Ls,\n      withCredentials: !0\n    });\n  }\n  static getAppId() {\n    return window.location.hostname;\n  }\n  static async openMinaFrontend(e) {\n    const t = this.getAppId();\n    e.includes(\"?\") ? e = `${e}&appId=${t}` : e = `${e}?appId=${t}`;\n    const r = \"left=100,top=100,width=540,height=540\", i = window.open(e, \"meshWindow\", r);\n    return i || console.error(\"the window did not open\", i), await (async () => new Promise((n) => {\n      window.addEventListener(\"message\", async (o) => {\n        o.data.target == \"minaWallet\" && n(o.data);\n      });\n    }))();\n  }\n  static async get(e, t = {}) {\n    const r = this.getAppId();\n    t = {\n      ...t,\n      appId: r\n    };\n    try {\n      return (await this.getAxiosInstance().get(e, {\n        params: t\n      })).data;\n    } catch {\n      console.error(\"Not logged in\");\n      return;\n    }\n  }\n  static async enable() {\n    return await this.get(\"wallet/getuserwalletsmeta\") === void 0 ? await this.openMinaFrontend($s) : !0;\n  }\n  static async getChangeAddress(e = void 0, t = void 0) {\n    return await this.get(\"wallet/getchangeaddress\", {\n      walletId: e,\n      accountIndex: t\n    });\n  }\n  static async getUtxos(e = void 0, t = void 0) {\n    return await this.get(\"wallet/getutxo\", {\n      walletId: e,\n      accountIndex: t\n    });\n  }\n  static async signTx(e, t = !1) {\n    const r = await this.get(\"wallet/getuserwalletsmeta\");\n    if (console.log(\"userWalletsMeta\", r), r) {\n      const i = await this.openMinaFrontend(`${qs}?unsignedTx=${e}&partialSign=${t}`);\n      if (i instanceof _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Vkeywitnesses) {\n        const n = W(e), o = n.witness_set();\n        o.set_vkeys(i);\n        const A = _emurgo_cardano_serialization_lib_nodejs__WEBPACK_IMPORTED_MODULE_2__.Transaction[\"new\"](n.body(), o, n.auxiliary_data()).to_hex();\n        return console.log(\"signedTx\", A), A;\n      }\n    } else\n      return;\n  }\n}\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQG1lc2hzZGsvY29yZS9kaXN0L2NvcmUuanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQThDO0FBQ2dCO0FBQ3ZDO0FBQ2lEO0FBQzBMO0FBQ2xRO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE1BQU0sNEZBQXdCO0FBQzlCLE1BQU0sNEZBQXdCO0FBQzlCLENBQUM7QUFDRCxRQUFRLDBGQUFzQjtBQUM5QixRQUFRLDBGQUFzQjtBQUM5QixVQUFVLDRGQUF3QjtBQUNsQyxTQUFTLDJGQUF1QjtBQUNoQyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsVUFBVSxrSEFBOEM7QUFDeEQsV0FBVyxpSEFBNkM7QUFDeEQsQ0FBQztBQUNEO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsR0FBRyx5RkFBcUI7QUFDeEIsR0FBRyx5RkFBcUI7QUFDeEIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLHVDQUF1QztBQUNoRSx3REFBd0QscUZBQWlCLHVCQUF1QixxRkFBaUI7QUFDakg7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELG1FQUFtRSx1Q0FBdUMsU0FBUyxxRkFBaUIsdUJBQXVCLHFGQUFpQjtBQUM1SztBQUNBLENBQUMseUNBQXlDLHNCQUFzQixxRkFBaUIsUUFBUTtBQUN6RiwyREFBMkQscUZBQWlCLGVBQWUscUZBQWlCO0FBQzVHO0FBQ0EsQ0FBQyxFQUFFLHFGQUFpQjtBQUNwQjtBQUNBLFlBQVkscUZBQWlCO0FBQzdCLFNBQVMscUZBQWlCO0FBQzFCLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxnQkFBZ0Isc0JBQXNCO0FBQ3ZDO0FBQ0EsWUFBWSxzRkFBYSxZQUFZLHdGQUFhO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxrRkFBVTtBQUNuRjtBQUNBO0FBQ0EsNEJBQTRCLGlGQUFTLENBQUMsb0ZBQWUsQ0FBQyxtRkFBVztBQUNqRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLENBQUM7QUFDRCxZQUFZLGtGQUFNLENBQUMsdUZBQWUsQ0FBQywrRUFBTTtBQUN6Qyw0QkFBNEIsMkZBQW1CLENBQUMscUZBQVEsaUJBQWlCLGlGQUFTLENBQUMsb0ZBQWUsQ0FBQyxtRkFBVyxTQUFTLHFGQUFVLENBQUMsK0VBQVUsb0JBQW9CLGlGQUFTLENBQUMsb0ZBQWUsQ0FBQyxtRkFBVyxTQUFTLHVGQUFZO0FBQzFOLENBQUM7QUFDRCxZQUFZLG9GQUFNLFFBQVEsb0ZBQU07QUFDaEMscUJBQXFCLDJGQUFtQixDQUFDLHFGQUFRLGlCQUFpQixrRkFBVSxhQUFhLHVGQUFZO0FBQ3JHLFlBQVksa0ZBQU0sQ0FBQyw2RkFBTSxhQUFhLDJGQUFNO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMklBQTJJLFNBQVMsUUFBUTtBQUM1SjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGtFQUFrRTtBQUM1RSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsdUJBQXVCO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLE9BQU87QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLGNBQWMsUUFBUTtBQUN0QjtBQUNBLDRHQUE0RyxRQUFRO0FBQ3BIO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0EsY0FBYyxRQUFRO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLFFBQVE7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFdBQVc7QUFDOUI7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGNBQWM7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsV0FBVztBQUNyRDtBQUNBO0FBQ0EsZ0JBQWdCLGVBQWU7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGNBQWM7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixjQUFjO0FBQ2hDLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQjtBQUNBO0FBQ0Esb0JBQW9CLE9BQU87QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixjQUFjO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0EsMENBQTBDLFdBQVc7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQztBQUNBO0FBQ0EsY0FBYyxNQUFNO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IsQ0FBQyxjQUFjLHdGQUFvQixvQkFBb0IsZ0dBQTRCLG9CQUFvQix5RkFBcUIsbUJBQW1CLCtGQUEyQixvQkFBb0IsaUdBQTZCLG9CQUFvQiw2RkFBeUIsb0JBQW9CLDBGQUFzQixvQkFBb0IsMkZBQXVCLHVCQUF1QiwwR0FBc0MsMkJBQTJCLDBGQUFzQixvQkFBb0IsMkZBQXVCLG1CQUFtQiw0RkFBd0Isb0JBQW9CLGdHQUE0QixvQkFBb0IseUdBQXFDLG9CQUFvQixzR0FBa0Msb0JBQW9CLHNGQUFrQixtQkFBbUIseUZBQXFCLGlCQUFpQiw4RkFBMEIsb0JBQW9CLG9HQUFnQyxvQkFBb0IsZ0dBQTRCLG1CQUFtQixNQUFNLG9GQUFvRixNQUFNLGtCQUFrQixNQUFNO0FBQ3hpQztBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdHQUE0QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGdHQUE0QjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLGlHQUE2QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsb0dBQWdDO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMscUdBQWlDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVMsbUdBQStCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLFNBQVM7QUFDL0M7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxjQUFjLDBGQUFtQjtBQUNqQztBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUdBQTZCLENBQUMsc0ZBQWU7QUFDMUQ7QUFDQSxhQUFhLGlHQUE2QixDQUFDLHNGQUFlO0FBQzFEO0FBQ0EsYUFBYSxvR0FBZ0MsQ0FBQyx1RkFBZ0I7QUFDOUQ7QUFDQSxhQUFhLHFHQUFpQyxDQUFDLHFHQUFpQyxDQUFDLHFGQUFpQjtBQUNsRztBQUNBLGFBQWEsc0dBQWtDLENBQUMsdUdBQW1DLENBQUMscUZBQWlCO0FBQ3JHO0FBQ0EsYUFBYSxvR0FBZ0MsQ0FBQyx5RkFBa0I7QUFDaEU7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxjQUFjLHVGQUFnQjtBQUM5QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGFBQWEsMEZBQXNCO0FBQ25DO0FBQ0EsYUFBYSw0RkFBd0IsQ0FBQyxxRkFBaUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsZUFBZSx5RkFBcUI7QUFDcEMsUUFBUTtBQUNSLGtCQUFrQixzRkFBZTtBQUNqQztBQUNBO0FBQ0EsU0FBUyxHQUFHLHdGQUFvQjtBQUNoQyxRQUFRO0FBQ1IsZUFBZSx1R0FBbUMsQ0FBQyw2RkFBc0IsQ0FBQyxxRkFBaUI7QUFDM0Y7QUFDQSxDQUFDO0FBQ0QsWUFBWSxtRkFBWTtBQUN4QjtBQUNBO0FBQ0EsR0FBRztBQUNILENBQUM7QUFDRDtBQUNBLFNBQVMscUZBQWMsV0FBVyxxRkFBaUIsaUNBQWlDLG9GQUFhLENBQUMscUZBQWlCLDJCQUEyQixxRkFBaUI7QUFDL0osQ0FBQztBQUNEO0FBQ0E7QUFDQSx5QkFBeUIsaUZBQVUsbUZBQW1GLGlGQUFVO0FBQ2hJLGFBQWEsZ0dBQTRCLENBQUMsMkZBQW9CO0FBQzlEO0FBQ0E7QUFDQSxhQUFhLGdHQUE0QixDQUFDLDJGQUFvQixTQUFTLDZGQUFzQjtBQUM3RjtBQUNBLGFBQWEsK0ZBQTJCLENBQUMsMEZBQW1CLENBQUMseUZBQWtCO0FBQy9FO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsV0FBVyxpR0FBNkI7QUFDeEM7QUFDQSxTQUFTLGlHQUE2QjtBQUN0QyxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0QsWUFBWSw2RkFBc0IsK0NBQStDLDhGQUF1QjtBQUN4RywwT0FBME8scUdBQThCO0FBQ3hRLENBQUM7QUFDRCwyQ0FBMkMsZ0JBQWdCO0FBQzNELFNBQVMseUZBQWtCLENBQUMscUZBQWlCLEtBQUsscUZBQWlCO0FBQ25FLENBQUMsa0VBQWtFLE1BQU0sZ0NBQWdDLE1BQU07QUFDL0c7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGFBQWE7QUFDckMsOENBQThDLHFGQUFpQjtBQUMvRCxtQkFBbUIsK0JBQStCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Qsc0pBQXNKLHVGQUFnQjtBQUN0SztBQUNBLGNBQWMsbUZBQVk7QUFDMUI7QUFDQSxlQUFlLHNGQUFlLHNCQUFzQixxRkFBaUI7QUFDckUsS0FBSztBQUNMLEdBQUc7QUFDSCxZQUFZLGtGQUFXLENBQUMscUZBQWlCO0FBQ3pDO0FBQ0EsQ0FBQyxvQkFBb0Isd0ZBQWlCLElBQUksa0dBQThCLEtBQUssa0dBQThCLDBCQUEwQix3R0FBb0MsNkJBQTZCLGlHQUE2QixDQUFDLHFGQUFpQjtBQUNyUDtBQUNBLFdBQVcsd0ZBQWlCO0FBQzVCO0FBQ0E7QUFDQSxXQUFXLCtGQUEyQjtBQUN0QyxvREFBb0Qsb0NBQW9DO0FBQ3hGLENBQUMsaUJBQWlCLDhGQUF1QixJQUFJLGtHQUE4QjtBQUMzRTtBQUNBLFdBQVcsbUdBQStCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxtR0FBK0I7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsR0FBRztBQUNILENBQUMsaUJBQWlCLDBGQUFtQixJQUFJLGtHQUE4QjtBQUN2RTtBQUNBLFdBQVcsK0ZBQXdCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLG9IQUFnRDtBQUM3RDtBQUNBO0FBQ0EsK0RBQStELG9DQUFvQztBQUNuRyxDQUFDO0FBQ0QsWUFBWSx5RkFBa0I7QUFDOUIsU0FBUyxvR0FBZ0M7QUFDekMsQ0FBQztBQUNELFlBQVksNEdBQXFDLHVCQUF1QixxRkFBaUIscUNBQXFDLHlGQUFrQixrRUFBa0Usc0ZBQWUsQ0FBQyxxRkFBaUIsd0JBQXdCLHFGQUFpQixxQ0FBcUMscUZBQWlCLGlHQUFpRyxxRkFBaUI7QUFDcGMsU0FBUywrRkFBd0I7QUFDakMsQ0FBQztBQUNELFlBQVksNEZBQXFCO0FBQ2pDLG1DQUFtQyw4RkFBMEI7QUFDN0Q7QUFDQSxHQUFHO0FBQ0gsQ0FBQztBQUNEO0FBQ0EsV0FBVyxxR0FBOEI7QUFDekMsVUFBVSxxR0FBOEI7QUFDeEM7QUFDQSxZQUFZLHNCQUFzQjtBQUNsQyx5QkFBeUIsc0ZBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBLFdBQVc7QUFDWCxDQUFDLGFBQWEsK0NBQWU7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsU0FBUyxzRkFBa0I7QUFDM0IsQ0FBQztBQUNEO0FBQ0E7QUFDQSxvQkFBb0IscUZBQWlCLHlCQUF5QixxRkFBaUIsc0JBQXNCLHFGQUFpQixlQUFlLHFGQUFpQixpQkFBaUIscUZBQWlCO0FBQ3hMO0FBQ0EsMkRBQTJELEVBQUU7QUFDN0QsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsRUFBRTtBQUN6RSxJQUFJO0FBQ0osdUVBQXVFLEVBQUU7QUFDekU7QUFDQSxDQUFDO0FBQ0Q7QUFDQSxTQUFTLDhGQUF1QixJQUFJLHFHQUFpQztBQUNyRSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsRUFBRTtBQUNwRSxJQUFJO0FBQ0osbUVBQW1FLEVBQUU7QUFDckU7QUFDQSxDQUFDLGNBQWMsNkZBQXlCO0FBQ3hDLFlBQVksd0RBQUU7QUFDZDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsV0FBVyxxRkFBaUIseUJBQXlCLHFGQUFpQixzQkFBc0IscUZBQWlCLGlCQUFpQixxRkFBaUI7QUFDL0k7QUFDQSwwREFBMEQsRUFBRTtBQUM1RCxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsRUFBRTtBQUN2RSxJQUFJO0FBQ0osc0VBQXNFLEVBQUU7QUFDeEU7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxFQUFFO0FBQ3ZFLElBQUk7QUFDSixxRUFBcUUsRUFBRTtBQUN2RTtBQUNBLENBQUM7QUFDRDtBQUNBLFNBQVMsc0ZBQWtCO0FBQzNCLENBQUM7QUFDRDtBQUNBO0FBQ0EsWUFBWSxzREFBRTtBQUNkLGNBQWMsRUFBRSxFQUFFLEVBQUU7QUFDcEIsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixhQUFhO0FBQ2pDO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQSxjQUFjLDBGQUFtQjtBQUNqQztBQUNBLFlBQVksMEZBQXNCO0FBQ2xDLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix5Q0FBUztBQUNuQyxrQ0FBa0MsRUFBRSxzQkFBc0IsRUFBRTtBQUM1RCxpQkFBaUI7QUFDakIsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUIsNENBQTRDLEVBQUU7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLEVBQUUseUJBQXlCLEVBQUU7QUFDOUQsY0FBYyxxQkFBcUIsbUNBQW1DLEVBQUUsUUFBUSxFQUFFO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLGdCQUFnQixxQkFBcUIsMkNBQTJDLEVBQUU7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNEJBQTRCLFdBQVcscUJBQXFCLDBDQUEwQyxFQUFFLEVBQUUsRUFBRSxrQkFBa0IsRUFBRTtBQUM5STtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNEJBQTRCLFdBQVcscUJBQXFCLDBDQUEwQyxFQUFFLEVBQUUsRUFBRTtBQUMxSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMscUJBQXFCLDBDQUEwQyxNQUFNLEVBQUUsRUFBRTtBQUNsSDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMscUJBQXFCLDBDQUEwQyx3QkFBd0I7QUFDckc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0NBQW9DLElBQUkscUJBQXFCLHNEQUFzRCxZQUFZO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVkscUJBQXFCLDJDQUEyQyxFQUFFO0FBQzlFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQiwyQ0FBMkMsRUFBRTtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseUNBQVM7QUFDbkMsMEJBQTBCLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRTtBQUMzQyxjQUFjO0FBQ2QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix1Q0FBdUMsSUFBSSxxQkFBcUIsa0RBQWtELEVBQUUsUUFBUSxZQUFZO0FBQzFKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix5Q0FBUztBQUNuQywwQkFBMEIsRUFBRSxtQkFBbUIsRUFBRTtBQUNqRCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELHFCQUFxQixtREFBbUQsdUJBQXVCO0FBQ25KO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQixtREFBbUQsaUJBQWlCO0FBQ3ZHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixxQ0FBcUM7QUFDdkQ7QUFDQSwyQkFBMkIsWUFBWSxFQUFFLGFBQWE7QUFDdEQsK0JBQStCLFdBQVc7QUFDMUMsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsNEJBQTRCLFdBQVcscUJBQXFCLG9FQUFvRSxFQUFFLGVBQWUsRUFBRTtBQUNqSztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyw0QkFBNEIsV0FBVyxxQkFBcUIsNERBQTRELEVBQUUsZUFBZSxFQUFFO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxxQkFBcUIsb0VBQW9FLE1BQU0sZUFBZSxFQUFFO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxxQkFBcUIsMERBQTBELEVBQUU7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0NBQW9DLElBQUkscUJBQXFCLHFEQUFxRCxZQUFZO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix5Q0FBUztBQUNuQyxrQ0FBa0MsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUU7QUFDL0QsaUJBQWlCO0FBQ2pCLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCLDJDQUEyQyxFQUFFO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxFQUFFLHlCQUF5QixFQUFFLEVBQUUsRUFBRTtBQUN6RTtBQUNBLGNBQWMscUJBQXFCLG1DQUFtQyxFQUFFLFVBQVUsRUFBRTtBQUNwRjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixZQUFZLEVBQUUsRUFBRTtBQUNuQztBQUNBLFNBQVM7QUFDVCxPQUFPO0FBQ1AsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsY0FBYyw0QkFBNEIsV0FBVyxxQkFBcUIsMENBQTBDLEVBQUUsRUFBRSxFQUFFLDZCQUE2QixFQUFFO0FBQ3pKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRCQUE0QixXQUFXLHFCQUFxQiwwQ0FBMEMsRUFBRSxFQUFFLEVBQUU7QUFDMUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLHFCQUFxQiwwQ0FBMEMsTUFBTSxFQUFFLEVBQUU7QUFDbEg7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHFCQUFxQiwwQ0FBMEMsRUFBRTtBQUMvRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvQ0FBb0MsSUFBSSxxQkFBcUIsMERBQTBELE9BQU8sSUFBSSxZQUFZO0FBQ2hLO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsMEZBQW1CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxjQUFjLHVGQUFnQjtBQUM5QixXQUFXLGlHQUE2QjtBQUN4QztBQUNBO0FBQ0EsY0FBYywwRkFBbUI7QUFDakM7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLGNBQWMsc0ZBQWU7QUFDN0IsV0FBVyxpR0FBNkI7QUFDeEM7QUFDQTtBQUNBLGNBQWMsMEZBQW1CO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxjQUFjLHNGQUFlO0FBQzdCLFdBQVcsaUdBQTZCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLFFBQVE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQiwwRUFBMEUsd0ZBQWlCLDZHQUE2Ryx5RkFBa0IsNEJBQTRCLDRGQUFxQiwwQkFBMEIsd0ZBQWlCO0FBQ3RUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsdUdBQWdDO0FBQ2hELHNCQUFzQixhQUFhO0FBQ25DO0FBQ0Esb0JBQW9CLG1HQUErQjtBQUNuRDtBQUNBO0FBQ0EsOEZBQThGLHdGQUFpQjtBQUMvRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDBGQUFtQjtBQUNqRSwwQkFBMEIseUdBQXFDLGtEQUFrRCx3RkFBaUI7QUFDbEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sdUVBQXVFLEVBQUU7QUFDekU7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHFGQUFpQixrREFBa0QscUZBQWlCO0FBQ2pJLGlEQUFpRCxzRkFBZSxzQkFBc0Isc0ZBQWtCLENBQUMscUZBQWlCO0FBQzFIO0FBQ0E7QUFDQSxjQUFjLHNHQUFrQyxDQUFDLDRGQUFxQixDQUFDLGtHQUE4QixZQUFZLGdHQUE0QjtBQUM3STtBQUNBO0FBQ0E7QUFDQSxjQUFjLDBHQUFzQyxDQUFDLGdHQUF5QixDQUFDLGtHQUE4QjtBQUM3RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixFQUFFLEVBQUUsRUFBRTtBQUN2QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLG9DQUFvQztBQUN2RyxLQUFLLG1CQUFtQixxRkFBaUIsNkZBQTZGLHFGQUFpQjtBQUN2SixpREFBaUQsc0ZBQWUscUJBQXFCLGdGQUFTLENBQUMscUZBQWlCO0FBQ2hIO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0EsS0FBSyxzQkFBc0IsZ0dBQTRCO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBLGNBQWMsd0dBQW9DLENBQUMsOEZBQXVCLENBQUMsa0dBQThCO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBLGNBQWMsdUdBQW1DLENBQUMsNkZBQXNCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBLGNBQWMscUdBQWlDLENBQUMsMkZBQW9CLENBQUMsZ0dBQTRCO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLHFGQUFpQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHFGQUFpQixtQ0FBbUMsc0dBQWtDO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSw4REFBOEQscUZBQWlCO0FBQy9FO0FBQ0E7QUFDQSwwQ0FBMEMscUZBQWlCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxxRkFBaUI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBNQUEwTSxzSEFBa0QsR0FBRyw0R0FBd0M7QUFDdlM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixlQUFlO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxRQUFRO0FBQ1IsZUFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wseUNBQXlDLHFGQUFpQjtBQUMxRCxLQUFLO0FBQ0w7QUFDQTtBQUNBLGNBQWMsc0dBQStCO0FBQzdDO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixZQUFZO0FBQ2hDO0FBQ0E7QUFDQSxTQUFTLElBQUksMkJBQTJCO0FBQ3hDLGlCQUFpQjtBQUNqQixPQUFPO0FBQ1AsTUFBTTtBQUNOLDREQUE0RCxFQUFFO0FBQzlEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiwwRkFBbUI7QUFDckM7QUFDQTtBQUNBLGtCQUFrQix1RkFBbUI7QUFDckM7QUFDQSxrQkFBa0IsdUZBQW1CO0FBQ3JDO0FBQ0Esd0RBQXdELEVBQUU7QUFDMUQsU0FBUztBQUNULE9BQU87QUFDUCxNQUFNO0FBQ04sMERBQTBELEVBQUU7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsY0FBYyx3REFBRTtBQUNoQjtBQUNBO0FBQ0E7QUFDQSxjQUFjLGlHQUE2QjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsdURBQUU7QUFDYjtBQUNBO0FBQ0EsWUFBWSw2QkFBNkI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLDJGQUF1QjtBQUNwQyxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLHNEQUFFO0FBQ2hCLFdBQVcsMkZBQXVCO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxHQUFHO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseUZBQXFCO0FBQ3ZDLGdCQUFnQix5RkFBcUI7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlHQUFxQztBQUNwRCwySUFBMkksdUZBQW1CO0FBQzlKO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUdBQWlDO0FBQ2hELHVJQUF1SSx1RkFBbUI7QUFDMUo7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzR0FBa0M7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9HQUFnQztBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0hBQThDO0FBQzdEO0FBQ0E7QUFDQSw4QkFBOEIsYUFBYTtBQUMzQywrREFBK0QsdUZBQW1CO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsbUVBQW1FLHVGQUFtQjtBQUN0RjtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0EsbUJBQW1CLG1HQUErQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0dBQTRCO0FBQy9DO0FBQ0EsbUJBQW1CLGdHQUE0QjtBQUMvQztBQUNBLG1CQUFtQixpR0FBNkI7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLHdFQUF3RSxFQUFFO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsd0ZBQWlCO0FBQzlDLE1BQU07QUFDTixzRUFBc0UsRUFBRTtBQUN4RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsRUFBRTtBQUNsRSxNQUFNO0FBQ04sMEVBQTBFLEVBQUU7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2R0FBNkcsMEZBQW1CO0FBQ2hJLCtCQUErQix3RkFBaUI7QUFDaEQsTUFBTTtBQUNOLDBFQUEwRSxrQkFBa0I7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0RUFBNEUsR0FBRyxpQkFBaUIsR0FBRztBQUNuRztBQUNBO0FBQ0EsV0FBVyx5Q0FBUztBQUNwQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLEtBQUs7QUFDTDtBQUNBLDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsR0FBRyxjQUFjLEVBQUUsZUFBZSxFQUFFO0FBQ25GLHVCQUF1QixtRkFBZTtBQUN0QztBQUNBO0FBQ0Esa0JBQWtCLHdGQUFpQjtBQUNuQztBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQWdDRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi9ub2RlX21vZHVsZXMvQG1lc2hzZGsvY29yZS9kaXN0L2NvcmUuanM/ODFjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjdXN0b21BbHBoYWJldCBhcyBDZSB9IGZyb20gXCJuYW5vaWRcIjtcbmltcG9ydCAqIGFzIGEgZnJvbSBcIkBlbXVyZ28vY2FyZGFuby1zZXJpYWxpemF0aW9uLWxpYi1ub2RlanNcIjtcbmltcG9ydCBvdCBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7IG1uZW1vbmljVG9FbnRyb3B5IGFzIHBlLCBnZW5lcmF0ZU1uZW1vbmljIGFzIExlIH0gZnJvbSBcImJpcDM5XCI7XG5pbXBvcnQgeyBDT1NFS2V5IGFzIHdlLCBDT1NFU2lnbjEgYXMgJGUsIExhYmVsIGFzIEosIEludCBhcyBwdCwgQmlnTnVtIGFzIFV0LCBLZXlUeXBlIGFzIHFlLCBBbGdvcml0aG1JZCBhcyB5ZSwgQ0JPUlZhbHVlIGFzIGt0LCBIZWFkZXJNYXAgYXMgcXQsIEhlYWRlcnMgYXMgemUsIFByb3RlY3RlZEhlYWRlck1hcCBhcyBKZSwgQ09TRVNpZ24xQnVpbGRlciBhcyBXZSB9IGZyb20gXCJAZW11cmdvL2NhcmRhbm8tbWVzc2FnZS1zaWduaW5nLW5vZGVqc1wiO1xuY29uc3QgbWUgPSB7XG4gIG1lbTogN2U2LFxuICBzdGVwczogM2U5XG59LCBZID0ge1xuICBlcG9jaDogMCxcbiAgY29pbnNQZXJVVHhPU2l6ZTogXCI0MzEwXCIsXG4gIHByaWNlTWVtOiAwLjA1NzcsXG4gIHByaWNlU3RlcDogNzIxZS03LFxuICBtaW5GZWVBOiA0NCxcbiAgbWluRmVlQjogMTU1MzgxLFxuICBrZXlEZXBvc2l0OiBcIjIwMDAwMDBcIixcbiAgbWF4VHhTaXplOiAxNjM4NCxcbiAgbWF4VmFsU2l6ZTogXCI1MDAwXCIsXG4gIHBvb2xEZXBvc2l0OiBcIjUwMDAwMDAwMFwiLFxuICBtYXhDb2xsYXRlcmFsSW5wdXRzOiAzLFxuICBkZWNlbnRyYWxpc2F0aW9uOiAwLFxuICBtYXhCbG9ja1NpemU6IDk4MzA0LFxuICBjb2xsYXRlcmFsUGVyY2VudDogMTUwLFxuICBtYXhCbG9ja0hlYWRlclNpemU6IDExMDAsXG4gIG1pblBvb2xDb3N0OiBcIjM0MDAwMDAwMFwiLFxuICBtYXhUeEV4TWVtOiBcIjE2MDAwMDAwXCIsXG4gIG1heFR4RXhTdGVwczogXCIxMDAwMDAwMDAwMFwiLFxuICBtYXhCbG9ja0V4TWVtOiBcIjgwMDAwMDAwXCIsXG4gIG1heEJsb2NrRXhTdGVwczogXCI0MDAwMDAwMDAwMFwiXG59LCBidCA9IDIxNDc0ODM2NDgsIG10ID0ge1xuICBWMTogYS5MYW5ndWFnZS5uZXdfcGx1dHVzX3YxKCksXG4gIFYyOiBhLkxhbmd1YWdlLm5ld19wbHV0dXNfdjIoKVxufSwgTiA9IDU2LCBqZSA9IHtcbiAgQ0VSVDogYS5SZWRlZW1lclRhZy5uZXdfY2VydCgpLFxuICBNSU5UOiBhLlJlZGVlbWVyVGFnLm5ld19taW50KCksXG4gIFJFV0FSRDogYS5SZWRlZW1lclRhZy5uZXdfcmV3YXJkKCksXG4gIFNQRU5EOiBhLlJlZGVlbWVyVGFnLm5ld19zcGVuZCgpXG59LCBFdCA9IHtcbiAgdGVzdG5ldDogW1wiNzRcIiwgXCIxNTk4NDAwXCIsIFwiMTU5NTk2NzYxNlwiLCBcIjQzMjAwMFwiXSxcbiAgcHJldmlldzogW1wiMFwiLCBcIjBcIiwgXCIxNjYwMDAzMjAwXCIsIFwiODY0MDBcIl0sXG4gIHByZXByb2Q6IFtcIjBcIiwgXCIwXCIsIFwiMTY1NDA0MTYwMFwiLCBcIjQzMjAwMFwiXSxcbiAgbWFpbm5ldDogW1wiMjA4XCIsIFwiNDQ5MjgwMFwiLCBcIjE1OTYwNTkwOTFcIiwgXCI0MzIwMDBcIl1cbn0sIHp0ID0ge1xuICBBTE9OWk86IGEuVHhCdWlsZGVyQ29uc3RhbnRzLnBsdXR1c19hbG9uem9fY29zdF9tb2RlbHMoKSxcbiAgQkFCQkFHRTogYS5UeEJ1aWxkZXJDb25zdGFudHMucGx1dHVzX3Zhc2lsX2Nvc3RfbW9kZWxzKClcbn0sIFhlID0ge1xuICBBTE9OWk86IHtcbiAgICBWMTogXCJhMTQxMDA1OTAxZDU5ZjFhMDAwMzAyNTkwMDAxMDExYTAwMDYwYmM3MTkwMjZkMDAwMTFhMDAwMjQ5ZjAxOTAzZTgwMDAxMWEwMDAyNDlmMDE4MjAxYTAwMjVjZWE4MTk3MWY3MDQxOTc0NGQxODY0MTk3NDRkMTg2NDE5NzQ0ZDE4NjQxOTc0NGQxODY0MTk3NDRkMTg2NDE5NzQ0ZDE4NjQxODY0MTg2NDE5NzQ0ZDE4NjQxYTAwMDI0OWYwMTgyMDFhMDAwMjQ5ZjAxODIwMWEwMDAyNDlmMDE4MjAxYTAwMDI0OWYwMTkwM2U4MDAwMTFhMDAwMjQ5ZjAxODIwMWEwMDAyNDlmMDE5MDNlODAwMDgxYTAwMDI0MjIwMWEwMDA2N2UyMzE4NzYwMDAxMDExYTAwMDI0OWYwMTkwM2U4MDAwODFhMDAwMjQ5ZjAxYTAwMDFiNzk4MThmNzAxMWEwMDAyNDlmMDE5MjcxMDAxMWEwMDAyMTU1ZTE5MDUyZTAxMTkwM2U4MWEwMDAyNDlmMDE5MDNlODAxMWEwMDAyNDlmMDE4MjAxYTAwMDI0OWYwMTgyMDFhMDAwMjQ5ZjAxODIwMDEwMTFhMDAwMjQ5ZjAwMTFhMDAwMjQ5ZjAwNDFhMDAwMTk0YWYxOGY4MDExYTAwMDE5NGFmMThmODAxMWEwMDAyMzc3YzE5MDU1NjAxMWEwMDAyYmRlYTE5MDFmMTAxMWEwMDAyNDlmMDE4MjAxYTAwMDI0OWYwMTgyMDFhMDAwMjQ5ZjAxODIwMWEwMDAyNDlmMDE4MjAxYTAwMDI0OWYwMTgyMDFhMDAwMjQ5ZjAxODIwMWEwMDAyNDIyMDFhMDAwNjdlMjMxODc2MDAwMTAxMTlmMDRjMTkyYmQyMDAwMTFhMDAwMjQ5ZjAxODIwMWEwMDAyNDIyMDFhMDAwNjdlMjMxODc2MDAwMTAxMWEwMDAyNDIyMDFhMDAwNjdlMjMxODc2MDAwMTAxMWEwMDI1Y2VhODE5NzFmNzA0MDAxYTAwMDE0MWJiMDQxYTAwMDI0OWYwMTkxMzg4MDAwMTFhMDAwMjQ5ZjAxODIwMWEwMDAzMDI1OTAwMDEwMTFhMDAwMjQ5ZjAxODIwMWEwMDAyNDlmMDE4MjAxYTAwMDI0OWYwMTgyMDFhMDAwMjQ5ZjAxODIwMWEwMDAyNDlmMDE4MjAxYTAwMDI0OWYwMTgyMDFhMDAwMjQ5ZjAxODIwMWEwMDMzMGRhNzAxMDFmZlwiXG4gIH0sXG4gIEJBQkJBR0U6IHtcbiAgICBWMTogXCJhMTQxMDA1OTAxYjY5ZjFhMDAwMzIzNjExOTAzMmMwMTAxMTkwM2U4MTkwMjNiMDAwMTE5MDNlODE5NWU3MTA0MDExOTAzZTgxODIwMWEwMDAxY2E3NjE5MjhlYjA0MTk1OWQ4MTg2NDE5NTlkODE4NjQxOTU5ZDgxODY0MTk1OWQ4MTg2NDE5NTlkODE4NjQxOTU5ZDgxODY0MTg2NDE4NjQxOTU5ZDgxODY0MTk0YzUxMTgyMDFhMDAwMmFjZmExODIwMTliNTUxMDQxYTAwMDM2MzE1MTkwMWZmMDAwMTFhMDAwMTVjMzUxODIwMWEwMDA3OTc3NTE5MzZmNDA0MDIxYTAwMDJmZjk0MWEwMDA2ZWE3ODE4ZGMwMDAxMDExOTAzZTgxOTZmZjYwNDAyMWEwMDAzYmQwODFhMDAwMzRlYzUxODNlMDExYTAwMTAyZTBmMTkzMTJhMDExYTAwMDMyZTgwMTkwMWE1MDExYTAwMDJkYTc4MTkwM2U4MTljZjA2MDExYTAwMDEzYTM0MTgyMDE5YThmMTE4MjAxOTAzZTgxODIwMWEwMDAxM2FhYzAxMTllMTQzMDQxOTAzZTgwYTFhMDAwMzAyMTkxODljMDExYTAwMDMwMjE5MTg5YzAxMWEwMDAzMjA3YzE5MDFkOTAxMWEwMDAzMzAwMDE5MDFmZjAxMTljY2YzMTgyMDE5ZmQ0MDE4MjAxOWZmZDUxODIwMTk1ODFlMTgyMDE5NDBiMzE4MjAxYTAwMDEyYWRmMTgyMDFhMDAwMmZmOTQxYTAwMDZlYTc4MThkYzAwMDEwMTFhMDAwMTBmOTIxOTJkYTcwMDAxMTllYWJiMTgyMDFhMDAwMmZmOTQxYTAwMDZlYTc4MThkYzAwMDEwMTFhMDAwMmZmOTQxYTAwMDZlYTc4MThkYzAwMDEwMTFhMDAwYzUwNGUxOTc3MTIwNDFhMDAxZDZhZjYxYTAwMDE0MjViMDQxYTAwMDQwYzY2MDAwNDAwMWEwMDAxNGZhYjE4MjAxYTAwMDMyMzYxMTkwMzJjMDEwMTE5YTBkZTE4MjAxYTAwMDMzZDc2MTgyMDE5NzlmNDE4MjAxOTdmYjgxODIwMTlhOTVkMTgyMDE5N2RmNzE4MjAxOTk1YWExODIwMWEwMDkwNjNiOTE5MDNmZDBhZmZcIixcbiAgICBWMjogXCJhMjAxOThhZjFhMDAwMzIzNjExOTAzMmMwMTAxMTkwM2U4MTkwMjNiMDAwMTE5MDNlODE5NWU3MTA0MDExOTAzZTgxODIwMWEwMDAxY2E3NjE5MjhlYjA0MTk1OWQ4MTg2NDE5NTlkODE4NjQxOTU5ZDgxODY0MTk1OWQ4MTg2NDE5NTlkODE4NjQxOTU5ZDgxODY0MTg2NDE4NjQxOTU5ZDgxODY0MTk0YzUxMTgyMDFhMDAwMmFjZmExODIwMTliNTUxMDQxYTAwMDM2MzE1MTkwMWZmMDAwMTFhMDAwMTVjMzUxODIwMWEwMDA3OTc3NTE5MzZmNDA0MDIxYTAwMDJmZjk0MWEwMDA2ZWE3ODE4ZGMwMDAxMDExOTAzZTgxOTZmZjYwNDAyMWEwMDAzYmQwODFhMDAwMzRlYzUxODNlMDExYTAwMTAyZTBmMTkzMTJhMDExYTAwMDMyZTgwMTkwMWE1MDExYTAwMDJkYTc4MTkwM2U4MTljZjA2MDExYTAwMDEzYTM0MTgyMDE5YThmMTE4MjAxOTAzZTgxODIwMWEwMDAxM2FhYzAxMTllMTQzMDQxOTAzZTgwYTFhMDAwMzAyMTkxODljMDExYTAwMDMwMjE5MTg5YzAxMWEwMDAzMjA3YzE5MDFkOTAxMWEwMDAzMzAwMDE5MDFmZjAxMTljY2YzMTgyMDE5ZmQ0MDE4MjAxOWZmZDUxODIwMTk1ODFlMTgyMDE5NDBiMzE4MjAxYTAwMDEyYWRmMTgyMDFhMDAwMmZmOTQxYTAwMDZlYTc4MThkYzAwMDEwMTFhMDAwMTBmOTIxOTJkYTcwMDAxMTllYWJiMTgyMDFhMDAwMmZmOTQxYTAwMDZlYTc4MThkYzAwMDEwMTFhMDAwMmZmOTQxYTAwMDZlYTc4MThkYzAwMDEwMTFhMDAxMWIyMmMxYTAwMDVmZGRlMDAwMjFhMDAwYzUwNGUxOTc3MTIwNDFhMDAxZDZhZjYxYTAwMDE0MjViMDQxYTAwMDQwYzY2MDAwNDAwMWEwMDAxNGZhYjE4MjAxYTAwMDMyMzYxMTkwMzJjMDEwMTE5YTBkZTE4MjAxYTAwMDMzZDc2MTgyMDE5NzlmNDE4MjAxOTdmYjgxODIwMTlhOTVkMTgyMDE5N2RmNzE4MjAxOTk1YWExODIwMWIwMDAwMDAwNGE4MTdjODAwMWIwMDAwMDAwNGE4MTdjODAwMWEwMDkwNjNiOTE5MDNmZDBhMWIwMDAwMDAwNGE4MTdjODAwMDAxYjAwMDAwMDA0YTgxN2M4MDA0MTAwNTkwMWI2OWYxYTAwMDMyMzYxMTkwMzJjMDEwMTE5MDNlODE5MDIzYjAwMDExOTAzZTgxOTVlNzEwNDAxMTkwM2U4MTgyMDFhMDAwMWNhNzYxOTI4ZWIwNDE5NTlkODE4NjQxOTU5ZDgxODY0MTk1OWQ4MTg2NDE5NTlkODE4NjQxOTU5ZDgxODY0MTk1OWQ4MTg2NDE4NjQxODY0MTk1OWQ4MTg2NDE5NGM1MTE4MjAxYTAwMDJhY2ZhMTgyMDE5YjU1MTA0MWEwMDAzNjMxNTE5MDFmZjAwMDExYTAwMDE1YzM1MTgyMDFhMDAwNzk3NzUxOTM2ZjQwNDAyMWEwMDAyZmY5NDFhMDAwNmVhNzgxOGRjMDAwMTAxMTkwM2U4MTk2ZmY2MDQwMjFhMDAwM2JkMDgxYTAwMDM0ZWM1MTgzZTAxMWEwMDEwMmUwZjE5MzEyYTAxMWEwMDAzMmU4MDE5MDFhNTAxMWEwMDAyZGE3ODE5MDNlODE5Y2YwNjAxMWEwMDAxM2EzNDE4MjAxOWE4ZjExODIwMTkwM2U4MTgyMDFhMDAwMTNhYWMwMTE5ZTE0MzA0MTkwM2U4MGExYTAwMDMwMjE5MTg5YzAxMWEwMDAzMDIxOTE4OWMwMTFhMDAwMzIwN2MxOTAxZDkwMTFhMDAwMzMwMDAxOTAxZmYwMTE5Y2NmMzE4MjAxOWZkNDAxODIwMTlmZmQ1MTgyMDE5NTgxZTE4MjAxOTQwYjMxODIwMWEwMDAxMmFkZjE4MjAxYTAwMDJmZjk0MWEwMDA2ZWE3ODE4ZGMwMDAxMDExYTAwMDEwZjkyMTkyZGE3MDAwMTE5ZWFiYjE4MjAxYTAwMDJmZjk0MWEwMDA2ZWE3ODE4ZGMwMDAxMDExYTAwMDJmZjk0MWEwMDA2ZWE3ODE4ZGMwMDAxMDExYTAwMGM1MDRlMTk3NzEyMDQxYTAwMWQ2YWY2MWEwMDAxNDI1YjA0MWEwMDA0MGM2NjAwMDQwMDFhMDAwMTRmYWIxODIwMWEwMDAzMjM2MTE5MDMyYzAxMDExOWEwZGUxODIwMWEwMDAzM2Q3NjE4MjAxOTc5ZjQxODIwMTk3ZmI4MTgyMDE5YTk1ZDE4MjAxOTdkZjcxODIwMTk5NWFhMTgyMDFhMDA5MDYzYjkxOTAzZmQwYWZmXCJcbiAgfVxufSwgSHQgPSB7XG4gIFthLk5ldHdvcmtJbmZvLnRlc3RuZXQoKS5uZXR3b3JrX2lkKCldOiBcIjhkMThkNzg2ZTkyNzc2YzgyNDYwN2ZkOGUxOTNlYzUzNWM3OWRjNjFlYTI0MDVkZGYzYjA5ZmUzXCIsXG4gIFthLk5ldHdvcmtJbmZvLm1haW5uZXQoKS5uZXR3b3JrX2lkKCldOiBcImYwZmY0OGJiYjdiYmU5ZDU5YTQwZjFjZTkwZTllOWQwZmY1MDAyZWM0OGYyMzJiNDljYTBmYjlhXCJcbn0sIEp0ID0gW1xuICBcImJlZ2luXCIsXG4gIFwiZXRlcm5sXCIsXG4gIFwiZmxpbnRcIixcbiAgXCJuYW1pXCIsXG4gIFwibnVmaVwiLFxuICBcImdlcm93YWxsZXRcIixcbiAgXCJ0eXBob25jaXAzMFwiXG5dLCBaZSA9IChzLCBlLCB0ID0gITEsIHsgbWF4VHhTaXplOiByLCBtaW5GZWVBOiBpLCBtaW5GZWVCOiBuIH0gPSBZKSA9PiB7XG4gIGNvbnN0IG8gPSBlLmZpbHRlcigoaCkgPT4gQmUoaCkgPT09ICExKS5zb3J0KEVlKSwgQSA9IGEuQmlnTnVtLmZyb21fc3RyKFllKHIsIGksIG4pKSwgYyA9IHQgPyBhLkJpZ051bS5mcm9tX3N0cihzKS5jaGVja2VkX2FkZChBKS50b19zdHIoKSA6IHM7XG4gIHJldHVybiBCdChvLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcChbXG4gICAgW1wibG92ZWxhY2VcIiwgY11cbiAgXSkpO1xufSwgdHMgPSAocywgZSwgdCA9ICExLCByID0gWSkgPT4ge1xuICBjb25zdCBpID0gZS5maWx0ZXIoQmUpLnNvcnQoRWUpLCBuID0gcy5nZXQoXCJsb3ZlbGFjZVwiKSA/PyBcIjBcIiwgeyBtYXhUeFNpemU6IG8sIG1pbkZlZUE6IEEsIG1pbkZlZUI6IGMgfSA9IHIsIEkgPSBhLkJpZ051bS5mcm9tX3N0cihZZShvLCBBLCBjKSksIHUgPSB0ID8gYS5CaWdOdW0uZnJvbV9zdHIobikuY2hlY2tlZF9hZGQoSSkudG9fc3RyKCkgOiBuO1xuICByZXR1cm4gcy5zZXQoXCJsb3ZlbGFjZVwiLCB1KSwgQnQoaSwgcyk7XG59LCBlcyA9IChzLCBlKSA9PiBBcnJheS5mcm9tKGUsICh0KSA9PiAoeyB1bml0OiB0WzBdLCBxdWFudGl0eTogYS5CaWdOdW0uZnJvbV9zdHIodFsxXSkgfSkpLmV2ZXJ5KCh0KSA9PiBzLmZpbHRlcigocikgPT4gci5vdXRwdXQuYW1vdW50LmZpbmQoKGkpID0+IGkudW5pdCA9PT0gdC51bml0KSAhPT0gdm9pZCAwKS5yZWR1Y2UoKHIsIGkpID0+IHtcbiAgY29uc3QgbiA9IGkub3V0cHV0LmFtb3VudC5yZWR1Y2UoKG8sIEEpID0+IG8uY2hlY2tlZF9hZGQoYS5CaWdOdW0uZnJvbV9zdHIoQS5xdWFudGl0eSkpLCBhLkJpZ051bS5mcm9tX3N0cihcIjBcIikpO1xuICByZXR1cm4gci5jaGVja2VkX2FkZChuKTtcbn0sIGEuQmlnTnVtLmZyb21fc3RyKFwiMFwiKSkubGVzc190aGFuKHQucXVhbnRpdHkpID09PSAhMSksIEVlID0gKHMsIGUpID0+IHtcbiAgdmFyIGksIG47XG4gIGNvbnN0IHQgPSBhLkJpZ051bS5mcm9tX3N0cigoKGkgPSBzLm91dHB1dC5hbW91bnQuZmluZCgobykgPT4gby51bml0ID09PSBcImxvdmVsYWNlXCIpKSA9PSBudWxsID8gdm9pZCAwIDogaS5xdWFudGl0eSkgPz8gXCIwXCIpO1xuICByZXR1cm4gYS5CaWdOdW0uZnJvbV9zdHIoKChuID0gZS5vdXRwdXQuYW1vdW50LmZpbmQoKG8pID0+IG8udW5pdCA9PT0gXCJsb3ZlbGFjZVwiKSkgPT0gbnVsbCA/IHZvaWQgMCA6IG4ucXVhbnRpdHkpID8/IFwiMFwiKS5jb21wYXJlKHQpO1xufSwgQmUgPSAocykgPT4gcy5vdXRwdXQuYW1vdW50Lmxlbmd0aCA+IDEsIEJ0ID0gKHMsIGUsIHQgPSBbXSkgPT4gcy5sZW5ndGggPT09IDAgfHwgZXModCwgZSkgPyB0IDogc3Moc1swXSwgZSkgPyBCdChzLnNsaWNlKDEpLCBlLCBbLi4udCwgc1swXV0pIDogQnQocy5zbGljZSgxKSwgZSwgdCksIHNzID0gKHMsIGUpID0+IEFycmF5LmZyb20oZS5rZXlzKCkpLnNvbWUoKHQpID0+IHMub3V0cHV0LmFtb3VudC5maW5kKChyKSA9PiByLnVuaXQgPT09IHQpICE9PSB2b2lkIDApLCBycyA9IChzLCBlKSA9PiB7XG4gIGNvbnN0IHQgPSBhcyhlKSwgciA9IG5zKHMsIGUpO1xuICByZXR1cm4ge1xuICAgIGNvc2VLZXk6IEsodC50b19ieXRlcygpKSxcbiAgICBjb3NlU2lnbjE6IEsoci50b19ieXRlcygpKVxuICB9O1xufSwgWHMgPSAocywgZSwgeyBrZXk6IHQsIHNpZ25hdHVyZTogciB9KSA9PiB7XG4gIHZhciBvLCBBO1xuICBjb25zdCBpID0gd2UuZnJvbV9ieXRlcyhmKHQpKSwgbiA9ICRlLmZyb21fYnl0ZXMoZihyKSk7XG4gIGlmICgocyA9PSBudWxsID8gdm9pZCAwIDogcy5sZW5ndGgpID4gMCkge1xuICAgIGNvbnN0IGMgPSBLKG4ucGF5bG9hZCgpID8/IG5ldyBVaW50OEFycmF5KCkpO1xuICAgIGlmIChTKHMpICE9PSBjKVxuICAgICAgcmV0dXJuICExO1xuICB9XG4gIGlmICgoZSA9PSBudWxsID8gdm9pZCAwIDogZS5sZW5ndGgpID4gMCkge1xuICAgIGNvbnN0IEkgPSAobyA9IG4uaGVhZGVycygpLnByb3RlY3RlZCgpLmRlc2VyaWFsaXplZF9oZWFkZXJzKCkuaGVhZGVyKEoubmV3X3RleHQoXCJhZGRyZXNzXCIpKSkgPT0gbnVsbCA/IHZvaWQgMCA6IG8uYXNfYnl0ZXMoKTtcbiAgICBpZiAoSSA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHNpZ25lciBhZGRyZXNzIGluIHNpZ25hdHVyZVwiKTtcbiAgICBjb25zdCB1ID0gKEEgPSBpLmhlYWRlcihKLm5ld19pbnQocHQubmV3X25lZ2F0aXZlKFV0LmZyb21fc3RyKFwiMlwiKSkpKSkgPT0gbnVsbCA/IHZvaWQgMCA6IEEuYXNfYnl0ZXMoKTtcbiAgICBpZiAodSA9PT0gdm9pZCAwKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHNpZ25lciBrZXkgaW4gc2lnbmF0dXJlXCIpO1xuICAgIGNvbnN0IGggPSB0dChLKEkpKSwgZyA9IFVzKEsodSkpO1xuICAgIGlmIChpcyhlLCBoLCBnKSA9PT0gITEpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBjaGVjayBzaWduYXR1cmUgYmVjYXVzZSBvZiBhZGRyZXNzIG1pc21hdGNoXCIpO1xuICAgIGNvbnN0IHAgPSBLcyhLKG4uc2lnbmF0dXJlKCkpKSwgeCA9IG4uc2lnbmVkX2RhdGEoKS50b19ieXRlcygpO1xuICAgIHJldHVybiBnLnZlcmlmeSh4LCBwKTtcbiAgfVxuICByZXR1cm4gITE7XG59LCBpcyA9IChzLCBlLCB0KSA9PiB7XG4gIGlmIChzICE9PSBlLnRvX2JlY2gzMigpKVxuICAgIHJldHVybiAhMTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gSXQocykgPT09IHQuaGFzaCgpLnRvX2hleCgpO1xuICB9IGNhdGNoIHtcbiAgICByZXR1cm4gITE7XG4gIH1cbn0sIGFzID0gKHMpID0+IHtcbiAgY29uc3QgZSA9IHdlLm5ldyhKLmZyb21fa2V5X3R5cGUocWUuT0tQKSk7XG4gIHJldHVybiBlLnNldF9hbGdvcml0aG1faWQoSi5mcm9tX2FsZ29yaXRobV9pZCh5ZS5FZERTQSkpLCBlLnNldF9oZWFkZXIoSi5uZXdfaW50KHB0Lm5ld19uZWdhdGl2ZShVdC5mcm9tX3N0cihcIjFcIikpKSwga3QubmV3X2ludChwdC5uZXdfaTMyKDYpKSksIGUuc2V0X2hlYWRlcihKLm5ld19pbnQocHQubmV3X25lZ2F0aXZlKFV0LmZyb21fc3RyKFwiMlwiKSkpLCBrdC5uZXdfYnl0ZXMocy5rZXkudG9fcHVibGljKCkuYXNfYnl0ZXMoKSkpLCBlO1xufSwgbnMgPSAocywgZSkgPT4ge1xuICBjb25zdCB0ID0gcXQubmV3KCksIHIgPSBxdC5uZXcoKTtcbiAgdC5zZXRfYWxnb3JpdGhtX2lkKEouZnJvbV9hbGdvcml0aG1faWQoeWUuRWREU0EpKSwgdC5zZXRfaGVhZGVyKEoubmV3X3RleHQoXCJhZGRyZXNzXCIpLCBrdC5uZXdfYnl0ZXMoZS5hZGRyZXNzLnRvX2J5dGVzKCkpKTtcbiAgY29uc3QgaSA9IHplLm5ldyhKZS5uZXcodCksIHIpLCBuID0gV2UubmV3KGksIGYocy5wYXlsb2FkKSwgITEpO1xuICBzLmV4dGVybmFsQUFEICE9PSB2b2lkIDAgJiYgbi5zZXRfZXh0ZXJuYWxfYWFkKGYocy5leHRlcm5hbEFBRCkpO1xuICBjb25zdCBvID0gbi5tYWtlX2RhdGFfdG9fc2lnbigpLCBBID0gZS5rZXkuc2lnbihvLnRvX2J5dGVzKCkpO1xuICByZXR1cm4gbi5idWlsZChBLnRvX2J5dGVzKCkpO1xufTtcbnZhciBXdCA9IHR5cGVvZiBnbG9iYWxUaGlzIDwgXCJ1XCIgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyA8IFwidVwiID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCA8IFwidVwiID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgPCBcInVcIiA/IHNlbGYgOiB7fSwgeGUgPSB7fSwgUSA9IHsgZXhwb3J0czoge30gfTtcbkcubm90RXF1YWwgPSBBcztcbkcubm90T2sgPSBjcztcbkcuZXF1YWwgPSBvcztcbkcub2sgPSBHO1xudmFyIFFlID0gRztcbmZ1bmN0aW9uIG9zKHMsIGUsIHQpIHtcbiAgRyhzID09IGUsIHQpO1xufVxuZnVuY3Rpb24gQXMocywgZSwgdCkge1xuICBHKHMgIT0gZSwgdCk7XG59XG5mdW5jdGlvbiBjcyhzLCBlKSB7XG4gIEcoIXMsIGUpO1xufVxuZnVuY3Rpb24gRyhzLCBlKSB7XG4gIGlmICghcylcbiAgICB0aHJvdyBuZXcgRXJyb3IoZSB8fCBcIkFzc2VydGlvbkVycm9yXCIpO1xufVxudmFyIFAgPSB7IGV4cG9ydHM6IHt9IH07XG5mdW5jdGlvbiBJcyhzKSB7XG4gIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IGR5bmFtaWNhbGx5IHJlcXVpcmUgXCInICsgcyArICdcIi4gUGxlYXNlIGNvbmZpZ3VyZSB0aGUgZHluYW1pY1JlcXVpcmVUYXJnZXRzIG9yL2FuZCBpZ25vcmVEeW5hbWljUmVxdWlyZXMgb3B0aW9uIG9mIEByb2xsdXAvcGx1Z2luLWNvbW1vbmpzIGFwcHJvcHJpYXRlbHkgZm9yIHRoaXMgcmVxdWlyZSBjYWxsIHRvIHdvcmsuJyk7XG59XG52YXIgaHMgPSBQdDtcblB0LnN1cHBvcnRlZCA9IHR5cGVvZiBXZWJBc3NlbWJseSA8IFwidVwiO1xuZnVuY3Rpb24gUHQocykge1xuICBpZiAoIVB0LnN1cHBvcnRlZClcbiAgICByZXR1cm4gbnVsbDtcbiAgdmFyIGUgPSBzICYmIHMuaW1wb3J0cywgdCA9IHVzKFwiQUdGemJRRUFBQUFCRUFOZ0FuOS9BR0FEZjM5L0FHQUJmd0FEQlFRQUFRSUNCUVVCQVFyb0J3ZE5CUVp0WlcxdmNua0NBQXhpYkdGclpUSmlYMmx1YVhRQUFBNWliR0ZyWlRKaVgzVndaR0YwWlFBQkRXSnNZV3RsTW1KZlptbHVZV3dBQWhCaWJHRnJaVEppWDJOdmJYQnlaWE56QUFNSzAwQUVsZ01BSUFCQ0FEY0RBQ0FBUVFocVFnQTNBd0FnQUVFUWFrSUFOd01BSUFCQkdHcENBRGNEQUNBQVFTQnFRZ0EzQXdBZ0FFRW9ha0lBTndNQUlBQkJNR3BDQURjREFDQUFRVGhxUWdBM0F3QWdBRUhBQUdwQ0FEY0RBQ0FBUWNnQWFrSUFOd01BSUFCQjBBQnFRZ0EzQXdBZ0FFSFlBR3BDQURjREFDQUFRZUFBYWtJQU53TUFJQUJCNkFCcVFnQTNBd0FnQUVId0FHcENBRGNEQUNBQVFmZ0Fha0lBTndNQUlBQkJnQUZxUW9pUzg1My96UG1FNmdCQkFDa0RBSVUzQXdBZ0FFR0lBV3BDdTg2cXB0alE2N083ZjBFSUtRTUFoVGNEQUNBQVFaQUJha0tyOE5QMHIrNjh0enhCRUNrREFJVTNBd0FnQUVHWUFXcEM4ZTMwK0tXbi9hZWxmMEVZS1FNQWhUY0RBQ0FBUWFBQmFrTFJoWnJ2K3MrVWg5RUFRU0FwQXdDRk53TUFJQUJCcUFGcVFwL1krZG5Da2RxQ20zOUJLQ2tEQUlVM0F3QWdBRUd3QVdwQzYvcUcycisxOXNFZlFUQXBBd0NGTndNQUlBQkJ1QUZxUXZuQytKdVJvN1B3MndCQk9Da0RBSVUzQXdBZ0FFSEFBV3BDQURjREFDQUFRY2dCYWtJQU53TUFJQUJCMEFGcVFnQTNBd0FMYlFFRGZ5QUFRY0FCYWlFRElBQkJ5QUZxSVFRZ0JDa0RBS2NoQlFKQUEwQWdBU0FDUmcwQklBVkJnQUZHQkVBZ0F5QURLUU1BSUFXdGZEY0RBRUVBSVFVZ0FCQURDeUFBSUFWcUlBRXRBQUE2QUFBZ0JVRUJhaUVGSUFGQkFXb2hBUXdBQ3dzZ0JDQUZyVGNEQUF0a0FRTi9JQUJCd0FGcUlRRWdBRUhJQVdvaEFpQUJJQUVwQXdBZ0Fpa0RBSHczQXdBZ0FFSFFBV3BDZnpjREFDQUNLUU1BcHlFREFrQURRQ0FEUVlBQlJnMEJJQUFnQTJwQkFEb0FBQ0FEUVFGcUlRTU1BQXNMSUFJZ0E2MDNBd0FnQUJBREMrVTdBaUIrQ1g4Z0FFR0FBV29oSVNBQVFZZ0JhaUVpSUFCQmtBRnFJU01nQUVHWUFXb2hKQ0FBUWFBQmFpRWxJQUJCcUFGcUlTWWdBRUd3QVdvaEp5QUFRYmdCYWlFb0lDRXBBd0FoQVNBaUtRTUFJUUlnSXlrREFDRURJQ1FwQXdBaEJDQWxLUU1BSVFVZ0ppa0RBQ0VHSUNjcEF3QWhCeUFvS1FNQUlRaENpSkx6bmYvTStZVHFBQ0VKUXJ2T3FxYlkwT3V6dTM4aENrS3I4TlAwcis2OHR6d2hDMEx4N2ZUNHBhZjlwNlYvSVF4QzBZV2E3L3JQbElmUkFDRU5RcC9ZK2RuQ2tkcUNtMzhoRGtMcitvYmF2N1gyd1I4aEQwTDV3dmlia2FPejhOc0FJUkFnQUNrREFDRVJJQUJCQ0dvcEF3QWhFaUFBUVJCcUtRTUFJUk1nQUVFWWFpa0RBQ0VVSUFCQklHb3BBd0FoRlNBQVFTaHFLUU1BSVJZZ0FFRXdhaWtEQUNFWElBQkJPR29wQXdBaEdDQUFRY0FBYWlrREFDRVpJQUJCeUFCcUtRTUFJUm9nQUVIUUFHb3BBd0FoR3lBQVFkZ0FhaWtEQUNFY0lBQkI0QUJxS1FNQUlSMGdBRUhvQUdvcEF3QWhIaUFBUWZBQWFpa0RBQ0VmSUFCQitBQnFLUU1BSVNBZ0RTQUFRY0FCYWlrREFJVWhEU0FQSUFCQjBBRnFLUU1BaFNFUElBRWdCU0FSZkh3aEFTQU5JQUdGUWlDS0lRMGdDU0FOZkNFSklBVWdDWVZDR0lvaEJTQUJJQVVnRW54OElRRWdEU0FCaFVJUWlpRU5JQWtnRFh3aENTQUZJQW1GUWorS0lRVWdBaUFHSUJOOGZDRUNJQTRnQW9WQ0lJb2hEaUFLSUE1OElRb2dCaUFLaFVJWWlpRUdJQUlnQmlBVWZId2hBaUFPSUFLRlFoQ0tJUTRnQ2lBT2ZDRUtJQVlnQ29WQ1A0b2hCaUFESUFjZ0ZYeDhJUU1nRHlBRGhVSWdpaUVQSUFzZ0Qzd2hDeUFISUF1RlFoaUtJUWNnQXlBSElCWjhmQ0VESUE4Z0E0VkNFSW9oRHlBTElBOThJUXNnQnlBTGhVSS9paUVISUFRZ0NDQVhmSHdoQkNBUUlBU0ZRaUNLSVJBZ0RDQVFmQ0VNSUFnZ0RJVkNHSW9oQ0NBRUlBZ2dHSHg4SVFRZ0VDQUVoVUlRaWlFUUlBd2dFSHdoRENBSUlBeUZRaitLSVFnZ0FTQUdJQmw4ZkNFQklCQWdBWVZDSUlvaEVDQUxJQkI4SVFzZ0JpQUxoVUlZaWlFR0lBRWdCaUFhZkh3aEFTQVFJQUdGUWhDS0lSQWdDeUFRZkNFTElBWWdDNFZDUDRvaEJpQUNJQWNnRzN4OElRSWdEU0FDaFVJZ2lpRU5JQXdnRFh3aERDQUhJQXlGUWhpS0lRY2dBaUFISUJ4OGZDRUNJQTBnQW9WQ0VJb2hEU0FNSUExOElRd2dCeUFNaFVJL2lpRUhJQU1nQ0NBZGZId2hBeUFPSUFPRlFpQ0tJUTRnQ1NBT2ZDRUpJQWdnQ1lWQ0dJb2hDQ0FESUFnZ0hueDhJUU1nRGlBRGhVSVFpaUVPSUFrZ0Rud2hDU0FJSUFtRlFqK0tJUWdnQkNBRklCOThmQ0VFSUE4Z0JJVkNJSW9oRHlBS0lBOThJUW9nQlNBS2hVSVlpaUVGSUFRZ0JTQWdmSHdoQkNBUElBU0ZRaENLSVE4Z0NpQVBmQ0VLSUFVZ0NvVkNQNG9oQlNBQklBVWdIM3g4SVFFZ0RTQUJoVUlnaWlFTklBa2dEWHdoQ1NBRklBbUZRaGlLSVFVZ0FTQUZJQnQ4ZkNFQklBMGdBWVZDRUlvaERTQUpJQTE4SVFrZ0JTQUpoVUkvaWlFRklBSWdCaUFWZkh3aEFpQU9JQUtGUWlDS0lRNGdDaUFPZkNFS0lBWWdDb1ZDR0lvaEJpQUNJQVlnR1h4OElRSWdEaUFDaFVJUWlpRU9JQW9nRG53aENpQUdJQXFGUWorS0lRWWdBeUFISUJwOGZDRURJQThnQTRWQ0lJb2hEeUFMSUE5OElRc2dCeUFMaFVJWWlpRUhJQU1nQnlBZ2ZId2hBeUFQSUFPRlFoQ0tJUThnQ3lBUGZDRUxJQWNnQzRWQ1A0b2hCeUFFSUFnZ0hueDhJUVFnRUNBRWhVSWdpaUVRSUF3Z0VId2hEQ0FJSUF5RlFoaUtJUWdnQkNBSUlCZDhmQ0VFSUJBZ0JJVkNFSW9oRUNBTUlCQjhJUXdnQ0NBTWhVSS9paUVJSUFFZ0JpQVNmSHdoQVNBUUlBR0ZRaUNLSVJBZ0N5QVFmQ0VMSUFZZ0M0VkNHSW9oQmlBQklBWWdIWHg4SVFFZ0VDQUJoVUlRaWlFUUlBc2dFSHdoQ3lBR0lBdUZRaitLSVFZZ0FpQUhJQkY4ZkNFQ0lBMGdBb1ZDSUlvaERTQU1JQTE4SVF3Z0J5QU1oVUlZaWlFSElBSWdCeUFUZkh3aEFpQU5JQUtGUWhDS0lRMGdEQ0FOZkNFTUlBY2dESVZDUDRvaEJ5QURJQWdnSEh4OElRTWdEaUFEaFVJZ2lpRU9JQWtnRG53aENTQUlJQW1GUWhpS0lRZ2dBeUFJSUJoOGZDRURJQTRnQTRWQ0VJb2hEaUFKSUE1OElRa2dDQ0FKaFVJL2lpRUlJQVFnQlNBV2ZId2hCQ0FQSUFTRlFpQ0tJUThnQ2lBUGZDRUtJQVVnQ29WQ0dJb2hCU0FFSUFVZ0ZIeDhJUVFnRHlBRWhVSVFpaUVQSUFvZ0Qzd2hDaUFGSUFxRlFqK0tJUVVnQVNBRklCeDhmQ0VCSUEwZ0FZVkNJSW9oRFNBSklBMThJUWtnQlNBSmhVSVlpaUVGSUFFZ0JTQVpmSHdoQVNBTklBR0ZRaENLSVEwZ0NTQU5mQ0VKSUFVZ0NZVkNQNG9oQlNBQ0lBWWdIWHg4SVFJZ0RpQUNoVUlnaWlFT0lBb2dEbndoQ2lBR0lBcUZRaGlLSVFZZ0FpQUdJQkY4ZkNFQ0lBNGdBb1ZDRUlvaERpQUtJQTU4SVFvZ0JpQUtoVUkvaWlFR0lBTWdCeUFXZkh3aEF5QVBJQU9GUWlDS0lROGdDeUFQZkNFTElBY2dDNFZDR0lvaEJ5QURJQWNnRTN4OElRTWdEeUFEaFVJUWlpRVBJQXNnRDN3aEN5QUhJQXVGUWorS0lRY2dCQ0FJSUNCOGZDRUVJQkFnQklWQ0lJb2hFQ0FNSUJCOElRd2dDQ0FNaFVJWWlpRUlJQVFnQ0NBZWZId2hCQ0FRSUFTRlFoQ0tJUkFnRENBUWZDRU1JQWdnRElWQ1A0b2hDQ0FCSUFZZ0czeDhJUUVnRUNBQmhVSWdpaUVRSUFzZ0VId2hDeUFHSUF1RlFoaUtJUVlnQVNBR0lCOThmQ0VCSUJBZ0FZVkNFSW9oRUNBTElCQjhJUXNnQmlBTGhVSS9paUVHSUFJZ0J5QVVmSHdoQWlBTklBS0ZRaUNLSVEwZ0RDQU5mQ0VNSUFjZ0RJVkNHSW9oQnlBQ0lBY2dGM3g4SVFJZ0RTQUNoVUlRaWlFTklBd2dEWHdoRENBSElBeUZRaitLSVFjZ0F5QUlJQmg4ZkNFRElBNGdBNFZDSUlvaERpQUpJQTU4SVFrZ0NDQUpoVUlZaWlFSUlBTWdDQ0FTZkh3aEF5QU9JQU9GUWhDS0lRNGdDU0FPZkNFSklBZ2dDWVZDUDRvaENDQUVJQVVnR254OElRUWdEeUFFaFVJZ2lpRVBJQW9nRDN3aENpQUZJQXFGUWhpS0lRVWdCQ0FGSUJWOGZDRUVJQThnQklWQ0VJb2hEeUFLSUE5OElRb2dCU0FLaFVJL2lpRUZJQUVnQlNBWWZId2hBU0FOSUFHRlFpQ0tJUTBnQ1NBTmZDRUpJQVVnQ1lWQ0dJb2hCU0FCSUFVZ0dueDhJUUVnRFNBQmhVSVFpaUVOSUFrZ0RYd2hDU0FGSUFtRlFqK0tJUVVnQWlBR0lCUjhmQ0VDSUE0Z0FvVkNJSW9oRGlBS0lBNThJUW9nQmlBS2hVSVlpaUVHSUFJZ0JpQVNmSHdoQWlBT0lBS0ZRaENLSVE0Z0NpQU9mQ0VLSUFZZ0NvVkNQNG9oQmlBRElBY2dIbng4SVFNZ0R5QURoVUlnaWlFUElBc2dEM3doQ3lBSElBdUZRaGlLSVFjZ0F5QUhJQjE4ZkNFRElBOGdBNFZDRUlvaER5QUxJQTk4SVFzZ0J5QUxoVUkvaWlFSElBUWdDQ0FjZkh3aEJDQVFJQVNGUWlDS0lSQWdEQ0FRZkNFTUlBZ2dESVZDR0lvaENDQUVJQWdnSDN4OElRUWdFQ0FFaFVJUWlpRVFJQXdnRUh3aERDQUlJQXlGUWorS0lRZ2dBU0FHSUJOOGZDRUJJQkFnQVlWQ0lJb2hFQ0FMSUJCOElRc2dCaUFMaFVJWWlpRUdJQUVnQmlBWGZId2hBU0FRSUFHRlFoQ0tJUkFnQ3lBUWZDRUxJQVlnQzRWQ1A0b2hCaUFDSUFjZ0ZueDhJUUlnRFNBQ2hVSWdpaUVOSUF3Z0RYd2hEQ0FISUF5RlFoaUtJUWNnQWlBSElCdDhmQ0VDSUEwZ0FvVkNFSW9oRFNBTUlBMThJUXdnQnlBTWhVSS9paUVISUFNZ0NDQVZmSHdoQXlBT0lBT0ZRaUNLSVE0Z0NTQU9mQ0VKSUFnZ0NZVkNHSW9oQ0NBRElBZ2dFWHg4SVFNZ0RpQURoVUlRaWlFT0lBa2dEbndoQ1NBSUlBbUZRaitLSVFnZ0JDQUZJQ0I4ZkNFRUlBOGdCSVZDSUlvaER5QUtJQTk4SVFvZ0JTQUtoVUlZaWlFRklBUWdCU0FaZkh3aEJDQVBJQVNGUWhDS0lROGdDaUFQZkNFS0lBVWdDb1ZDUDRvaEJTQUJJQVVnR254OElRRWdEU0FCaFVJZ2lpRU5JQWtnRFh3aENTQUZJQW1GUWhpS0lRVWdBU0FGSUJGOGZDRUJJQTBnQVlWQ0VJb2hEU0FKSUExOElRa2dCU0FKaFVJL2lpRUZJQUlnQmlBV2ZId2hBaUFPSUFLRlFpQ0tJUTRnQ2lBT2ZDRUtJQVlnQ29WQ0dJb2hCaUFDSUFZZ0dIeDhJUUlnRGlBQ2hVSVFpaUVPSUFvZ0Rud2hDaUFHSUFxRlFqK0tJUVlnQXlBSElCTjhmQ0VESUE4Z0E0VkNJSW9oRHlBTElBOThJUXNnQnlBTGhVSVlpaUVISUFNZ0J5QVZmSHdoQXlBUElBT0ZRaENLSVE4Z0N5QVBmQ0VMSUFjZ0M0VkNQNG9oQnlBRUlBZ2dHM3g4SVFRZ0VDQUVoVUlnaWlFUUlBd2dFSHdoRENBSUlBeUZRaGlLSVFnZ0JDQUlJQ0I4ZkNFRUlCQWdCSVZDRUlvaEVDQU1JQkI4SVF3Z0NDQU1oVUkvaWlFSUlBRWdCaUFmZkh3aEFTQVFJQUdGUWlDS0lSQWdDeUFRZkNFTElBWWdDNFZDR0lvaEJpQUJJQVlnRW54OElRRWdFQ0FCaFVJUWlpRVFJQXNnRUh3aEN5QUdJQXVGUWorS0lRWWdBaUFISUJ4OGZDRUNJQTBnQW9WQ0lJb2hEU0FNSUExOElRd2dCeUFNaFVJWWlpRUhJQUlnQnlBZGZId2hBaUFOSUFLRlFoQ0tJUTBnRENBTmZDRU1JQWNnRElWQ1A0b2hCeUFESUFnZ0YzeDhJUU1nRGlBRGhVSWdpaUVPSUFrZ0Rud2hDU0FJSUFtRlFoaUtJUWdnQXlBSUlCbDhmQ0VESUE0Z0E0VkNFSW9oRGlBSklBNThJUWtnQ0NBSmhVSS9paUVJSUFRZ0JTQVVmSHdoQkNBUElBU0ZRaUNLSVE4Z0NpQVBmQ0VLSUFVZ0NvVkNHSW9oQlNBRUlBVWdIbng4SVFRZ0R5QUVoVUlRaWlFUElBb2dEM3doQ2lBRklBcUZRaitLSVFVZ0FTQUZJQk44ZkNFQklBMGdBWVZDSUlvaERTQUpJQTE4SVFrZ0JTQUpoVUlZaWlFRklBRWdCU0FkZkh3aEFTQU5JQUdGUWhDS0lRMGdDU0FOZkNFSklBVWdDWVZDUDRvaEJTQUNJQVlnRjN4OElRSWdEaUFDaFVJZ2lpRU9JQW9nRG53aENpQUdJQXFGUWhpS0lRWWdBaUFHSUJ0OGZDRUNJQTRnQW9WQ0VJb2hEaUFLSUE1OElRb2dCaUFLaFVJL2lpRUdJQU1nQnlBUmZId2hBeUFQSUFPRlFpQ0tJUThnQ3lBUGZDRUxJQWNnQzRWQ0dJb2hCeUFESUFjZ0hIeDhJUU1nRHlBRGhVSVFpaUVQSUFzZ0Qzd2hDeUFISUF1RlFqK0tJUWNnQkNBSUlCbDhmQ0VFSUJBZ0JJVkNJSW9oRUNBTUlCQjhJUXdnQ0NBTWhVSVlpaUVJSUFRZ0NDQVVmSHdoQkNBUUlBU0ZRaENLSVJBZ0RDQVFmQ0VNSUFnZ0RJVkNQNG9oQ0NBQklBWWdGWHg4SVFFZ0VDQUJoVUlnaWlFUUlBc2dFSHdoQ3lBR0lBdUZRaGlLSVFZZ0FTQUdJQjU4ZkNFQklCQWdBWVZDRUlvaEVDQUxJQkI4SVFzZ0JpQUxoVUkvaWlFR0lBSWdCeUFZZkh3aEFpQU5JQUtGUWlDS0lRMGdEQ0FOZkNFTUlBY2dESVZDR0lvaEJ5QUNJQWNnRm54OElRSWdEU0FDaFVJUWlpRU5JQXdnRFh3aERDQUhJQXlGUWorS0lRY2dBeUFJSUNCOGZDRURJQTRnQTRWQ0lJb2hEaUFKSUE1OElRa2dDQ0FKaFVJWWlpRUlJQU1nQ0NBZmZId2hBeUFPSUFPRlFoQ0tJUTRnQ1NBT2ZDRUpJQWdnQ1lWQ1A0b2hDQ0FFSUFVZ0VueDhJUVFnRHlBRWhVSWdpaUVQSUFvZ0Qzd2hDaUFGSUFxRlFoaUtJUVVnQkNBRklCcDhmQ0VFSUE4Z0JJVkNFSW9oRHlBS0lBOThJUW9nQlNBS2hVSS9paUVGSUFFZ0JTQWRmSHdoQVNBTklBR0ZRaUNLSVEwZ0NTQU5mQ0VKSUFVZ0NZVkNHSW9oQlNBQklBVWdGbng4SVFFZ0RTQUJoVUlRaWlFTklBa2dEWHdoQ1NBRklBbUZRaitLSVFVZ0FpQUdJQko4ZkNFQ0lBNGdBb1ZDSUlvaERpQUtJQTU4SVFvZ0JpQUtoVUlZaWlFR0lBSWdCaUFnZkh3aEFpQU9JQUtGUWhDS0lRNGdDaUFPZkNFS0lBWWdDb1ZDUDRvaEJpQURJQWNnSDN4OElRTWdEeUFEaFVJZ2lpRVBJQXNnRDN3aEN5QUhJQXVGUWhpS0lRY2dBeUFISUI1OGZDRURJQThnQTRWQ0VJb2hEeUFMSUE5OElRc2dCeUFMaFVJL2lpRUhJQVFnQ0NBVmZId2hCQ0FRSUFTRlFpQ0tJUkFnRENBUWZDRU1JQWdnRElWQ0dJb2hDQ0FFSUFnZ0czeDhJUVFnRUNBRWhVSVFpaUVRSUF3Z0VId2hEQ0FJSUF5RlFqK0tJUWdnQVNBR0lCRjhmQ0VCSUJBZ0FZVkNJSW9oRUNBTElCQjhJUXNnQmlBTGhVSVlpaUVHSUFFZ0JpQVlmSHdoQVNBUUlBR0ZRaENLSVJBZ0N5QVFmQ0VMSUFZZ0M0VkNQNG9oQmlBQ0lBY2dGM3g4SVFJZ0RTQUNoVUlnaWlFTklBd2dEWHdoRENBSElBeUZRaGlLSVFjZ0FpQUhJQlI4ZkNFQ0lBMGdBb1ZDRUlvaERTQU1JQTE4SVF3Z0J5QU1oVUkvaWlFSElBTWdDQ0FhZkh3aEF5QU9JQU9GUWlDS0lRNGdDU0FPZkNFSklBZ2dDWVZDR0lvaENDQURJQWdnRTN4OElRTWdEaUFEaFVJUWlpRU9JQWtnRG53aENTQUlJQW1GUWorS0lRZ2dCQ0FGSUJsOGZDRUVJQThnQklWQ0lJb2hEeUFLSUE5OElRb2dCU0FLaFVJWWlpRUZJQVFnQlNBY2ZId2hCQ0FQSUFTRlFoQ0tJUThnQ2lBUGZDRUtJQVVnQ29WQ1A0b2hCU0FCSUFVZ0hueDhJUUVnRFNBQmhVSWdpaUVOSUFrZ0RYd2hDU0FGSUFtRlFoaUtJUVVnQVNBRklCeDhmQ0VCSUEwZ0FZVkNFSW9oRFNBSklBMThJUWtnQlNBSmhVSS9paUVGSUFJZ0JpQVlmSHdoQWlBT0lBS0ZRaUNLSVE0Z0NpQU9mQ0VLSUFZZ0NvVkNHSW9oQmlBQ0lBWWdIM3g4SVFJZ0RpQUNoVUlRaWlFT0lBb2dEbndoQ2lBR0lBcUZRaitLSVFZZ0F5QUhJQjE4ZkNFRElBOGdBNFZDSUlvaER5QUxJQTk4SVFzZ0J5QUxoVUlZaWlFSElBTWdCeUFTZkh3aEF5QVBJQU9GUWhDS0lROGdDeUFQZkNFTElBY2dDNFZDUDRvaEJ5QUVJQWdnRkh4OElRUWdFQ0FFaFVJZ2lpRVFJQXdnRUh3aERDQUlJQXlGUWhpS0lRZ2dCQ0FJSUJwOGZDRUVJQkFnQklWQ0VJb2hFQ0FNSUJCOElRd2dDQ0FNaFVJL2lpRUlJQUVnQmlBV2ZId2hBU0FRSUFHRlFpQ0tJUkFnQ3lBUWZDRUxJQVlnQzRWQ0dJb2hCaUFCSUFZZ0VYeDhJUUVnRUNBQmhVSVFpaUVRSUFzZ0VId2hDeUFHSUF1RlFqK0tJUVlnQWlBSElDQjhmQ0VDSUEwZ0FvVkNJSW9oRFNBTUlBMThJUXdnQnlBTWhVSVlpaUVISUFJZ0J5QVZmSHdoQWlBTklBS0ZRaENLSVEwZ0RDQU5mQ0VNSUFjZ0RJVkNQNG9oQnlBRElBZ2dHWHg4SVFNZ0RpQURoVUlnaWlFT0lBa2dEbndoQ1NBSUlBbUZRaGlLSVFnZ0F5QUlJQmQ4ZkNFRElBNGdBNFZDRUlvaERpQUpJQTU4SVFrZ0NDQUpoVUkvaWlFSUlBUWdCU0FUZkh3aEJDQVBJQVNGUWlDS0lROGdDaUFQZkNFS0lBVWdDb1ZDR0lvaEJTQUVJQVVnRzN4OElRUWdEeUFFaFVJUWlpRVBJQW9nRDN3aENpQUZJQXFGUWorS0lRVWdBU0FGSUJkOGZDRUJJQTBnQVlWQ0lJb2hEU0FKSUExOElRa2dCU0FKaFVJWWlpRUZJQUVnQlNBZ2ZId2hBU0FOSUFHRlFoQ0tJUTBnQ1NBTmZDRUpJQVVnQ1lWQ1A0b2hCU0FDSUFZZ0gzeDhJUUlnRGlBQ2hVSWdpaUVPSUFvZ0Rud2hDaUFHSUFxRlFoaUtJUVlnQWlBR0lCcDhmQ0VDSUE0Z0FvVkNFSW9oRGlBS0lBNThJUW9nQmlBS2hVSS9paUVHSUFNZ0J5QWNmSHdoQXlBUElBT0ZRaUNLSVE4Z0N5QVBmQ0VMSUFjZ0M0VkNHSW9oQnlBRElBY2dGSHg4SVFNZ0R5QURoVUlRaWlFUElBc2dEM3doQ3lBSElBdUZRaitLSVFjZ0JDQUlJQkY4ZkNFRUlCQWdCSVZDSUlvaEVDQU1JQkI4SVF3Z0NDQU1oVUlZaWlFSUlBUWdDQ0FaZkh3aEJDQVFJQVNGUWhDS0lSQWdEQ0FRZkNFTUlBZ2dESVZDUDRvaENDQUJJQVlnSFh4OElRRWdFQ0FCaFVJZ2lpRVFJQXNnRUh3aEN5QUdJQXVGUWhpS0lRWWdBU0FHSUJOOGZDRUJJQkFnQVlWQ0VJb2hFQ0FMSUJCOElRc2dCaUFMaFVJL2lpRUdJQUlnQnlBZWZId2hBaUFOSUFLRlFpQ0tJUTBnRENBTmZDRU1JQWNnRElWQ0dJb2hCeUFDSUFjZ0dIeDhJUUlnRFNBQ2hVSVFpaUVOSUF3Z0RYd2hEQ0FISUF5RlFqK0tJUWNnQXlBSUlCSjhmQ0VESUE0Z0E0VkNJSW9oRGlBSklBNThJUWtnQ0NBSmhVSVlpaUVJSUFNZ0NDQVZmSHdoQXlBT0lBT0ZRaENLSVE0Z0NTQU9mQ0VKSUFnZ0NZVkNQNG9oQ0NBRUlBVWdHM3g4SVFRZ0R5QUVoVUlnaWlFUElBb2dEM3doQ2lBRklBcUZRaGlLSVFVZ0JDQUZJQlo4ZkNFRUlBOGdCSVZDRUlvaER5QUtJQTk4SVFvZ0JTQUtoVUkvaWlFRklBRWdCU0FiZkh3aEFTQU5JQUdGUWlDS0lRMGdDU0FOZkNFSklBVWdDWVZDR0lvaEJTQUJJQVVnRTN4OElRRWdEU0FCaFVJUWlpRU5JQWtnRFh3aENTQUZJQW1GUWorS0lRVWdBaUFHSUJsOGZDRUNJQTRnQW9WQ0lJb2hEaUFLSUE1OElRb2dCaUFLaFVJWWlpRUdJQUlnQmlBVmZId2hBaUFPSUFLRlFoQ0tJUTRnQ2lBT2ZDRUtJQVlnQ29WQ1A0b2hCaUFESUFjZ0dIeDhJUU1nRHlBRGhVSWdpaUVQSUFzZ0Qzd2hDeUFISUF1RlFoaUtJUWNnQXlBSElCZDhmQ0VESUE4Z0E0VkNFSW9oRHlBTElBOThJUXNnQnlBTGhVSS9paUVISUFRZ0NDQVNmSHdoQkNBUUlBU0ZRaUNLSVJBZ0RDQVFmQ0VNSUFnZ0RJVkNHSW9oQ0NBRUlBZ2dGbng4SVFRZ0VDQUVoVUlRaWlFUUlBd2dFSHdoRENBSUlBeUZRaitLSVFnZ0FTQUdJQ0I4ZkNFQklCQWdBWVZDSUlvaEVDQUxJQkI4SVFzZ0JpQUxoVUlZaWlFR0lBRWdCaUFjZkh3aEFTQVFJQUdGUWhDS0lSQWdDeUFRZkNFTElBWWdDNFZDUDRvaEJpQUNJQWNnR254OElRSWdEU0FDaFVJZ2lpRU5JQXdnRFh3aERDQUhJQXlGUWhpS0lRY2dBaUFISUI5OGZDRUNJQTBnQW9WQ0VJb2hEU0FNSUExOElRd2dCeUFNaFVJL2lpRUhJQU1nQ0NBVWZId2hBeUFPSUFPRlFpQ0tJUTRnQ1NBT2ZDRUpJQWdnQ1lWQ0dJb2hDQ0FESUFnZ0hYeDhJUU1nRGlBRGhVSVFpaUVPSUFrZ0Rud2hDU0FJSUFtRlFqK0tJUWdnQkNBRklCNThmQ0VFSUE4Z0JJVkNJSW9oRHlBS0lBOThJUW9nQlNBS2hVSVlpaUVGSUFRZ0JTQVJmSHdoQkNBUElBU0ZRaENLSVE4Z0NpQVBmQ0VLSUFVZ0NvVkNQNG9oQlNBQklBVWdFWHg4SVFFZ0RTQUJoVUlnaWlFTklBa2dEWHdoQ1NBRklBbUZRaGlLSVFVZ0FTQUZJQko4ZkNFQklBMGdBWVZDRUlvaERTQUpJQTE4SVFrZ0JTQUpoVUkvaWlFRklBSWdCaUFUZkh3aEFpQU9JQUtGUWlDS0lRNGdDaUFPZkNFS0lBWWdDb1ZDR0lvaEJpQUNJQVlnRkh4OElRSWdEaUFDaFVJUWlpRU9JQW9nRG53aENpQUdJQXFGUWorS0lRWWdBeUFISUJWOGZDRURJQThnQTRWQ0lJb2hEeUFMSUE5OElRc2dCeUFMaFVJWWlpRUhJQU1nQnlBV2ZId2hBeUFQSUFPRlFoQ0tJUThnQ3lBUGZDRUxJQWNnQzRWQ1A0b2hCeUFFSUFnZ0YzeDhJUVFnRUNBRWhVSWdpaUVRSUF3Z0VId2hEQ0FJSUF5RlFoaUtJUWdnQkNBSUlCaDhmQ0VFSUJBZ0JJVkNFSW9oRUNBTUlCQjhJUXdnQ0NBTWhVSS9paUVJSUFFZ0JpQVpmSHdoQVNBUUlBR0ZRaUNLSVJBZ0N5QVFmQ0VMSUFZZ0M0VkNHSW9oQmlBQklBWWdHbng4SVFFZ0VDQUJoVUlRaWlFUUlBc2dFSHdoQ3lBR0lBdUZRaitLSVFZZ0FpQUhJQnQ4ZkNFQ0lBMGdBb1ZDSUlvaERTQU1JQTE4SVF3Z0J5QU1oVUlZaWlFSElBSWdCeUFjZkh3aEFpQU5JQUtGUWhDS0lRMGdEQ0FOZkNFTUlBY2dESVZDUDRvaEJ5QURJQWdnSFh4OElRTWdEaUFEaFVJZ2lpRU9JQWtnRG53aENTQUlJQW1GUWhpS0lRZ2dBeUFJSUI1OGZDRURJQTRnQTRWQ0VJb2hEaUFKSUE1OElRa2dDQ0FKaFVJL2lpRUlJQVFnQlNBZmZId2hCQ0FQSUFTRlFpQ0tJUThnQ2lBUGZDRUtJQVVnQ29WQ0dJb2hCU0FFSUFVZ0lIeDhJUVFnRHlBRWhVSVFpaUVQSUFvZ0Qzd2hDaUFGSUFxRlFqK0tJUVVnQVNBRklCOThmQ0VCSUEwZ0FZVkNJSW9oRFNBSklBMThJUWtnQlNBSmhVSVlpaUVGSUFFZ0JTQWJmSHdoQVNBTklBR0ZRaENLSVEwZ0NTQU5mQ0VKSUFVZ0NZVkNQNG9oQlNBQ0lBWWdGWHg4SVFJZ0RpQUNoVUlnaWlFT0lBb2dEbndoQ2lBR0lBcUZRaGlLSVFZZ0FpQUdJQmw4ZkNFQ0lBNGdBb1ZDRUlvaERpQUtJQTU4SVFvZ0JpQUtoVUkvaWlFR0lBTWdCeUFhZkh3aEF5QVBJQU9GUWlDS0lROGdDeUFQZkNFTElBY2dDNFZDR0lvaEJ5QURJQWNnSUh4OElRTWdEeUFEaFVJUWlpRVBJQXNnRDN3aEN5QUhJQXVGUWorS0lRY2dCQ0FJSUI1OGZDRUVJQkFnQklWQ0lJb2hFQ0FNSUJCOElRd2dDQ0FNaFVJWWlpRUlJQVFnQ0NBWGZId2hCQ0FRSUFTRlFoQ0tJUkFnRENBUWZDRU1JQWdnRElWQ1A0b2hDQ0FCSUFZZ0VueDhJUUVnRUNBQmhVSWdpaUVRSUFzZ0VId2hDeUFHSUF1RlFoaUtJUVlnQVNBR0lCMThmQ0VCSUJBZ0FZVkNFSW9oRUNBTElCQjhJUXNnQmlBTGhVSS9paUVHSUFJZ0J5QVJmSHdoQWlBTklBS0ZRaUNLSVEwZ0RDQU5mQ0VNSUFjZ0RJVkNHSW9oQnlBQ0lBY2dFM3g4SVFJZ0RTQUNoVUlRaWlFTklBd2dEWHdoRENBSElBeUZRaitLSVFjZ0F5QUlJQng4ZkNFRElBNGdBNFZDSUlvaERpQUpJQTU4SVFrZ0NDQUpoVUlZaWlFSUlBTWdDQ0FZZkh3aEF5QU9JQU9GUWhDS0lRNGdDU0FPZkNFSklBZ2dDWVZDUDRvaENDQUVJQVVnRm54OElRUWdEeUFFaFVJZ2lpRVBJQW9nRDN3aENpQUZJQXFGUWhpS0lRVWdCQ0FGSUJSOGZDRUVJQThnQklWQ0VJb2hEeUFLSUE5OElRb2dCU0FLaFVJL2lpRUZJQ0VnSVNrREFDQUJJQW1GaFRjREFDQWlJQ0lwQXdBZ0FpQUtoWVUzQXdBZ0l5QWpLUU1BSUFNZ0M0V0ZOd01BSUNRZ0pDa0RBQ0FFSUF5RmhUY0RBQ0FsSUNVcEF3QWdCU0FOaFlVM0F3QWdKaUFtS1FNQUlBWWdEb1dGTndNQUlDY2dKeWtEQUNBSElBK0ZoVGNEQUNBb0lDZ3BBd0FnQ0NBUWhZVTNBd0FMXCIpLCByID0gbnVsbCwgaSA9IHtcbiAgICBidWZmZXI6IHQsXG4gICAgbWVtb3J5OiBudWxsLFxuICAgIGV4cG9ydHM6IG51bGwsXG4gICAgcmVhbGxvYzogbixcbiAgICBvbmxvYWQ6IG9cbiAgfTtcbiAgcmV0dXJuIG8oZnVuY3Rpb24oKSB7XG4gIH0pLCBpO1xuICBmdW5jdGlvbiBuKGMpIHtcbiAgICBpLmV4cG9ydHMubWVtb3J5Lmdyb3coTWF0aC5jZWlsKE1hdGguYWJzKGMgLSBpLm1lbW9yeS5sZW5ndGgpIC8gNjU1MzYpKSwgaS5tZW1vcnkgPSBuZXcgVWludDhBcnJheShpLmV4cG9ydHMubWVtb3J5LmJ1ZmZlcik7XG4gIH1cbiAgZnVuY3Rpb24gbyhjKSB7XG4gICAgaWYgKGkuZXhwb3J0cylcbiAgICAgIHJldHVybiBjKCk7XG4gICAgaWYgKHIpIHtcbiAgICAgIHIudGhlbihjLmJpbmQobnVsbCwgbnVsbCkpLmNhdGNoKGMpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgaWYgKHMgJiYgcy5hc3luYylcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiYXN5bmNcIik7XG4gICAgICBBKHsgaW5zdGFuY2U6IG5ldyBXZWJBc3NlbWJseS5JbnN0YW5jZShuZXcgV2ViQXNzZW1ibHkuTW9kdWxlKHQpLCBlKSB9KTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHIgPSBXZWJBc3NlbWJseS5pbnN0YW50aWF0ZSh0LCBlKS50aGVuKEEpO1xuICAgIH1cbiAgICBvKGMpO1xuICB9XG4gIGZ1bmN0aW9uIEEoYykge1xuICAgIGkuZXhwb3J0cyA9IGMuaW5zdGFuY2UuZXhwb3J0cywgaS5tZW1vcnkgPSBpLmV4cG9ydHMubWVtb3J5ICYmIGkuZXhwb3J0cy5tZW1vcnkuYnVmZmVyICYmIG5ldyBVaW50OEFycmF5KGkuZXhwb3J0cy5tZW1vcnkuYnVmZmVyKTtcbiAgfVxufVxuZnVuY3Rpb24gdXMocykge1xuICByZXR1cm4gdHlwZW9mIGF0b2IgPT0gXCJmdW5jdGlvblwiID8gbmV3IFVpbnQ4QXJyYXkoYXRvYihzKS5zcGxpdChcIlwiKS5tYXAoZHMpKSA6IG5ldyAoSXMoXCJidWZmZXJcIikpLkJ1ZmZlcihzLCBcImJhc2U2NFwiKTtcbn1cbmZ1bmN0aW9uIGRzKHMpIHtcbiAgcmV0dXJuIHMuY2hhckNvZGVBdCgwKTtcbn1cbnZhciBrID0gUWUsIEMgPSBocygpLCBWID0gNjQsIHd0ID0gW107XG5QLmV4cG9ydHMgPSBEO1xudmFyIGp0ID0gUC5leHBvcnRzLkJZVEVTX01JTiA9IDE2LCBYdCA9IFAuZXhwb3J0cy5CWVRFU19NQVggPSA2NDtcblAuZXhwb3J0cy5CWVRFUyA9IDMyO1xudmFyIFp0ID0gUC5leHBvcnRzLktFWUJZVEVTX01JTiA9IDE2LCB0ZSA9IFAuZXhwb3J0cy5LRVlCWVRFU19NQVggPSA2NDtcblAuZXhwb3J0cy5LRVlCWVRFUyA9IDMyO1xudmFyIGVlID0gUC5leHBvcnRzLlNBTFRCWVRFUyA9IDE2LCBzZSA9IFAuZXhwb3J0cy5QRVJTT05BTEJZVEVTID0gMTY7XG5mdW5jdGlvbiBEKHMsIGUsIHQsIHIsIGkpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEQpKVxuICAgIHJldHVybiBuZXcgRChzLCBlLCB0LCByLCBpKTtcbiAgaWYgKCEoQyAmJiBDLmV4cG9ydHMpKVxuICAgIHRocm93IG5ldyBFcnJvcihcIldBU00gbm90IGxvYWRlZC4gV2FpdCBmb3IgQmxha2UyYi5yZWFkeShjYilcIik7XG4gIHMgfHwgKHMgPSAzMiksIGkgIT09ICEwICYmIChrKHMgPj0ganQsIFwiZGlnZXN0TGVuZ3RoIG11c3QgYmUgYXQgbGVhc3QgXCIgKyBqdCArIFwiLCB3YXMgZ2l2ZW4gXCIgKyBzKSwgayhzIDw9IFh0LCBcImRpZ2VzdExlbmd0aCBtdXN0IGJlIGF0IG1vc3QgXCIgKyBYdCArIFwiLCB3YXMgZ2l2ZW4gXCIgKyBzKSwgZSAhPSBudWxsICYmIGsoZS5sZW5ndGggPj0gWnQsIFwia2V5IG11c3QgYmUgYXQgbGVhc3QgXCIgKyBadCArIFwiLCB3YXMgZ2l2ZW4gXCIgKyBlLmxlbmd0aCksIGUgIT0gbnVsbCAmJiBrKGUubGVuZ3RoIDw9IHRlLCBcImtleSBtdXN0IGJlIGF0IGxlYXN0IFwiICsgdGUgKyBcIiwgd2FzIGdpdmVuIFwiICsgZS5sZW5ndGgpLCB0ICE9IG51bGwgJiYgayh0Lmxlbmd0aCA9PT0gZWUsIFwic2FsdCBtdXN0IGJlIGV4YWN0bHkgXCIgKyBlZSArIFwiLCB3YXMgZ2l2ZW4gXCIgKyB0Lmxlbmd0aCksIHIgIT0gbnVsbCAmJiBrKHIubGVuZ3RoID09PSBzZSwgXCJwZXJzb25hbCBtdXN0IGJlIGV4YWN0bHkgXCIgKyBzZSArIFwiLCB3YXMgZ2l2ZW4gXCIgKyByLmxlbmd0aCkpLCB3dC5sZW5ndGggfHwgKHd0LnB1c2goViksIFYgKz0gMjE2KSwgdGhpcy5kaWdlc3RMZW5ndGggPSBzLCB0aGlzLmZpbmFsaXplZCA9ICExLCB0aGlzLnBvaW50ZXIgPSB3dC5wb3AoKSwgQy5tZW1vcnkuZmlsbCgwLCAwLCA2NCksIEMubWVtb3J5WzBdID0gdGhpcy5kaWdlc3RMZW5ndGgsIEMubWVtb3J5WzFdID0gZSA/IGUubGVuZ3RoIDogMCwgQy5tZW1vcnlbMl0gPSAxLCBDLm1lbW9yeVszXSA9IDEsIHQgJiYgQy5tZW1vcnkuc2V0KHQsIDMyKSwgciAmJiBDLm1lbW9yeS5zZXQociwgNDgpLCB0aGlzLnBvaW50ZXIgKyAyMTYgPiBDLm1lbW9yeS5sZW5ndGggJiYgQy5yZWFsbG9jKHRoaXMucG9pbnRlciArIDIxNiksIEMuZXhwb3J0cy5ibGFrZTJiX2luaXQodGhpcy5wb2ludGVyLCB0aGlzLmRpZ2VzdExlbmd0aCksIGUgJiYgKHRoaXMudXBkYXRlKGUpLCBDLm1lbW9yeS5maWxsKDAsIFYsIFYgKyBlLmxlbmd0aCksIEMubWVtb3J5W3RoaXMucG9pbnRlciArIDIwMF0gPSAxMjgpO1xufVxuRC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24ocykge1xuICByZXR1cm4gayh0aGlzLmZpbmFsaXplZCA9PT0gITEsIFwiSGFzaCBpbnN0YW5jZSBmaW5hbGl6ZWRcIiksIGsocywgXCJpbnB1dCBtdXN0IGJlIFR5cGVkQXJyYXkgb3IgQnVmZmVyXCIpLCBWICsgcy5sZW5ndGggPiBDLm1lbW9yeS5sZW5ndGggJiYgQy5yZWFsbG9jKFYgKyBzLmxlbmd0aCksIEMubWVtb3J5LnNldChzLCBWKSwgQy5leHBvcnRzLmJsYWtlMmJfdXBkYXRlKHRoaXMucG9pbnRlciwgViwgViArIHMubGVuZ3RoKSwgdGhpcztcbn07XG5ELnByb3RvdHlwZS5kaWdlc3QgPSBmdW5jdGlvbihzKSB7XG4gIGlmIChrKHRoaXMuZmluYWxpemVkID09PSAhMSwgXCJIYXNoIGluc3RhbmNlIGZpbmFsaXplZFwiKSwgdGhpcy5maW5hbGl6ZWQgPSAhMCwgd3QucHVzaCh0aGlzLnBvaW50ZXIpLCBDLmV4cG9ydHMuYmxha2UyYl9maW5hbCh0aGlzLnBvaW50ZXIpLCAhcyB8fCBzID09PSBcImJpbmFyeVwiKVxuICAgIHJldHVybiBDLm1lbW9yeS5zbGljZSh0aGlzLnBvaW50ZXIgKyAxMjgsIHRoaXMucG9pbnRlciArIDEyOCArIHRoaXMuZGlnZXN0TGVuZ3RoKTtcbiAgaWYgKHMgPT09IFwiaGV4XCIpXG4gICAgcmV0dXJuIGdzKEMubWVtb3J5LCB0aGlzLnBvaW50ZXIgKyAxMjgsIHRoaXMuZGlnZXN0TGVuZ3RoKTtcbiAgayhzLmxlbmd0aCA+PSB0aGlzLmRpZ2VzdExlbmd0aCwgXCJpbnB1dCBtdXN0IGJlIFR5cGVkQXJyYXkgb3IgQnVmZmVyXCIpO1xuICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXMuZGlnZXN0TGVuZ3RoOyBlKyspXG4gICAgc1tlXSA9IEMubWVtb3J5W3RoaXMucG9pbnRlciArIDEyOCArIGVdO1xuICByZXR1cm4gcztcbn07XG5ELnByb3RvdHlwZS5maW5hbCA9IEQucHJvdG90eXBlLmRpZ2VzdDtcbkQuV0FTTSA9IEMgJiYgQy5idWZmZXI7XG5ELlNVUFBPUlRFRCA9IHR5cGVvZiBXZWJBc3NlbWJseSA8IFwidVwiO1xuRC5yZWFkeSA9IGZ1bmN0aW9uKHMpIHtcbiAgaWYgKHMgfHwgKHMgPSBscyksICFDKVxuICAgIHJldHVybiBzKG5ldyBFcnJvcihcIldlYkFzc2VtYmx5IG5vdCBzdXBwb3J0ZWRcIikpO1xuICB2YXIgZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKHQsIHIpIHtcbiAgICBDLm9ubG9hZChmdW5jdGlvbihpKSB7XG4gICAgICBpID8gcigpIDogdCgpLCBzKGkpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIGU7XG59O1xuRC5wcm90b3R5cGUucmVhZHkgPSBELnJlYWR5O1xuZnVuY3Rpb24gbHMoKSB7XG59XG5mdW5jdGlvbiBncyhzLCBlLCB0KSB7XG4gIGZvciAodmFyIHIgPSBcIlwiLCBpID0gMDsgaSA8IHQ7IGkrKylcbiAgICByICs9IGZzKHNbZSArIGldKTtcbiAgcmV0dXJuIHI7XG59XG5mdW5jdGlvbiBmcyhzKSB7XG4gIHJldHVybiBzIDwgMTYgPyBcIjBcIiArIHMudG9TdHJpbmcoMTYpIDogcy50b1N0cmluZygxNik7XG59XG52YXIgeiA9IFFlLCB1dCA9IFAuZXhwb3J0cztcbmZ1bmN0aW9uIGd0KHMsIGUsIHQpIHtcbiAgdmFyIHIgPSBzW2VdICsgc1t0XSwgaSA9IHNbZSArIDFdICsgc1t0ICsgMV07XG4gIHIgPj0gNDI5NDk2NzI5NiAmJiBpKyssIHNbZV0gPSByLCBzW2UgKyAxXSA9IGk7XG59XG5mdW5jdGlvbiByZShzLCBlLCB0LCByKSB7XG4gIHZhciBpID0gc1tlXSArIHQ7XG4gIHQgPCAwICYmIChpICs9IDQyOTQ5NjcyOTYpO1xuICB2YXIgbiA9IHNbZSArIDFdICsgcjtcbiAgaSA+PSA0Mjk0OTY3Mjk2ICYmIG4rKywgc1tlXSA9IGksIHNbZSArIDFdID0gbjtcbn1cbmZ1bmN0aW9uIFNlKHMsIGUpIHtcbiAgcmV0dXJuIHNbZV0gXiBzW2UgKyAxXSA8PCA4IF4gc1tlICsgMl0gPDwgMTYgXiBzW2UgKyAzXSA8PCAyNDtcbn1cbmZ1bmN0aW9uICQocywgZSwgdCwgciwgaSwgbikge1xuICB2YXIgbyA9IGN0W2ldLCBBID0gY3RbaSArIDFdLCBjID0gY3Rbbl0sIEkgPSBjdFtuICsgMV07XG4gIGd0KGQsIHMsIGUpLCByZShkLCBzLCBvLCBBKTtcbiAgdmFyIHUgPSBkW3JdIF4gZFtzXSwgaCA9IGRbciArIDFdIF4gZFtzICsgMV07XG4gIGRbcl0gPSBoLCBkW3IgKyAxXSA9IHUsIGd0KGQsIHQsIHIpLCB1ID0gZFtlXSBeIGRbdF0sIGggPSBkW2UgKyAxXSBeIGRbdCArIDFdLCBkW2VdID0gdSA+Pj4gMjQgXiBoIDw8IDgsIGRbZSArIDFdID0gaCA+Pj4gMjQgXiB1IDw8IDgsIGd0KGQsIHMsIGUpLCByZShkLCBzLCBjLCBJKSwgdSA9IGRbcl0gXiBkW3NdLCBoID0gZFtyICsgMV0gXiBkW3MgKyAxXSwgZFtyXSA9IHUgPj4+IDE2IF4gaCA8PCAxNiwgZFtyICsgMV0gPSBoID4+PiAxNiBeIHUgPDwgMTYsIGd0KGQsIHQsIHIpLCB1ID0gZFtlXSBeIGRbdF0sIGggPSBkW2UgKyAxXSBeIGRbdCArIDFdLCBkW2VdID0gaCA+Pj4gMzEgXiB1IDw8IDEsIGRbZSArIDFdID0gdSA+Pj4gMzEgXiBoIDw8IDE7XG59XG52YXIgRGUgPSBuZXcgVWludDMyQXJyYXkoW1xuICA0MDg5MjM1NzIwLFxuICAxNzc5MDMzNzAzLFxuICAyMjI3ODczNTk1LFxuICAzMTQ0MTM0Mjc3LFxuICA0MjcxMTc1NzIzLFxuICAxMDEzOTA0MjQyLFxuICAxNTk1NzUwMTI5LFxuICAyNzczNDgwNzYyLFxuICAyOTE3NTY1MTM3LFxuICAxMzU5ODkzMTE5LFxuICA3MjU1MTExOTksXG4gIDI2MDA4MjI5MjQsXG4gIDQyMTUzODk1NDcsXG4gIDUyODczNDYzNSxcbiAgMzI3MDMzMjA5LFxuICAxNTQxNDU5MjI1XG5dKSwgX3MgPSBbXG4gIDAsXG4gIDEsXG4gIDIsXG4gIDMsXG4gIDQsXG4gIDUsXG4gIDYsXG4gIDcsXG4gIDgsXG4gIDksXG4gIDEwLFxuICAxMSxcbiAgMTIsXG4gIDEzLFxuICAxNCxcbiAgMTUsXG4gIDE0LFxuICAxMCxcbiAgNCxcbiAgOCxcbiAgOSxcbiAgMTUsXG4gIDEzLFxuICA2LFxuICAxLFxuICAxMixcbiAgMCxcbiAgMixcbiAgMTEsXG4gIDcsXG4gIDUsXG4gIDMsXG4gIDExLFxuICA4LFxuICAxMixcbiAgMCxcbiAgNSxcbiAgMixcbiAgMTUsXG4gIDEzLFxuICAxMCxcbiAgMTQsXG4gIDMsXG4gIDYsXG4gIDcsXG4gIDEsXG4gIDksXG4gIDQsXG4gIDcsXG4gIDksXG4gIDMsXG4gIDEsXG4gIDEzLFxuICAxMixcbiAgMTEsXG4gIDE0LFxuICAyLFxuICA2LFxuICA1LFxuICAxMCxcbiAgNCxcbiAgMCxcbiAgMTUsXG4gIDgsXG4gIDksXG4gIDAsXG4gIDUsXG4gIDcsXG4gIDIsXG4gIDQsXG4gIDEwLFxuICAxNSxcbiAgMTQsXG4gIDEsXG4gIDExLFxuICAxMixcbiAgNixcbiAgOCxcbiAgMyxcbiAgMTMsXG4gIDIsXG4gIDEyLFxuICA2LFxuICAxMCxcbiAgMCxcbiAgMTEsXG4gIDgsXG4gIDMsXG4gIDQsXG4gIDEzLFxuICA3LFxuICA1LFxuICAxNSxcbiAgMTQsXG4gIDEsXG4gIDksXG4gIDEyLFxuICA1LFxuICAxLFxuICAxNSxcbiAgMTQsXG4gIDEzLFxuICA0LFxuICAxMCxcbiAgMCxcbiAgNyxcbiAgNixcbiAgMyxcbiAgOSxcbiAgMixcbiAgOCxcbiAgMTEsXG4gIDEzLFxuICAxMSxcbiAgNyxcbiAgMTQsXG4gIDEyLFxuICAxLFxuICAzLFxuICA5LFxuICA1LFxuICAwLFxuICAxNSxcbiAgNCxcbiAgOCxcbiAgNixcbiAgMixcbiAgMTAsXG4gIDYsXG4gIDE1LFxuICAxNCxcbiAgOSxcbiAgMTEsXG4gIDMsXG4gIDAsXG4gIDgsXG4gIDEyLFxuICAyLFxuICAxMyxcbiAgNyxcbiAgMSxcbiAgNCxcbiAgMTAsXG4gIDUsXG4gIDEwLFxuICAyLFxuICA4LFxuICA0LFxuICA3LFxuICA2LFxuICAxLFxuICA1LFxuICAxNSxcbiAgMTEsXG4gIDksXG4gIDE0LFxuICAzLFxuICAxMixcbiAgMTMsXG4gIDAsXG4gIDAsXG4gIDEsXG4gIDIsXG4gIDMsXG4gIDQsXG4gIDUsXG4gIDYsXG4gIDcsXG4gIDgsXG4gIDksXG4gIDEwLFxuICAxMSxcbiAgMTIsXG4gIDEzLFxuICAxNCxcbiAgMTUsXG4gIDE0LFxuICAxMCxcbiAgNCxcbiAgOCxcbiAgOSxcbiAgMTUsXG4gIDEzLFxuICA2LFxuICAxLFxuICAxMixcbiAgMCxcbiAgMixcbiAgMTEsXG4gIDcsXG4gIDUsXG4gIDNcbl0sIEUgPSBuZXcgVWludDhBcnJheShfcy5tYXAoZnVuY3Rpb24ocykge1xuICByZXR1cm4gcyAqIDI7XG59KSksIGQgPSBuZXcgVWludDMyQXJyYXkoMzIpLCBjdCA9IG5ldyBVaW50MzJBcnJheSgzMik7XG5mdW5jdGlvbiB2ZShzLCBlKSB7XG4gIHZhciB0ID0gMDtcbiAgZm9yICh0ID0gMDsgdCA8IDE2OyB0KyspXG4gICAgZFt0XSA9IHMuaFt0XSwgZFt0ICsgMTZdID0gRGVbdF07XG4gIGZvciAoZFsyNF0gPSBkWzI0XSBeIHMudCwgZFsyNV0gPSBkWzI1XSBeIHMudCAvIDQyOTQ5NjcyOTYsIGUgJiYgKGRbMjhdID0gfmRbMjhdLCBkWzI5XSA9IH5kWzI5XSksIHQgPSAwOyB0IDwgMzI7IHQrKylcbiAgICBjdFt0XSA9IFNlKHMuYiwgNCAqIHQpO1xuICBmb3IgKHQgPSAwOyB0IDwgMTI7IHQrKylcbiAgICAkKDAsIDgsIDE2LCAyNCwgRVt0ICogMTYgKyAwXSwgRVt0ICogMTYgKyAxXSksICQoMiwgMTAsIDE4LCAyNiwgRVt0ICogMTYgKyAyXSwgRVt0ICogMTYgKyAzXSksICQoNCwgMTIsIDIwLCAyOCwgRVt0ICogMTYgKyA0XSwgRVt0ICogMTYgKyA1XSksICQoNiwgMTQsIDIyLCAzMCwgRVt0ICogMTYgKyA2XSwgRVt0ICogMTYgKyA3XSksICQoMCwgMTAsIDIwLCAzMCwgRVt0ICogMTYgKyA4XSwgRVt0ICogMTYgKyA5XSksICQoMiwgMTIsIDIyLCAyNCwgRVt0ICogMTYgKyAxMF0sIEVbdCAqIDE2ICsgMTFdKSwgJCg0LCAxNCwgMTYsIDI2LCBFW3QgKiAxNiArIDEyXSwgRVt0ICogMTYgKyAxM10pLCAkKDYsIDgsIDE4LCAyOCwgRVt0ICogMTYgKyAxNF0sIEVbdCAqIDE2ICsgMTVdKTtcbiAgZm9yICh0ID0gMDsgdCA8IDE2OyB0KyspXG4gICAgcy5oW3RdID0gcy5oW3RdIF4gZFt0XSBeIGRbdCArIDE2XTtcbn1cbnZhciBxID0gbmV3IFVpbnQ4QXJyYXkoW1xuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwLFxuICAwXG5dKTtcbmZ1bmN0aW9uIHJ0KHMsIGUsIHQsIHIpIHtcbiAgcS5maWxsKDApLCB0aGlzLmIgPSBuZXcgVWludDhBcnJheSgxMjgpLCB0aGlzLmggPSBuZXcgVWludDMyQXJyYXkoMTYpLCB0aGlzLnQgPSAwLCB0aGlzLmMgPSAwLCB0aGlzLm91dGxlbiA9IHMsIHFbMF0gPSBzLCBlICYmIChxWzFdID0gZS5sZW5ndGgpLCBxWzJdID0gMSwgcVszXSA9IDEsIHQgJiYgcS5zZXQodCwgMzIpLCByICYmIHEuc2V0KHIsIDQ4KTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAxNjsgaSsrKVxuICAgIHRoaXMuaFtpXSA9IERlW2ldIF4gU2UocSwgaSAqIDQpO1xuICBlICYmIChiZSh0aGlzLCBlKSwgdGhpcy5jID0gMTI4KTtcbn1cbnJ0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbihzKSB7XG4gIHJldHVybiB6KHMgIT0gbnVsbCwgXCJpbnB1dCBtdXN0IGJlIFVpbnQ4QXJyYXkgb3IgQnVmZmVyXCIpLCBiZSh0aGlzLCBzKSwgdGhpcztcbn07XG5ydC5wcm90b3R5cGUuZGlnZXN0ID0gZnVuY3Rpb24ocykge1xuICB2YXIgZSA9ICFzIHx8IHMgPT09IFwiYmluYXJ5XCIgfHwgcyA9PT0gXCJoZXhcIiA/IG5ldyBVaW50OEFycmF5KHRoaXMub3V0bGVuKSA6IHM7XG4gIHJldHVybiB6KGUubGVuZ3RoID49IHRoaXMub3V0bGVuLCBcIm91dCBtdXN0IGhhdmUgYXQgbGVhc3Qgb3V0bGVuIGJ5dGVzIG9mIHNwYWNlXCIpLCBDcyh0aGlzLCBlKSwgcyA9PT0gXCJoZXhcIiA/IHBzKGUpIDogZTtcbn07XG5ydC5wcm90b3R5cGUuZmluYWwgPSBydC5wcm90b3R5cGUuZGlnZXN0O1xucnQucmVhZHkgPSBmdW5jdGlvbihzKSB7XG4gIHV0LnJlYWR5KGZ1bmN0aW9uKCkge1xuICAgIHMoKTtcbiAgfSk7XG59O1xuZnVuY3Rpb24gYmUocywgZSkge1xuICBmb3IgKHZhciB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspXG4gICAgcy5jID09PSAxMjggJiYgKHMudCArPSBzLmMsIHZlKHMsICExKSwgcy5jID0gMCksIHMuYltzLmMrK10gPSBlW3RdO1xufVxuZnVuY3Rpb24gQ3MocywgZSkge1xuICBmb3IgKHMudCArPSBzLmM7IHMuYyA8IDEyODsgKVxuICAgIHMuYltzLmMrK10gPSAwO1xuICB2ZShzLCAhMCk7XG4gIGZvciAodmFyIHQgPSAwOyB0IDwgcy5vdXRsZW47IHQrKylcbiAgICBlW3RdID0gcy5oW3QgPj4gMl0gPj4gOCAqICh0ICYgMyk7XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gcHMocykge1xuICBmb3IgKHZhciBlID0gXCJcIiwgdCA9IDA7IHQgPCBzLmxlbmd0aDsgdCsrKVxuICAgIGUgKz0gd3Moc1t0XSk7XG4gIHJldHVybiBlO1xufVxuZnVuY3Rpb24gd3Mocykge1xuICByZXR1cm4gcyA8IDE2ID8gXCIwXCIgKyBzLnRvU3RyaW5nKDE2KSA6IHMudG9TdHJpbmcoMTYpO1xufVxudmFyIEtlID0gcnQ7XG5RLmV4cG9ydHMgPSBmdW5jdGlvbihlLCB0LCByLCBpLCBuKSB7XG4gIHJldHVybiBuICE9PSAhMCAmJiAoeihlID49IGllLCBcIm91dGxlbiBtdXN0IGJlIGF0IGxlYXN0IFwiICsgaWUgKyBcIiwgd2FzIGdpdmVuIFwiICsgZSksIHooZSA8PSBhZSwgXCJvdXRsZW4gbXVzdCBiZSBhdCBtb3N0IFwiICsgYWUgKyBcIiwgd2FzIGdpdmVuIFwiICsgZSksIHQgIT0gbnVsbCAmJiB6KHQubGVuZ3RoID49IG5lLCBcImtleSBtdXN0IGJlIGF0IGxlYXN0IFwiICsgbmUgKyBcIiwgd2FzIGdpdmVuIFwiICsgdC5sZW5ndGgpLCB0ICE9IG51bGwgJiYgeih0Lmxlbmd0aCA8PSBvZSwgXCJrZXkgbXVzdCBiZSBhdCBtb3N0IFwiICsgb2UgKyBcIiwgd2FzIGdpdmVuIFwiICsgdC5sZW5ndGgpLCByICE9IG51bGwgJiYgeihyLmxlbmd0aCA9PT0gQWUsIFwic2FsdCBtdXN0IGJlIGV4YWN0bHkgXCIgKyBBZSArIFwiLCB3YXMgZ2l2ZW4gXCIgKyByLmxlbmd0aCksIGkgIT0gbnVsbCAmJiB6KGkubGVuZ3RoID09PSBjZSwgXCJwZXJzb25hbCBtdXN0IGJlIGV4YWN0bHkgXCIgKyBjZSArIFwiLCB3YXMgZ2l2ZW4gXCIgKyBpLmxlbmd0aCkpLCBuZXcgS2UoZSwgdCwgciwgaSk7XG59O1xuUS5leHBvcnRzLnJlYWR5ID0gZnVuY3Rpb24ocykge1xuICB1dC5yZWFkeShmdW5jdGlvbigpIHtcbiAgICBzKCk7XG4gIH0pO1xufTtcblEuZXhwb3J0cy5XQVNNX1NVUFBPUlRFRCA9IHV0LlNVUFBPUlRFRDtcblEuZXhwb3J0cy5XQVNNX0xPQURFRCA9ICExO1xudmFyIGllID0gUS5leHBvcnRzLkJZVEVTX01JTiA9IDE2LCBhZSA9IFEuZXhwb3J0cy5CWVRFU19NQVggPSA2NDtcblEuZXhwb3J0cy5CWVRFUyA9IDMyO1xudmFyIG5lID0gUS5leHBvcnRzLktFWUJZVEVTX01JTiA9IDE2LCBvZSA9IFEuZXhwb3J0cy5LRVlCWVRFU19NQVggPSA2NDtcblEuZXhwb3J0cy5LRVlCWVRFUyA9IDMyO1xudmFyIEFlID0gUS5leHBvcnRzLlNBTFRCWVRFUyA9IDE2LCBjZSA9IFEuZXhwb3J0cy5QRVJTT05BTEJZVEVTID0gMTY7XG51dC5yZWFkeShmdW5jdGlvbihzKSB7XG4gIHMgfHwgKFEuZXhwb3J0cy5XQVNNX0xPQURFRCA9ICEwLCBLZSA9IHV0KTtcbn0pO1xudmFyIGl0ID0ge307XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaXQsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiAhMCB9KTtcbml0LmJlY2gzMm0gPSBpdC5iZWNoMzIgPSB2b2lkIDA7XG5jb25zdCB4dCA9IFwicXB6cnk5eDhnZjJ0dmR3MHMzam41NGtoY2U2bXVhN2xcIiwgVWUgPSB7fTtcbmZvciAobGV0IHMgPSAwOyBzIDwgeHQubGVuZ3RoOyBzKyspIHtcbiAgY29uc3QgZSA9IHh0LmNoYXJBdChzKTtcbiAgVWVbZV0gPSBzO1xufVxuZnVuY3Rpb24gc3Qocykge1xuICBjb25zdCBlID0gcyA+PiAyNTtcbiAgcmV0dXJuIChzICYgMzM1NTQ0MzEpIDw8IDUgXiAtKGUgPj4gMCAmIDEpICYgOTk2ODI1MDEwIF4gLShlID4+IDEgJiAxKSAmIDY0MjgxMzU0OSBeIC0oZSA+PiAyICYgMSkgJiA1MTM4NzQ0MjYgXiAtKGUgPj4gMyAmIDEpICYgMTAyNzc0ODgyOSBeIC0oZSA+PiA0ICYgMSkgJiA3MDU5NzkwNTk7XG59XG5mdW5jdGlvbiBJZShzKSB7XG4gIGxldCBlID0gMTtcbiAgZm9yIChsZXQgdCA9IDA7IHQgPCBzLmxlbmd0aDsgKyt0KSB7XG4gICAgY29uc3QgciA9IHMuY2hhckNvZGVBdCh0KTtcbiAgICBpZiAociA8IDMzIHx8IHIgPiAxMjYpXG4gICAgICByZXR1cm4gXCJJbnZhbGlkIHByZWZpeCAoXCIgKyBzICsgXCIpXCI7XG4gICAgZSA9IHN0KGUpIF4gciA+PiA1O1xuICB9XG4gIGUgPSBzdChlKTtcbiAgZm9yIChsZXQgdCA9IDA7IHQgPCBzLmxlbmd0aDsgKyt0KSB7XG4gICAgY29uc3QgciA9IHMuY2hhckNvZGVBdCh0KTtcbiAgICBlID0gc3QoZSkgXiByICYgMzE7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5mdW5jdGlvbiBNdChzLCBlLCB0LCByKSB7XG4gIGxldCBpID0gMCwgbiA9IDA7XG4gIGNvbnN0IG8gPSAoMSA8PCB0KSAtIDEsIEEgPSBbXTtcbiAgZm9yIChsZXQgYyA9IDA7IGMgPCBzLmxlbmd0aDsgKytjKVxuICAgIGZvciAoaSA9IGkgPDwgZSB8IHNbY10sIG4gKz0gZTsgbiA+PSB0OyApXG4gICAgICBuIC09IHQsIEEucHVzaChpID4+IG4gJiBvKTtcbiAgaWYgKHIpXG4gICAgbiA+IDAgJiYgQS5wdXNoKGkgPDwgdCAtIG4gJiBvKTtcbiAgZWxzZSB7XG4gICAgaWYgKG4gPj0gZSlcbiAgICAgIHJldHVybiBcIkV4Y2VzcyBwYWRkaW5nXCI7XG4gICAgaWYgKGkgPDwgdCAtIG4gJiBvKVxuICAgICAgcmV0dXJuIFwiTm9uLXplcm8gcGFkZGluZ1wiO1xuICB9XG4gIHJldHVybiBBO1xufVxuZnVuY3Rpb24geXMocykge1xuICByZXR1cm4gTXQocywgOCwgNSwgITApO1xufVxuZnVuY3Rpb24gbXMocykge1xuICBjb25zdCBlID0gTXQocywgNSwgOCwgITEpO1xuICBpZiAoQXJyYXkuaXNBcnJheShlKSlcbiAgICByZXR1cm4gZTtcbn1cbmZ1bmN0aW9uIEVzKHMpIHtcbiAgY29uc3QgZSA9IE10KHMsIDUsIDgsICExKTtcbiAgaWYgKEFycmF5LmlzQXJyYXkoZSkpXG4gICAgcmV0dXJuIGU7XG4gIHRocm93IG5ldyBFcnJvcihlKTtcbn1cbmZ1bmN0aW9uIGtlKHMpIHtcbiAgbGV0IGU7XG4gIHMgPT09IFwiYmVjaDMyXCIgPyBlID0gMSA6IGUgPSA3MzQ1Mzk5Mzk7XG4gIGZ1bmN0aW9uIHQobywgQSwgYykge1xuICAgIGlmIChjID0gYyB8fCA5MCwgby5sZW5ndGggKyA3ICsgQS5sZW5ndGggPiBjKVxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkV4Y2VlZHMgbGVuZ3RoIGxpbWl0XCIpO1xuICAgIG8gPSBvLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IEkgPSBJZShvKTtcbiAgICBpZiAodHlwZW9mIEkgPT0gXCJzdHJpbmdcIilcbiAgICAgIHRocm93IG5ldyBFcnJvcihJKTtcbiAgICBsZXQgdSA9IG8gKyBcIjFcIjtcbiAgICBmb3IgKGxldCBoID0gMDsgaCA8IEEubGVuZ3RoOyArK2gpIHtcbiAgICAgIGNvbnN0IGcgPSBBW2hdO1xuICAgICAgaWYgKGcgPj4gNSAhPT0gMClcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm9uIDUtYml0IHdvcmRcIik7XG4gICAgICBJID0gc3QoSSkgXiBnLCB1ICs9IHh0LmNoYXJBdChnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaCA9IDA7IGggPCA2OyArK2gpXG4gICAgICBJID0gc3QoSSk7XG4gICAgSSBePSBlO1xuICAgIGZvciAobGV0IGggPSAwOyBoIDwgNjsgKytoKSB7XG4gICAgICBjb25zdCBnID0gSSA+PiAoNSAtIGgpICogNSAmIDMxO1xuICAgICAgdSArPSB4dC5jaGFyQXQoZyk7XG4gICAgfVxuICAgIHJldHVybiB1O1xuICB9XG4gIGZ1bmN0aW9uIHIobywgQSkge1xuICAgIGlmIChBID0gQSB8fCA5MCwgby5sZW5ndGggPCA4KVxuICAgICAgcmV0dXJuIG8gKyBcIiB0b28gc2hvcnRcIjtcbiAgICBpZiAoby5sZW5ndGggPiBBKVxuICAgICAgcmV0dXJuIFwiRXhjZWVkcyBsZW5ndGggbGltaXRcIjtcbiAgICBjb25zdCBjID0gby50b0xvd2VyQ2FzZSgpLCBJID0gby50b1VwcGVyQ2FzZSgpO1xuICAgIGlmIChvICE9PSBjICYmIG8gIT09IEkpXG4gICAgICByZXR1cm4gXCJNaXhlZC1jYXNlIHN0cmluZyBcIiArIG87XG4gICAgbyA9IGM7XG4gICAgY29uc3QgdSA9IG8ubGFzdEluZGV4T2YoXCIxXCIpO1xuICAgIGlmICh1ID09PSAtMSlcbiAgICAgIHJldHVybiBcIk5vIHNlcGFyYXRvciBjaGFyYWN0ZXIgZm9yIFwiICsgbztcbiAgICBpZiAodSA9PT0gMClcbiAgICAgIHJldHVybiBcIk1pc3NpbmcgcHJlZml4IGZvciBcIiArIG87XG4gICAgY29uc3QgaCA9IG8uc2xpY2UoMCwgdSksIGcgPSBvLnNsaWNlKHUgKyAxKTtcbiAgICBpZiAoZy5sZW5ndGggPCA2KVxuICAgICAgcmV0dXJuIFwiRGF0YSB0b28gc2hvcnRcIjtcbiAgICBsZXQgcCA9IEllKGgpO1xuICAgIGlmICh0eXBlb2YgcCA9PSBcInN0cmluZ1wiKVxuICAgICAgcmV0dXJuIHA7XG4gICAgY29uc3QgeCA9IFtdO1xuICAgIGZvciAobGV0IE0gPSAwOyBNIDwgZy5sZW5ndGg7ICsrTSkge1xuICAgICAgY29uc3QgTCA9IGcuY2hhckF0KE0pLCBfID0gVWVbTF07XG4gICAgICBpZiAoXyA9PT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gXCJVbmtub3duIGNoYXJhY3RlciBcIiArIEw7XG4gICAgICBwID0gc3QocCkgXiBfLCAhKE0gKyA2ID49IGcubGVuZ3RoKSAmJiB4LnB1c2goXyk7XG4gICAgfVxuICAgIHJldHVybiBwICE9PSBlID8gXCJJbnZhbGlkIGNoZWNrc3VtIGZvciBcIiArIG8gOiB7IHByZWZpeDogaCwgd29yZHM6IHggfTtcbiAgfVxuICBmdW5jdGlvbiBpKG8sIEEpIHtcbiAgICBjb25zdCBjID0gcihvLCBBKTtcbiAgICBpZiAodHlwZW9mIGMgPT0gXCJvYmplY3RcIilcbiAgICAgIHJldHVybiBjO1xuICB9XG4gIGZ1bmN0aW9uIG4obywgQSkge1xuICAgIGNvbnN0IGMgPSByKG8sIEEpO1xuICAgIGlmICh0eXBlb2YgYyA9PSBcIm9iamVjdFwiKVxuICAgICAgcmV0dXJuIGM7XG4gICAgdGhyb3cgbmV3IEVycm9yKGMpO1xuICB9XG4gIHJldHVybiB7XG4gICAgZGVjb2RlVW5zYWZlOiBpLFxuICAgIGRlY29kZTogbixcbiAgICBlbmNvZGU6IHQsXG4gICAgdG9Xb3JkczogeXMsXG4gICAgZnJvbVdvcmRzVW5zYWZlOiBtcyxcbiAgICBmcm9tV29yZHM6IEVzXG4gIH07XG59XG5pdC5iZWNoMzIgPSBrZShcImJlY2gzMlwiKTtcbml0LmJlY2gzMm0gPSBrZShcImJlY2gzMm1cIik7XG52YXIgQnMgPSBXdCAmJiBXdC5fX2ltcG9ydERlZmF1bHQgfHwgZnVuY3Rpb24ocykge1xuICByZXR1cm4gcyAmJiBzLl9fZXNNb2R1bGUgPyBzIDogeyBkZWZhdWx0OiBzIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHhlLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogITAgfSk7XG5jb25zdCB4cyA9IEJzKFEuZXhwb3J0cyksIGZ0ID0gaXQsIEt0ID0gXCJhc3NldFwiO1xuY2xhc3MgaHQge1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgdGhpcy5oYXNoQnVmID0gZTtcbiAgfVxuICBzdGF0aWMgZnJvbUhhc2goZSkge1xuICAgIHJldHVybiBuZXcgaHQoZSk7XG4gIH1cbiAgc3RhdGljIGZyb21QYXJ0cyhlLCB0KSB7XG4gICAgY29uc3QgciA9ICgwLCB4cy5kZWZhdWx0KSgyMCkudXBkYXRlKG5ldyBVaW50OEFycmF5KFsuLi5lLCAuLi50XSkpLmRpZ2VzdChcImJpbmFyeVwiKTtcbiAgICByZXR1cm4gaHQuZnJvbUhhc2gocik7XG4gIH1cbiAgc3RhdGljIGZyb21CZWNoMzIoZSkge1xuICAgIGNvbnN0IHsgcHJlZml4OiB0LCB3b3JkczogciB9ID0gZnQuYmVjaDMyLmRlY29kZShlKTtcbiAgICBpZiAodCAhPT0gS3QpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbnZhbGlkIGFzc2V0IGZpbmdlcnByaW50XCIpO1xuICAgIGNvbnN0IGkgPSBCdWZmZXIuZnJvbShmdC5iZWNoMzIuZnJvbVdvcmRzKHIpKTtcbiAgICByZXR1cm4gaHQuZnJvbUhhc2goaSk7XG4gIH1cbiAgZmluZ2VycHJpbnQoKSB7XG4gICAgY29uc3QgZSA9IGZ0LmJlY2gzMi50b1dvcmRzKHRoaXMuaGFzaEJ1Zik7XG4gICAgcmV0dXJuIGZ0LmJlY2gzMi5lbmNvZGUoS3QsIGUpO1xuICB9XG4gIGhhc2goKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMuaGFzaEJ1ZikudG9TdHJpbmcoXCJoZXhcIik7XG4gIH1cbiAgcHJlZml4KCkge1xuICAgIHJldHVybiBLdDtcbiAgfVxuICBjaGVja3N1bSgpIHtcbiAgICByZXR1cm4gdGhpcy5maW5nZXJwcmludCgpLnNsaWNlKC02KTtcbiAgfVxufVxudmFyIFFzID0geGUuZGVmYXVsdCA9IGh0O1xuY29uc3QgU3MgPSBRcywgRHMgPSAocywgZSkgPT4ge1xuICBjb25zdCB0ID0gdnMocyksIHIgPSB0LmRlcml2ZShidCArIDE4NTIpLmRlcml2ZShidCArIDE4MTUpLmRlcml2ZShidCArIGUpLCBpID0gci5kZXJpdmUoMCkuZGVyaXZlKDApLnRvX3Jhd19rZXkoKSwgbiA9IHIuZGVyaXZlKDIpLmRlcml2ZSgwKS50b19yYXdfa2V5KCk7XG4gIHJldHVybiByLmZyZWUoKSwgdC5mcmVlKCksIHsgcGF5bWVudEtleTogaSwgc3Rha2VLZXk6IG4gfTtcbn0sIHR0ID0gKHMpID0+IGEuQWRkcmVzcy5mcm9tX2J5dGVzKGYocykpLCB2cyA9IChzKSA9PiBhLkJpcDMyUHJpdmF0ZUtleS5mcm9tX2J5dGVzKGYocykpLCBicyA9IChzKSA9PiBhLkRhdGFIYXNoLmZyb21fYnl0ZXMoZihzKSksIEYgPSAocykgPT4gYS5FZDI1NTE5S2V5SGFzaC5mcm9tX2J5dGVzKGYocykpLCBLcyA9IChzKSA9PiBhLkVkMjU1MTlTaWduYXR1cmUuZnJvbV9ieXRlcyhmKHMpKSwgU3QgPSAocykgPT4gYS5OYXRpdmVTY3JpcHQuZnJvbV9ieXRlcyhmKHMpKSwgVXMgPSAocykgPT4gYS5QdWJsaWNLZXkuZnJvbV9ieXRlcyhmKHMpKSwga3MgPSAocykgPT4gYS5QbHV0dXNEYXRhLmZyb21fYnl0ZXMoZihzKSksIGF0ID0gKHMsIGUpID0+IGEuUGx1dHVzU2NyaXB0LmZyb21fYnl0ZXNfd2l0aF92ZXJzaW9uKGYocyksIG10W2VdKSwgRnMgPSAocykgPT4gYS5TY3JpcHRSZWYuZnJvbV9ieXRlcyhmKHMpKSwgTnMgPSAocykgPT4gYS5TY3JpcHRIYXNoLmZyb21fYnl0ZXMoZihzKSksIFcgPSAocykgPT4gYS5UcmFuc2FjdGlvbi5mcm9tX2J5dGVzKGYocykpLCBGZSA9IChzKSA9PiBhLlRyYW5zYWN0aW9uSGFzaC5mcm9tX2J5dGVzKGYocykpLCBoZSA9IChzKSA9PiBhLlRyYW5zYWN0aW9uVW5zcGVudE91dHB1dC5mcm9tX2J5dGVzKGYocykpLCBIcyA9IChzKSA9PiBhLlRyYW5zYWN0aW9uV2l0bmVzc1NldC5mcm9tX2J5dGVzKGYocykpLCBQcyA9IChzKSA9PiBhLlZhbHVlLmZyb21fYnl0ZXMoZihzKSksIEggPSAocykgPT4gYS5BZGRyZXNzLmZyb21fYmVjaDMyKHMpLCBUdCA9IChzKSA9PiBhLkJhc2VBZGRyZXNzLmZyb21fYWRkcmVzcyhIKHMpKSwgTmUgPSAocykgPT4gYS5FbnRlcnByaXNlQWRkcmVzcy5mcm9tX2FkZHJlc3MoSChzKSksIEhlID0gKHMpID0+IGEuUmV3YXJkQWRkcmVzcy5mcm9tX2FkZHJlc3MoSChzKSksIEsgPSAocykgPT4gQnVmZmVyLmZyb20ocykudG9TdHJpbmcoXCJoZXhcIiksIGYgPSAocykgPT4gcy5sZW5ndGggJSAyID09PSAwICYmIC9eWzAtOUEtRl0qJC9pLnRlc3QocykgPyBCdWZmZXIuZnJvbShzLCBcImhleFwiKSA6IEJ1ZmZlci5mcm9tKHMsIFwidXRmLThcIiksIER0ID0gKHMpID0+IHtcbiAgY29uc3QgZSA9ICh0KSA9PiB7XG4gICAgY29uc3QgciA9IG5ldyBBcnJheSgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdC5sZW4oKTsgaSArPSAxKVxuICAgICAgci5wdXNoKER0KHQuZ2V0KGkpKSk7XG4gICAgcmV0dXJuIHI7XG4gIH07XG4gIHN3aXRjaCAocy5raW5kKCkpIHtcbiAgICBjYXNlIGEuTmF0aXZlU2NyaXB0S2luZC5TY3JpcHRBbGw6IHtcbiAgICAgIGNvbnN0IHQgPSBzLmFzX3NjcmlwdF9hbGwoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiYWxsXCIsXG4gICAgICAgIHNjcmlwdHM6IGUodC5uYXRpdmVfc2NyaXB0cygpKVxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBhLk5hdGl2ZVNjcmlwdEtpbmQuU2NyaXB0QW55OiB7XG4gICAgICBjb25zdCB0ID0gcy5hc19zY3JpcHRfYW55KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImFueVwiLFxuICAgICAgICBzY3JpcHRzOiBlKHQubmF0aXZlX3NjcmlwdHMoKSlcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgYS5OYXRpdmVTY3JpcHRLaW5kLlNjcmlwdE5PZks6IHtcbiAgICAgIGNvbnN0IHQgPSBzLmFzX3NjcmlwdF9uX29mX2soKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiYXRMZWFzdFwiLFxuICAgICAgICByZXF1aXJlZDogdC5uKCksXG4gICAgICAgIHNjcmlwdHM6IGUodC5uYXRpdmVfc2NyaXB0cygpKVxuICAgICAgfTtcbiAgICB9XG4gICAgY2FzZSBhLk5hdGl2ZVNjcmlwdEtpbmQuVGltZWxvY2tTdGFydDoge1xuICAgICAgY29uc3QgdCA9IHMuYXNfdGltZWxvY2tfc3RhcnQoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFwiYWZ0ZXJcIixcbiAgICAgICAgc2xvdDogdC5zbG90X2JpZ251bSgpLnRvX3N0cigpXG4gICAgICB9O1xuICAgIH1cbiAgICBjYXNlIGEuTmF0aXZlU2NyaXB0S2luZC5UaW1lbG9ja0V4cGlyeToge1xuICAgICAgY29uc3QgdCA9IHMuYXNfdGltZWxvY2tfZXhwaXJ5KCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBcImJlZm9yZVwiLFxuICAgICAgICBzbG90OiB0LnNsb3RfYmlnbnVtKCkudG9fc3RyKClcbiAgICAgIH07XG4gICAgfVxuICAgIGNhc2UgYS5OYXRpdmVTY3JpcHRLaW5kLlNjcmlwdFB1YmtleToge1xuICAgICAgY29uc3QgdCA9IHMuYXNfc2NyaXB0X3B1YmtleSgpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogXCJzaWdcIixcbiAgICAgICAga2V5SGFzaDogdC5hZGRyX2tleWhhc2goKS50b19oZXgoKVxuICAgICAgfTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgU2NyaXB0IEtpbmQ6ICR7cy5raW5kKCl9LCBpcyBub3Qgc3VwcG9ydGVkYCk7XG4gIH1cbn0sIHZ0ID0gKHMpID0+IHtcbiAgY29uc3QgZSA9ICh0KSA9PiB7XG4gICAgY29uc3QgciA9IGEuTmF0aXZlU2NyaXB0cy5uZXcoKTtcbiAgICByZXR1cm4gdC5mb3JFYWNoKChpKSA9PiB7XG4gICAgICByLmFkZCh2dChpKSk7XG4gICAgfSksIHI7XG4gIH07XG4gIHN3aXRjaCAocy50eXBlKSB7XG4gICAgY2FzZSBcImFsbFwiOlxuICAgICAgcmV0dXJuIGEuTmF0aXZlU2NyaXB0Lm5ld19zY3JpcHRfYWxsKGEuU2NyaXB0QWxsLm5ldyhlKHMuc2NyaXB0cykpKTtcbiAgICBjYXNlIFwiYW55XCI6XG4gICAgICByZXR1cm4gYS5OYXRpdmVTY3JpcHQubmV3X3NjcmlwdF9hbnkoYS5TY3JpcHRBbnkubmV3KGUocy5zY3JpcHRzKSkpO1xuICAgIGNhc2UgXCJhdExlYXN0XCI6XG4gICAgICByZXR1cm4gYS5OYXRpdmVTY3JpcHQubmV3X3NjcmlwdF9uX29mX2soYS5TY3JpcHROT2ZLLm5ldyhzLnJlcXVpcmVkLCBlKHMuc2NyaXB0cykpKTtcbiAgICBjYXNlIFwiYWZ0ZXJcIjpcbiAgICAgIHJldHVybiBhLk5hdGl2ZVNjcmlwdC5uZXdfdGltZWxvY2tfc3RhcnQoYS5UaW1lbG9ja1N0YXJ0Lm5ld190aW1lbG9ja3N0YXJ0KGEuQmlnTnVtLmZyb21fc3RyKHMuc2xvdCkpKTtcbiAgICBjYXNlIFwiYmVmb3JlXCI6XG4gICAgICByZXR1cm4gYS5OYXRpdmVTY3JpcHQubmV3X3RpbWVsb2NrX2V4cGlyeShhLlRpbWVsb2NrRXhwaXJ5Lm5ld190aW1lbG9ja2V4cGlyeShhLkJpZ051bS5mcm9tX3N0cihzLnNsb3QpKSk7XG4gICAgY2FzZSBcInNpZ1wiOlxuICAgICAgcmV0dXJuIGEuTmF0aXZlU2NyaXB0Lm5ld19zY3JpcHRfcHVia2V5KGEuU2NyaXB0UHVia2V5Lm5ldyhGKHMua2V5SGFzaCkpKTtcbiAgfVxufSwgWCA9IChzKSA9PiB7XG4gIGNvbnN0IGUgPSAodCkgPT4ge1xuICAgIGNvbnN0IHIgPSBhLlBsdXR1c0xpc3QubmV3KCk7XG4gICAgcmV0dXJuIHQuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgci5hZGQoWChpKSk7XG4gICAgfSksIHI7XG4gIH07XG4gIHN3aXRjaCAodHlwZW9mIHMpIHtcbiAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICByZXR1cm4gYS5QbHV0dXNEYXRhLm5ld19ieXRlcyhmKHMpKTtcbiAgICBjYXNlIFwibnVtYmVyXCI6XG4gICAgICByZXR1cm4gYS5QbHV0dXNEYXRhLm5ld19pbnRlZ2VyKGEuQmlnSW50LmZyb21fc3RyKHMudG9TdHJpbmcoKSkpO1xuICAgIGNhc2UgXCJvYmplY3RcIjpcbiAgICAgIGlmIChzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgY29uc3QgdCA9IGUocyk7XG4gICAgICAgIHJldHVybiBhLlBsdXR1c0RhdGEubmV3X2xpc3QodCk7XG4gICAgICB9IGVsc2UgaWYgKHMgaW5zdGFuY2VvZiBNYXApIHtcbiAgICAgICAgY29uc3QgdCA9IGEuUGx1dHVzTWFwLm5ldygpO1xuICAgICAgICByZXR1cm4gcy5mb3JFYWNoKChyLCBpKSA9PiB7XG4gICAgICAgICAgdC5pbnNlcnQoWChpKSwgWChyKSk7XG4gICAgICAgIH0pLCBhLlBsdXR1c0RhdGEubmV3X21hcCh0KTtcbiAgICAgIH0gZWxzZVxuICAgICAgICByZXR1cm4gYS5QbHV0dXNEYXRhLm5ld19jb25zdHJfcGx1dHVzX2RhdGEoYS5Db25zdHJQbHV0dXNEYXRhLm5ldyhhLkJpZ051bS5mcm9tX3N0cihzLmFsdGVybmF0aXZlLnRvU3RyaW5nKCkpLCBlKHMuZmllbGRzKSkpO1xuICB9XG59LCBNcyA9IChzKSA9PiB7XG4gIGNvbnN0IGUgPSBhLlJlbGF5cy5uZXcoKTtcbiAgdGhyb3cgcy5yZWxheXMuZm9yRWFjaCgodCkgPT4ge1xuICAgIGUuYWRkKFRzKHQpKTtcbiAgfSksIG5ldyBFcnJvcihcInRvUG9vbFBhcmFtcyBub3QgaW1wbGVtZW50ZWQuXCIpO1xufSwgUGUgPSAocykgPT4ge1xuICBjb25zdCBlID0gKHQpID0+IGplW3RdO1xuICByZXR1cm4gYS5SZWRlZW1lci5uZXcoZShzLnRhZyksIGEuQmlnTnVtLmZyb21fc3RyKHMuaW5kZXgudG9TdHJpbmcoKSksIFgocy5kYXRhKSwgYS5FeFVuaXRzLm5ldyhhLkJpZ051bS5mcm9tX3N0cihzLmJ1ZGdldC5tZW0udG9TdHJpbmcoKSksIGEuQmlnTnVtLmZyb21fc3RyKHMuYnVkZ2V0LnN0ZXBzLnRvU3RyaW5nKCkpKSk7XG59LCBUcyA9IChzKSA9PiB7XG4gIHN3aXRjaCAocy50eXBlKSB7XG4gICAgY2FzZSBcIlNpbmdsZUhvc3RBZGRyXCI6IHtcbiAgICAgIGNvbnN0IGUgPSBzLklQVjQgPyBhLklwdjQubmV3KG5ldyBVaW50OEFycmF5KHMuSVBWNC5zcGxpdChcIi5cIikubWFwKChyKSA9PiBwYXJzZUludChyKSkpKSA6IHZvaWQgMCwgdCA9IHMuSVBWNiA/IGEuSXB2Ni5uZXcoZihzLklQVjYucmVwbGFjZUFsbChcIjpcIiwgXCJcIikpKSA6IHZvaWQgMDtcbiAgICAgIHJldHVybiBhLlJlbGF5Lm5ld19zaW5nbGVfaG9zdF9hZGRyKGEuU2luZ2xlSG9zdEFkZHIubmV3KHMucG9ydCwgZSwgdCkpO1xuICAgIH1cbiAgICBjYXNlIFwiU2luZ2xlSG9zdE5hbWVcIjpcbiAgICAgIHJldHVybiBhLlJlbGF5Lm5ld19zaW5nbGVfaG9zdF9uYW1lKGEuU2luZ2xlSG9zdE5hbWUubmV3KHMucG9ydCwgYS5ETlNSZWNvcmRBb3JBQUFBLm5ldyhzLmRvbWFpbk5hbWUpKSk7XG4gICAgY2FzZSBcIk11bHRpSG9zdE5hbWVcIjpcbiAgICAgIHJldHVybiBhLlJlbGF5Lm5ld19tdWx0aV9ob3N0X25hbWUoYS5NdWx0aUhvc3ROYW1lLm5ldyhhLkROU1JlY29yZFNSVi5uZXcocy5kb21haW5OYW1lKSkpO1xuICB9XG59LCBNZSA9IChzKSA9PiB7XG4gIGlmIChzLmlzX3BsdXR1c19zY3JpcHQoKSkge1xuICAgIGNvbnN0IHQgPSBzLnBsdXR1c19zY3JpcHQoKTtcbiAgICByZXR1cm4ge1xuICAgICAgY29kZTogdC50b19oZXgoKSxcbiAgICAgIHZlcnNpb246IE9iamVjdC5rZXlzKG10KS5maW5kKChyKSA9PiBtdFtyXS50b19oZXgoKSA9PT0gdC5sYW5ndWFnZV92ZXJzaW9uKCkudG9faGV4KCkpXG4gICAgfTtcbiAgfVxuICBjb25zdCBlID0gcy5uYXRpdmVfc2NyaXB0KCk7XG4gIHJldHVybiBEdChlKTtcbn0sIGR0ID0gKHMpID0+IHtcbiAgaWYgKFwiY29kZVwiIGluIHMpIHtcbiAgICBjb25zdCBlID0gYXQocy5jb2RlLCBzLnZlcnNpb24pO1xuICAgIHJldHVybiBhLlNjcmlwdFJlZi5uZXdfcGx1dHVzX3NjcmlwdChlKTtcbiAgfVxuICByZXR1cm4gYS5TY3JpcHRSZWYubmV3X25hdGl2ZV9zY3JpcHQodnQocykpO1xufSwgUXQgPSAocykgPT4ge1xuICB2YXIgaSwgbiwgbztcbiAgY29uc3QgZSA9IHMub3V0cHV0KCkuaGFzX2RhdGFfaGFzaCgpID8gKGkgPSBzLm91dHB1dCgpLmRhdGFfaGFzaCgpKSA9PSBudWxsID8gdm9pZCAwIDogaS50b19oZXgoKSA6IHZvaWQgMCwgdCA9IHMub3V0cHV0KCkuaGFzX3BsdXR1c19kYXRhKCkgPyAobiA9IHMub3V0cHV0KCkucGx1dHVzX2RhdGEoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IG4udG9faGV4KCkgOiB2b2lkIDAsIHIgPSBzLm91dHB1dCgpLmhhc19zY3JpcHRfcmVmKCkgPyAobyA9IHMub3V0cHV0KCkuc2NyaXB0X3JlZigpKSA9PSBudWxsID8gdm9pZCAwIDogby50b19oZXgoKSA6IHZvaWQgMDtcbiAgcmV0dXJuIHtcbiAgICBpbnB1dDoge1xuICAgICAgb3V0cHV0SW5kZXg6IHMuaW5wdXQoKS5pbmRleCgpLFxuICAgICAgdHhIYXNoOiBzLmlucHV0KCkudHJhbnNhY3Rpb25faWQoKS50b19oZXgoKVxuICAgIH0sXG4gICAgb3V0cHV0OiB7XG4gICAgICBhZGRyZXNzOiBzLm91dHB1dCgpLmFkZHJlc3MoKS50b19iZWNoMzIoKSxcbiAgICAgIGFtb3VudDogVGUocy5vdXRwdXQoKS5hbW91bnQoKSksXG4gICAgICBkYXRhSGFzaDogZSxcbiAgICAgIHBsdXR1c0RhdGE6IHQsXG4gICAgICBzY3JpcHRSZWY6IHJcbiAgICB9XG4gIH07XG59LCBPID0gKHMpID0+IHtcbiAgY29uc3QgZSA9IGEuVHJhbnNhY3Rpb25JbnB1dC5uZXcoRmUocy5pbnB1dC50eEhhc2gpLCBzLmlucHV0Lm91dHB1dEluZGV4KSwgdCA9IGEuVHJhbnNhY3Rpb25PdXRwdXQubmV3KEgocy5vdXRwdXQuYWRkcmVzcyksIHl0KHMub3V0cHV0LmFtb3VudCkpO1xuICByZXR1cm4gcy5vdXRwdXQuZGF0YUhhc2ggIT09IHZvaWQgMCAmJiB0LnNldF9kYXRhX2hhc2goYnMocy5vdXRwdXQuZGF0YUhhc2gpKSwgcy5vdXRwdXQucGx1dHVzRGF0YSAhPT0gdm9pZCAwICYmIHQuc2V0X3BsdXR1c19kYXRhKGtzKHMub3V0cHV0LnBsdXR1c0RhdGEpKSwgcy5vdXRwdXQuc2NyaXB0UmVmICE9PSB2b2lkIDAgJiYgdC5zZXRfc2NyaXB0X3JlZihGcyhzLm91dHB1dC5zY3JpcHRSZWYpKSwgYS5UcmFuc2FjdGlvblVuc3BlbnRPdXRwdXQubmV3KGUsIHQpO1xufSwgdWUgPSAocykgPT4ge1xuICBjb25zdCBlID0gcy5zcGxpdChcIi5cIilbMV0gPz8gXCIwXCIsIHQgPSBgJHtwYXJzZUludChlLCAxMCl9YCwgciA9IFwiMVwiICsgXCIwXCIucmVwZWF0KGUubGVuZ3RoKTtcbiAgcmV0dXJuIGEuVW5pdEludGVydmFsLm5ldyhhLkJpZ051bS5mcm9tX3N0cih0KSwgYS5CaWdOdW0uZnJvbV9zdHIocikpO1xufSwgUyA9IChzKSA9PiBzLmxlbmd0aCAlIDIgPT09IDAgJiYgL15bMC05QS1GXSokL2kudGVzdChzKSA/IHMgOiBLKEJ1ZmZlci5mcm9tKHMsIFwidXRmLThcIikpLCBWdCA9IChzKSA9PiBCdWZmZXIuZnJvbShzLCBcImhleFwiKS50b1N0cmluZyhcInV0Zi04XCIpLCBUZSA9IChzKSA9PiB7XG4gIGNvbnN0IGUgPSBbXG4gICAgeyB1bml0OiBcImxvdmVsYWNlXCIsIHF1YW50aXR5OiBzLmNvaW4oKS50b19zdHIoKSB9XG4gIF0sIHQgPSBzLm11bHRpYXNzZXQoKTtcbiAgaWYgKHQgIT09IHZvaWQgMCkge1xuICAgIGNvbnN0IHIgPSB0LmtleXMoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHIubGVuKCk7IGkgKz0gMSkge1xuICAgICAgY29uc3QgbiA9IHIuZ2V0KGkpLCBvID0gdC5nZXQobik7XG4gICAgICBpZiAobyAhPT0gdm9pZCAwKSB7XG4gICAgICAgIGNvbnN0IEEgPSBvLmtleXMoKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBBLmxlbigpOyBjICs9IDEpIHtcbiAgICAgICAgICBjb25zdCBJID0gQS5nZXQoYyksIHUgPSBvLmdldChJKSA/PyBhLkJpZ051bS5mcm9tX3N0cihcIjBcIiksIGggPSBuLnRvX2hleCgpICsgSyhJLm5hbWUoKSk7XG4gICAgICAgICAgZS5wdXNoKHsgdW5pdDogaCwgcXVhbnRpdHk6IHUudG9fc3RyKCkgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGU7XG59LCB5dCA9IChzKSA9PiB7XG4gIGNvbnN0IGUgPSBzLmZpbmQoKG4pID0+IG4udW5pdCA9PT0gXCJsb3ZlbGFjZVwiKSwgdCA9IEFycmF5LmZyb20obmV3IFNldChzLmZpbHRlcigobikgPT4gbi51bml0ICE9PSBcImxvdmVsYWNlXCIpLm1hcCgobikgPT4gbi51bml0LnNsaWNlKDAsIE4pKSkpLCByID0gYS5NdWx0aUFzc2V0Lm5ldygpO1xuICB0LmZvckVhY2goKG4pID0+IHtcbiAgICBjb25zdCBvID0gYS5Bc3NldHMubmV3KCk7XG4gICAgcy5maWx0ZXIoKEEpID0+IEEudW5pdC5zbGljZSgwLCBOKSA9PT0gbikuZm9yRWFjaCgoQSkgPT4ge1xuICAgICAgby5pbnNlcnQoYS5Bc3NldE5hbWUubmV3KGYoQS51bml0LnNsaWNlKE4pKSksIGEuQmlnTnVtLmZyb21fc3RyKEEucXVhbnRpdHkpKTtcbiAgICB9KSwgci5pbnNlcnQoTnMobiksIG8pO1xuICB9KTtcbiAgY29uc3QgaSA9IGEuVmFsdWUubmV3KGEuQmlnTnVtLmZyb21fc3RyKGUgPyBlLnF1YW50aXR5IDogXCIwXCIpKTtcbiAgcmV0dXJuIChzLmxlbmd0aCA+IDEgfHwgIWUpICYmIGkuc2V0X211bHRpYXNzZXQociksIGk7XG59LCBkZSA9IChzLCBlLCB0KSA9PiBhLkJhc2VBZGRyZXNzLm5ldyhzLCBhLlN0YWtlQ3JlZGVudGlhbC5mcm9tX2tleWhhc2goZSksIGEuU3Rha2VDcmVkZW50aWFsLmZyb21fa2V5aGFzaCh0KSksIFZlID0gKHMsIGUgPSBcIlwiKSA9PiBhLkJpcDMyUHJpdmF0ZUtleS5mcm9tX2JpcDM5X2VudHJvcHkoZihzKSwgZihTKGUpKSksIGxlID0gKHMpID0+IGEuRGF0YUNvc3QubmV3X2NvaW5zX3Blcl9ieXRlKGEuQmlnTnVtLmZyb21fc3RyKHMpKSwgVnMgPSAocykgPT4ge1xuICBpZiAodHlwZW9mIHMgIT0gXCJvYmplY3RcIiB8fCAhKFwiaW5wdXRcIiBpbiBzKSlcbiAgICByZXR1cm4gYS5EYXR1bVNvdXJjZS5uZXcoWChzKSk7XG4gIGNvbnN0IGUgPSBPKHMpO1xuICBpZiAoZS5vdXRwdXQoKS5oYXNfcGx1dHVzX2RhdGEoKSlcbiAgICByZXR1cm4gYS5EYXR1bVNvdXJjZS5uZXdfcmVmX2lucHV0KGUuaW5wdXQoKSk7XG4gIHRocm93IG5ldyBFcnJvcihgTm8gaW5saW5lIGRhdHVtIGZvdW5kIGluIFVUeE86ICR7ZS5pbnB1dCgpLnRyYW5zYWN0aW9uX2lkKCkudG9faGV4KCl9YCk7XG59LCBnZSA9IChzLCBlKSA9PiBhLkVudGVycHJpc2VBZGRyZXNzLm5ldyhzLCBhLlN0YWtlQ3JlZGVudGlhbC5mcm9tX2tleWhhc2goZSkpLCBmZSA9IChzLCBlKSA9PiB7XG4gIGlmICh0eXBlb2YgcyA9PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBhLk1pbnRXaXRuZXNzLm5ld19uYXRpdmVfc2NyaXB0KFN0KHMpKTtcbiAgaWYgKGUgPT09IHZvaWQgMClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaW50aW5nIHdpdGggcGx1dHVzIHJlcXVpcmVzIGEgcmVkZWVtZXIgdG8gYmUgZGVmaW5lZFwiKTtcbiAgaWYgKGUudGFnICE9PSBcIk1JTlRcIilcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJNaW50aW5nIHJlZGVlbWVyJ3MgdGFnIG11c3QgYmUgZGVmaW5lZCBhcyAnTUlOVCdcIik7XG4gIHJldHVybiBhLk1pbnRXaXRuZXNzLm5ld19wbHV0dXNfc2NyaXB0KE9lKHMpLCBQZSh7XG4gICAgdGFnOiBcIk1JTlRcIixcbiAgICBpbmRleDogMCxcbiAgICBidWRnZXQ6IG1lLFxuICAgIGRhdGE6IHtcbiAgICAgIGFsdGVybmF0aXZlOiAwLFxuICAgICAgZmllbGRzOiBbXVxuICAgIH0sXG4gICAgLi4uZVxuICB9KSk7XG59LCBGdCA9IChzLCBlKSA9PiBhLlJld2FyZEFkZHJlc3MubmV3KHMsIGEuU3Rha2VDcmVkZW50aWFsLmZyb21fa2V5aGFzaChlKSksIE9lID0gKHMpID0+IHtcbiAgaWYgKFwiY29kZVwiIGluIHMpXG4gICAgcmV0dXJuIGEuUGx1dHVzU2NyaXB0U291cmNlLm5ldyhhdChzLmNvZGUsIHMudmVyc2lvbikpO1xuICBjb25zdCBlID0gTyhzKTtcbiAgaWYgKGUub3V0cHV0KCkuaGFzX3NjcmlwdF9yZWYoKSkge1xuICAgIGNvbnN0IHQgPSBlLm91dHB1dCgpLnNjcmlwdF9yZWYoKTtcbiAgICBpZiAodC5pc19wbHV0dXNfc2NyaXB0KCkpIHtcbiAgICAgIGNvbnN0IHIgPSBNZSh0KSwgaSA9IGF0KHIuY29kZSwgci52ZXJzaW9uKS5oYXNoKCk7XG4gICAgICByZXR1cm4gYS5QbHV0dXNTY3JpcHRTb3VyY2UubmV3X3JlZl9pbnB1dF93aXRoX2xhbmdfdmVyKGksIGUuaW5wdXQoKSwgbXRbci52ZXJzaW9uXSk7XG4gICAgfVxuICB9XG4gIHRocm93IG5ldyBFcnJvcihgTm8gcGx1dHVzIHNjcmlwdCByZWZlcmVuY2UgZm91bmQgaW4gVVR4TzogJHtlLmlucHV0KCkudHJhbnNhY3Rpb25faWQoKS50b19oZXgoKX1gKTtcbn0sIF90ID0gKHMpID0+IHtcbiAgY29uc3QgZSA9IGEuU2NyaXB0UHVia2V5Lm5ldyhzKTtcbiAgcmV0dXJuIGEuTmF0aXZlU2NyaXB0Lm5ld19zY3JpcHRfcHVia2V5KGUpO1xufSwgT3MgPSAocyA9IFkpID0+IHtcbiAgY29uc3QgZSA9IGEuVHJhbnNhY3Rpb25CdWlsZGVyQ29uZmlnQnVpbGRlci5uZXcoKS5jb2luc19wZXJfdXR4b19ieXRlKGEuQmlnTnVtLmZyb21fc3RyKHMuY29pbnNQZXJVVHhPU2l6ZSkpLmV4X3VuaXRfcHJpY2VzKGEuRXhVbml0UHJpY2VzLm5ldyh1ZShzLnByaWNlTWVtLnRvU3RyaW5nKCkpLCB1ZShzLnByaWNlU3RlcC50b1N0cmluZygpKSkpLmZlZV9hbGdvKGEuTGluZWFyRmVlLm5ldyhhLkJpZ051bS5mcm9tX3N0cihzLm1pbkZlZUEudG9TdHJpbmcoKSksIGEuQmlnTnVtLmZyb21fc3RyKHMubWluRmVlQi50b1N0cmluZygpKSkpLmtleV9kZXBvc2l0KGEuQmlnTnVtLmZyb21fc3RyKHMua2V5RGVwb3NpdCkpLm1heF90eF9zaXplKHMubWF4VHhTaXplKS5tYXhfdmFsdWVfc2l6ZShwYXJzZUludChzLm1heFZhbFNpemUsIDEwKSkucG9vbF9kZXBvc2l0KGEuQmlnTnVtLmZyb21fc3RyKHMucG9vbERlcG9zaXQpKS5idWlsZCgpO1xuICByZXR1cm4gYS5UcmFuc2FjdGlvbkJ1aWxkZXIubmV3KGUpO1xufSwgX2UgPSAocykgPT4ge1xuICBjb25zdCBlID0gYS5UeElucHV0c0J1aWxkZXIubmV3KCk7XG4gIHJldHVybiBzLm1hcCgodCkgPT4gdCBpbnN0YW5jZW9mIGEuVHJhbnNhY3Rpb25VbnNwZW50T3V0cHV0ID8gdCA6IE8odCkpLmZvckVhY2goKHQpID0+IHtcbiAgICBlLmFkZF9pbnB1dCh0Lm91dHB1dCgpLmFkZHJlc3MoKSwgdC5pbnB1dCgpLCB0Lm91dHB1dCgpLmFtb3VudCgpKTtcbiAgfSksIGU7XG59LCBDdCA9IChzKSA9PiB7XG4gIGlmICh0eXBlb2YgcyA9PSBcInN0cmluZ1wiKVxuICAgIHJldHVybiBhLlRyYW5zYWN0aW9uT3V0cHV0QnVpbGRlci5uZXcoKS53aXRoX2FkZHJlc3MoSChzKSk7XG4gIGxldCBlID0gYS5UcmFuc2FjdGlvbk91dHB1dEJ1aWxkZXIubmV3KCkud2l0aF9hZGRyZXNzKEgocy5hZGRyZXNzKSk7XG4gIGlmIChzLmRhdHVtKSB7XG4gICAgY29uc3QgeyB2YWx1ZTogdCwgaW5saW5lOiByIH0gPSBzLmRhdHVtLCBpID0gWCh0KTtcbiAgICBlID0gZS53aXRoX2RhdGFfaGFzaChhLmhhc2hfcGx1dHVzX2RhdGEoaSkpLCByICYmIChlID0gZS53aXRoX3BsdXR1c19kYXRhKGkpKTtcbiAgfVxuICBpZiAocy5zY3JpcHQpIHtcbiAgICBjb25zdCB0ID0gZHQocy5zY3JpcHQpO1xuICAgIGUgPSBlLndpdGhfc2NyaXB0X3JlZih0KTtcbiAgfVxuICByZXR1cm4gZTtcbn0sIG50ID0gKHMpID0+IHtcbiAgY29uc3QgZSA9IHMuc2xpY2UoMCwgTiksIHQgPSBzLmluY2x1ZGVzKFwiLlwiKSA/IFMocy5zcGxpdChcIi5cIilbMV0pIDogcy5zbGljZShOKTtcbiAgcmV0dXJuIHsgcG9saWN5SWQ6IGUsIGFzc2V0TmFtZTogdCB9O1xufSwgbCA9IChzKSA9PiBvdC5pc0F4aW9zRXJyb3IocykgPyBzLnJlc3BvbnNlID8gSlNPTi5zdHJpbmdpZnkoe1xuICBkYXRhOiBzLnJlc3BvbnNlLmRhdGEsXG4gIGhlYWRlcnM6IHMucmVzcG9uc2UuaGVhZGVycyxcbiAgc3RhdHVzOiBzLnJlc3BvbnNlLnN0YXR1c1xufSkgOiBzLnJlcXVlc3QgPyBKU09OLnN0cmluZ2lmeShzLnJlcXVlc3QpIDogcy5tZXNzYWdlIDogSlNPTi5zdHJpbmdpZnkocyksIFpzID0gKHMpID0+IHtcbiAgY29uc3QgZSA9IFgocyk7XG4gIHJldHVybiBhLmhhc2hfcGx1dHVzX2RhdGEoZSkudG9faGV4KCk7XG59LCB0ciA9IChzLCBlID0gRGF0ZS5ub3coKSkgPT4ge1xuICBpZiAoRXRbc10pIHtcbiAgICBjb25zdCBbdCwgciwgaSwgbl0gPSBFdFtzXTtcbiAgICByZXR1cm4gcGFyc2VJbnQoYS5CaWdOdW0uZnJvbV9zdHIoZS50b1N0cmluZygpKS5kaXZfZmxvb3IoYS5CaWdOdW0uZnJvbV9zdHIoXCIxMDAwXCIpKS5jaGVja2VkX3N1YihhLkJpZ051bS5mcm9tX3N0cihpKSkuZGl2X2Zsb29yKGEuQmlnTnVtLmZyb21fc3RyKG4pKS5jaGVja2VkX2FkZChhLkJpZ051bS5mcm9tX3N0cih0KSkudG9fc3RyKCksIDEwKTtcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgRXBvY2hObyBmb3IgbmV0d29yazogJHtzfWApO1xufSwgWXMgPSAocywgZSkgPT4gU3MuZnJvbVBhcnRzKGYocyksIGYoZSkpLmZpbmdlcnByaW50KCksIGVyID0gKHMsIGUpID0+IFhlW3NdW2VdLCBzciA9IChzKSA9PiB2dChzKS5oYXNoKCkudG9faGV4KCksIGV0ID0gKHMpID0+IHtcbiAgdmFyIGUsIHQ7XG4gIHRyeSB7XG4gICAgY29uc3QgciA9IFtcbiAgICAgIChlID0gVHQocykpID09IG51bGwgPyB2b2lkIDAgOiBlLnBheW1lbnRfY3JlZCgpLnRvX2tleWhhc2goKSxcbiAgICAgICh0ID0gTmUocykpID09IG51bGwgPyB2b2lkIDAgOiB0LnBheW1lbnRfY3JlZCgpLnRvX2tleWhhc2goKVxuICAgIF0uZmluZCgoaSkgPT4gaSAhPT0gdm9pZCAwKTtcbiAgICBpZiAociAhPT0gdm9pZCAwKVxuICAgICAgcmV0dXJuIHIudG9faGV4KCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCByZXNvbHZlIHBheW1lbnQga2V5IGhhc2ggZnJvbSBhZGRyZXNzOiAke3N9YCk7XG4gIH0gY2F0Y2ggKHIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFuIGVycm9yIG9jY3VycmVkIGR1cmluZyByZXNvbHZlUGF5bWVudEtleUhhc2g6ICR7cn0uYCk7XG4gIH1cbn0sIHJyID0gKHMsIGUgPSAwKSA9PiB7XG4gIGNvbnN0IHQgPSBhdChzLmNvZGUsIHMudmVyc2lvbik7XG4gIHJldHVybiBhLkVudGVycHJpc2VBZGRyZXNzLm5ldyhlLCBhLlN0YWtlQ3JlZGVudGlhbC5mcm9tX3NjcmlwdGhhc2godC5oYXNoKCkpKS50b19hZGRyZXNzKCkudG9fYmVjaDMyKCk7XG59LCBpciA9IChzKSA9PiB7XG4gIHRyeSB7XG4gICAgY29uc3QgZSA9IE5lKHMpLCB0ID0gZSA9PSBudWxsID8gdm9pZCAwIDogZS5wYXltZW50X2NyZWQoKS50b19zY3JpcHRoYXNoKCk7XG4gICAgaWYgKHQgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiB0LnRvX2hleCgpO1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGRuJ3QgcmVzb2x2ZSBzY3JpcHQgaGFzaCBmcm9tIGFkZHJlc3M6ICR7c31gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHJlc29sdmVTY3JpcHRIYXNoOiAke2V9LmApO1xuICB9XG59LCBhciA9IChzKSA9PiBhLkVkMjU1MTlLZXlIYXNoLmZyb21faGV4KHMpLnRvX2JlY2gzMihcInBvb2wxXCIpLCBuciA9IChzKSA9PiB7XG4gIGNvbnN0IGUgPSBwZShzLmpvaW4oXCIgXCIpKSwgdCA9IFZlKGUpLCByID0gdC50b19iZWNoMzIoKTtcbiAgcmV0dXJuIHQuZnJlZSgpLCByO1xufSwgb3IgPSAocykgPT4gZHQocykudG9faGV4KCksIEFyID0gKHMsIGUgPSBEYXRlLm5vdygpKSA9PiB7XG4gIGlmIChFdFtzXSkge1xuICAgIGNvbnN0IFt0LCByLCBpXSA9IEV0W3NdO1xuICAgIHJldHVybiBhLkJpZ051bS5mcm9tX3N0cihlLnRvU3RyaW5nKCkpLmRpdl9mbG9vcihhLkJpZ051bS5mcm9tX3N0cihcIjEwMDBcIikpLmNoZWNrZWRfc3ViKGEuQmlnTnVtLmZyb21fc3RyKGkpKS5jaGVja2VkX2FkZChhLkJpZ051bS5mcm9tX3N0cihyKSkudG9fc3RyKCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCByZXNvbHZlIFNsb3RObyBmb3IgbmV0d29yazogJHtzfWApO1xufSwgT3QgPSAocykgPT4ge1xuICB0cnkge1xuICAgIGNvbnN0IGUgPSBIKHMpLCB0ID0gVHQocyksIHIgPSB0ID09IG51bGwgPyB2b2lkIDAgOiB0LnN0YWtlX2NyZWQoKS50b19rZXloYXNoKCk7XG4gICAgaWYgKHIgIT09IHZvaWQgMClcbiAgICAgIHJldHVybiBGdChlLm5ldHdvcmtfaWQoKSwgcikudG9fYWRkcmVzcygpLnRvX2JlY2gzMigpO1xuICAgIHRocm93IG5ldyBFcnJvcihgQ291bGRuJ3QgcmVzb2x2ZSByZXdhcmQgYWRkcmVzcyBmcm9tIGFkZHJlc3M6ICR7c31gKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHRocm93IG5ldyBFcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHJlc29sdmVSZXdhcmRBZGRyZXNzOiAke2V9LmApO1xuICB9XG59LCBJdCA9IChzKSA9PiB7XG4gIHZhciBlLCB0O1xuICB0cnkge1xuICAgIGNvbnN0IHIgPSBbXG4gICAgICAoZSA9IFR0KHMpKSA9PSBudWxsID8gdm9pZCAwIDogZS5zdGFrZV9jcmVkKCkudG9fa2V5aGFzaCgpLFxuICAgICAgKHQgPSBIZShzKSkgPT0gbnVsbCA/IHZvaWQgMCA6IHQucGF5bWVudF9jcmVkKCkudG9fa2V5aGFzaCgpXG4gICAgXS5maW5kKChpKSA9PiBpICE9PSB2b2lkIDApO1xuICAgIGlmIChyICE9PSB2b2lkIDApXG4gICAgICByZXR1cm4gci50b19oZXgoKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvdWxkbid0IHJlc29sdmUgc3Rha2Uga2V5IGhhc2ggZnJvbSBhZGRyZXNzOiAke3N9YCk7XG4gIH0gY2F0Y2ggKHIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFuIGVycm9yIG9jY3VycmVkIGR1cmluZyByZXNvbHZlU3Rha2VLZXlIYXNoOiAke3J9LmApO1xuICB9XG59LCBZZSA9IChzLCBlID0gWS5taW5GZWVBLCB0ID0gWS5taW5GZWVCKSA9PiAoQmlnSW50KGUpICogQmlnSW50KHMpICsgQmlnSW50KHQpKS50b1N0cmluZygpLCBHcyA9IChzKSA9PiB7XG4gIGNvbnN0IGUgPSBXKHMpLmJvZHkoKTtcbiAgcmV0dXJuIGEuaGFzaF90cmFuc2FjdGlvbihlKS50b19oZXgoKTtcbn0sIGNyID0gKHMgPSBcIlwiLCBlID0gMzIpID0+IHtcbiAgaWYgKGUgPD0gMCB8fCBlID4gMjA0OClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJMZW5ndGggbXVzdCBiZSBiZXd0ZWVuIDEgYW5kIDIwNDhcIik7XG4gIGNvbnN0IHIgPSBDZShcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCIpKGUpO1xuICByZXR1cm4gUyhgJHtzfSR7cn1gKTtcbn0sIEdlID0gKHMsIGUpID0+IHtcbiAgY29uc3QgdCA9IHMudmtleXMoKTtcbiAgaWYgKHQgIT09IHZvaWQgMCkge1xuICAgIGNvbnN0IHIgPSAvKiBAX19QVVJFX18gKi8gbmV3IFNldCgpO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW4oKTsgbiArPSAxKVxuICAgICAgci5hZGQodC5nZXQobikudG9faGV4KCkpO1xuICAgIGZvciAobGV0IG4gPSAwOyBuIDwgZS5sZW4oKTsgbiArPSAxKVxuICAgICAgci5hZGQoZS5nZXQobikudG9faGV4KCkpO1xuICAgIGNvbnN0IGkgPSBhLlZrZXl3aXRuZXNzZXMubmV3KCk7XG4gICAgcmV0dXJuIHIuZm9yRWFjaCgobikgPT4ge1xuICAgICAgaS5hZGQoYS5Wa2V5d2l0bmVzcy5mcm9tX2hleChuKSk7XG4gICAgfSksIGk7XG4gIH1cbiAgcmV0dXJuIGU7XG59O1xuY2xhc3MgSXIge1xuICBfYXhpb3NJbnN0YW5jZTtcbiAgY29uc3RydWN0b3IoZSwgdCA9IDApIHtcbiAgICBjb25zdCByID0gZS5zbGljZSgwLCA3KTtcbiAgICB0aGlzLl9heGlvc0luc3RhbmNlID0gb3QuY3JlYXRlKHtcbiAgICAgIGJhc2VVUkw6IGBodHRwczovL2NhcmRhbm8tJHtyfS5ibG9ja2Zyb3N0LmlvL2FwaS92JHt0fWAsXG4gICAgICBoZWFkZXJzOiB7IHByb2plY3RfaWQ6IGUgfVxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZldGNoQWNjb3VudEluZm8oZSkge1xuICAgIGNvbnN0IHQgPSBlLnN0YXJ0c1dpdGgoXCJhZGRyXCIpID8gT3QoZSkgOiBlO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGE6IHIsIHN0YXR1czogaSB9ID0gYXdhaXQgdGhpcy5fYXhpb3NJbnN0YW5jZS5nZXQoYGFjY291bnRzLyR7dH1gKTtcbiAgICAgIGlmIChpID09PSAyMDApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9vbElkOiByLnBvb2xfaWQsXG4gICAgICAgICAgYWN0aXZlOiByLmFjdGl2ZSB8fCByLmFjdGl2ZV9lcG9jaCAhPT0gbnVsbCxcbiAgICAgICAgICBiYWxhbmNlOiByLmNvbnRyb2xsZWRfYW1vdW50LFxuICAgICAgICAgIHJld2FyZHM6IHIud2l0aGRyYXdhYmxlX2Ftb3VudCxcbiAgICAgICAgICB3aXRoZHJhd2Fsczogci53aXRoZHJhd2Fsc19zdW1cbiAgICAgICAgfTtcbiAgICAgIHRocm93IGwocik7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgdGhyb3cgbChyKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hBZGRyZXNzVVR4T3MoZSwgdCkge1xuICAgIGNvbnN0IHIgPSB0ICE9PSB2b2lkIDAgPyBgLyR7dH1gIDogXCJcIiwgaSA9IGBhZGRyZXNzZXMvJHtlfS91dHhvc2AgKyByLCBuID0gYXN5bmMgKGMgPSAxLCBJID0gW10pID0+IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdSwgc3RhdHVzOiBoIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgJHtpfT9wYWdlPSR7Y31gKTtcbiAgICAgIGlmIChoID09PSAyMDApXG4gICAgICAgIHJldHVybiB1Lmxlbmd0aCA+IDAgPyBuKGMgKyAxLCBbLi4uSSwgLi4uYXdhaXQgUHJvbWlzZS5hbGwodS5tYXAoQSkpXSkgOiBJO1xuICAgICAgdGhyb3cgbCh1KTtcbiAgICB9LCBvID0gYXN5bmMgKGMpID0+IHtcbiAgICAgIGlmIChjKSB7XG4gICAgICAgIGNvbnN0IHsgZGF0YTogSSwgc3RhdHVzOiB1IH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgc2NyaXB0cy8ke2N9YCk7XG4gICAgICAgIGlmICh1ID09PSAyMDApIHtcbiAgICAgICAgICBjb25zdCBoID0gSS50eXBlLnN0YXJ0c1dpdGgoXCJwbHV0dXNcIikgPyB7XG4gICAgICAgICAgICBjb2RlOiBhd2FpdCB0aGlzLmZldGNoUGx1dHVzU2NyaXB0Q0JPUihjKSxcbiAgICAgICAgICAgIHZlcnNpb246IEkudHlwZS5yZXBsYWNlKFwicGx1dHVzXCIsIFwiXCIpXG4gICAgICAgICAgfSA6IGF3YWl0IHRoaXMuZmV0Y2hOYXRpdmVTY3JpcHRKU09OKGMpO1xuICAgICAgICAgIHJldHVybiBkdChoKS50b19oZXgoKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBsKEkpO1xuICAgICAgfVxuICAgIH0sIEEgPSBhc3luYyAoYykgPT4gKHtcbiAgICAgIGlucHV0OiB7XG4gICAgICAgIG91dHB1dEluZGV4OiBjLm91dHB1dF9pbmRleCxcbiAgICAgICAgdHhIYXNoOiBjLnR4X2hhc2hcbiAgICAgIH0sXG4gICAgICBvdXRwdXQ6IHtcbiAgICAgICAgYWRkcmVzczogZSxcbiAgICAgICAgYW1vdW50OiBjLmFtb3VudCxcbiAgICAgICAgZGF0YUhhc2g6IGMuZGF0YV9oYXNoID8/IHZvaWQgMCxcbiAgICAgICAgcGx1dHVzRGF0YTogYy5pbmxpbmVfZGF0dW0gPz8gdm9pZCAwLFxuICAgICAgICBzY3JpcHRSZWY6IGF3YWl0IG8oYy5yZWZlcmVuY2Vfc2NyaXB0X2hhc2gpXG4gICAgICB9XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCBuKCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoQXNzZXRBZGRyZXNzZXMoZSkge1xuICAgIGNvbnN0IHQgPSBhc3luYyAociA9IDEsIGkgPSBbXSkgPT4ge1xuICAgICAgY29uc3QgeyBwb2xpY3lJZDogbiwgYXNzZXROYW1lOiBvIH0gPSBudChlKSwgeyBkYXRhOiBBLCBzdGF0dXM6IGMgfSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UuZ2V0KGBhc3NldHMvJHtufSR7b30vYWRkcmVzc2VzP3BhZ2U9JHtyfWApO1xuICAgICAgaWYgKGMgPT09IDIwMClcbiAgICAgICAgcmV0dXJuIEEubGVuZ3RoID4gMCA/IHQociArIDEsIFsuLi5pLCAuLi5BXSkgOiBpO1xuICAgICAgdGhyb3cgbChBKTtcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYXdhaXQgdCgpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICBhc3luYyBmZXRjaEFzc2V0TWV0YWRhdGEoZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IHBvbGljeUlkOiB0LCBhc3NldE5hbWU6IHIgfSA9IG50KGUpLCB7IGRhdGE6IGksIHN0YXR1czogbiB9ID0gYXdhaXQgdGhpcy5fYXhpb3NJbnN0YW5jZS5nZXQoYGFzc2V0cy8ke3R9JHtyfWApO1xuICAgICAgaWYgKG4gPT09IDIwMClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5pLm9uY2hhaW5fbWV0YWRhdGFcbiAgICAgICAgfTtcbiAgICAgIHRocm93IGwoaSk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hIYW5kbGVBZGRyZXNzKGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdCA9IFMoZS5yZXBsYWNlKFwiJFwiLCBcIlwiKSksIHsgZGF0YTogciwgc3RhdHVzOiBpIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgYXNzZXRzLyR7SHRbMV19JHt0fS9hZGRyZXNzZXNgKTtcbiAgICAgIGlmIChpID09PSAyMDApXG4gICAgICAgIHJldHVybiByWzBdLmFkZHJlc3M7XG4gICAgICB0aHJvdyBsKHIpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIHRocm93IGwodCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoUHJvdG9jb2xQYXJhbWV0ZXJzKGUgPSBOdW1iZXIuTmFOKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdCwgc3RhdHVzOiByIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgZXBvY2hzLyR7aXNOYU4oZSkgPyBcImxhdGVzdFwiIDogZX0vcGFyYW1ldGVyc2ApO1xuICAgICAgaWYgKHIgPT09IDIwMClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBjb2luc1BlclVUeE9TaXplOiB0LmNvaW5zX3Blcl91dHhvX3dvcmQsXG4gICAgICAgICAgY29sbGF0ZXJhbFBlcmNlbnQ6IHQuY29sbGF0ZXJhbF9wZXJjZW50LFxuICAgICAgICAgIGRlY2VudHJhbGlzYXRpb246IHQuZGVjZW50cmFsaXNhdGlvbl9wYXJhbSxcbiAgICAgICAgICBlcG9jaDogdC5lcG9jaCxcbiAgICAgICAgICBrZXlEZXBvc2l0OiB0LmtleV9kZXBvc2l0LFxuICAgICAgICAgIG1heEJsb2NrRXhNZW06IHQubWF4X2Jsb2NrX2V4X21lbSxcbiAgICAgICAgICBtYXhCbG9ja0V4U3RlcHM6IHQubWF4X2Jsb2NrX2V4X3N0ZXBzLFxuICAgICAgICAgIG1heEJsb2NrSGVhZGVyU2l6ZTogdC5tYXhfYmxvY2tfaGVhZGVyX3NpemUsXG4gICAgICAgICAgbWF4QmxvY2tTaXplOiB0Lm1heF9ibG9ja19zaXplLFxuICAgICAgICAgIG1heENvbGxhdGVyYWxJbnB1dHM6IHQubWF4X2NvbGxhdGVyYWxfaW5wdXRzLFxuICAgICAgICAgIG1heFR4RXhNZW06IHQubWF4X3R4X2V4X21lbSxcbiAgICAgICAgICBtYXhUeEV4U3RlcHM6IHQubWF4X3R4X2V4X3N0ZXBzLFxuICAgICAgICAgIG1heFR4U2l6ZTogdC5tYXhfdHhfc2l6ZSxcbiAgICAgICAgICBtYXhWYWxTaXplOiB0Lm1heF92YWxfc2l6ZSxcbiAgICAgICAgICBtaW5GZWVBOiB0Lm1pbl9mZWVfYSxcbiAgICAgICAgICBtaW5GZWVCOiB0Lm1pbl9mZWVfYixcbiAgICAgICAgICBtaW5Qb29sQ29zdDogdC5taW5fcG9vbF9jb3N0LFxuICAgICAgICAgIHBvb2xEZXBvc2l0OiB0LnBvb2xfZGVwb3NpdCxcbiAgICAgICAgICBwcmljZU1lbTogdC5wcmljZV9tZW0sXG4gICAgICAgICAgcHJpY2VTdGVwOiB0LnByaWNlX3N0ZXBcbiAgICAgICAgfTtcbiAgICAgIHRocm93IGwodCk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgc3VibWl0VHgoZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0ID0geyBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2Nib3JcIiB9LCB7IGRhdGE6IHIsIHN0YXR1czogaSB9ID0gYXdhaXQgdGhpcy5fYXhpb3NJbnN0YW5jZS5wb3N0KFwidHgvc3VibWl0XCIsIGYoZSksIHsgaGVhZGVyczogdCB9KTtcbiAgICAgIGlmIChpID09PSAyMDApXG4gICAgICAgIHJldHVybiByO1xuICAgICAgdGhyb3cgbChyKTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICB0aHJvdyBsKHQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBmZXRjaFBsdXR1c1NjcmlwdENCT1IoZSkge1xuICAgIGNvbnN0IHsgZGF0YTogdCwgc3RhdHVzOiByIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgc2NyaXB0cy8ke2V9L2Nib3JgKTtcbiAgICBpZiAociA9PT0gMjAwKVxuICAgICAgcmV0dXJuIHQuY2JvcjtcbiAgICB0aHJvdyBsKHQpO1xuICB9XG4gIGFzeW5jIGZldGNoTmF0aXZlU2NyaXB0SlNPTihlKSB7XG4gICAgY29uc3QgeyBkYXRhOiB0LCBzdGF0dXM6IHIgfSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UuZ2V0KGBzY3JpcHRzLyR7ZX0vanNvbmApO1xuICAgIGlmIChyID09PSAyMDApXG4gICAgICByZXR1cm4gdC5qc29uO1xuICAgIHRocm93IGwodCk7XG4gIH1cbn1cbmNsYXNzIGhyIHtcbiAgX2F4aW9zSW5zdGFuY2U7XG4gIGNvbnN0cnVjdG9yKGUsIHQsIHIpIHtcbiAgICBjb25zdCBpID0gci5ob3N0ID8/IFwiaXBmcy5pbmZ1cmEuaW9cIiwgbiA9IHIucG9ydCA/PyA1MDAxLCBvID0gci52ZXJzaW9uID8/IDA7XG4gICAgdGhpcy5fYXhpb3NJbnN0YW5jZSA9IG90LmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiBgaHR0cHM6Ly8ke2l9OiR7bn0vYXBpL3Yke299YCxcbiAgICAgIGF1dGg6IHsgdXNlcm5hbWU6IGUsIHBhc3N3b3JkOiB0IH1cbiAgICB9KTtcbiAgfVxuICBhc3luYyB1cGxvYWRDb250ZW50KGUsIHQgPSAhMSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByID0geyBcIkNvbnRlbnQtVHlwZVwiOiBcIm11bHRpcGFydC9mb3JtLWRhdGFcIiB9LCB7IGRhdGE6IGksIHN0YXR1czogbiB9ID0gYXdhaXQgdGhpcy5fYXhpb3NJbnN0YW5jZS5wb3N0KGBhZGQ/cmVjdXJzaXZlPSR7dH1gLCBlLCB7IGhlYWRlcnM6IHIgfSk7XG4gICAgICBpZiAobiA9PT0gMjAwKVxuICAgICAgICByZXR1cm4gaTtcbiAgICAgIHRocm93IGwoaSk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgdGhyb3cgbChyKTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIHVyIHtcbiAgX2F4aW9zSW5zdGFuY2U7XG4gIGNvbnN0cnVjdG9yKGUsIHQgPSAwKSB7XG4gICAgdGhpcy5fYXhpb3NJbnN0YW5jZSA9IG90LmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiBgaHR0cHM6Ly8ke2V9LmtvaW9zLnJlc3QvYXBpL3Yke3R9YFxuICAgIH0pO1xuICB9XG4gIGFzeW5jIGZldGNoQWNjb3VudEluZm8oZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB0ID0gZS5zdGFydHNXaXRoKFwiYWRkclwiKSA/IE90KGUpIDogZSwgeyBkYXRhOiByLCBzdGF0dXM6IGkgfSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UucG9zdChcImFjY291bnRfaW5mb1wiLCB7IF9zdGFrZV9hZGRyZXNzZXM6IFt0XSB9KTtcbiAgICAgIGlmIChpID09PSAyMDApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcG9vbElkOiByWzBdLmRlbGVnYXRlZF9wb29sLFxuICAgICAgICAgIGFjdGl2ZTogclswXS5zdGF0dXMgPT09IFwicmVnaXN0ZXJlZFwiLFxuICAgICAgICAgIGJhbGFuY2U6IHJbMF0udG90YWxfYmFsYW5jZS50b1N0cmluZygpLFxuICAgICAgICAgIHJld2FyZHM6IHJbMF0ucmV3YXJkc19hdmFpbGFibGUsXG4gICAgICAgICAgd2l0aGRyYXdhbHM6IHJbMF0ud2l0aGRyYXdhbHNcbiAgICAgICAgfTtcbiAgICAgIHRocm93IGwocik7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hBZGRyZXNzVVR4T3MoZSwgdCkge1xuICAgIGNvbnN0IHIgPSAoaSkgPT4ge1xuICAgICAgaWYgKGkpIHtcbiAgICAgICAgY29uc3QgbiA9IGkudHlwZS5zdGFydHNXaXRoKFwicGx1dHVzXCIpID8ge1xuICAgICAgICAgIGNvZGU6IGkuYnl0ZXMsXG4gICAgICAgICAgdmVyc2lvbjogaS50eXBlLnJlcGxhY2UoXCJwbHV0dXNcIiwgXCJcIilcbiAgICAgICAgfSA6IER0KFN0KGkuYnl0ZXMpKTtcbiAgICAgICAgcmV0dXJuIGR0KG4pLnRvX2hleCgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogaSwgc3RhdHVzOiBuIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLnBvc3QoXCJhZGRyZXNzX2luZm9cIiwgeyBfYWRkcmVzc2VzOiBbZV0gfSk7XG4gICAgICBpZiAobiA9PT0gMjAwKSB7XG4gICAgICAgIGNvbnN0IG8gPSBpLmZsYXRNYXAoKEEpID0+IEEudXR4b19zZXQpLm1hcCgoQSkgPT4ge1xuICAgICAgICAgIHZhciBjO1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBpbnB1dDoge1xuICAgICAgICAgICAgICBvdXRwdXRJbmRleDogQS50eF9pbmRleCxcbiAgICAgICAgICAgICAgdHhIYXNoOiBBLnR4X2hhc2hcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvdXRwdXQ6IHtcbiAgICAgICAgICAgICAgYWRkcmVzczogZSxcbiAgICAgICAgICAgICAgYW1vdW50OiBbXG4gICAgICAgICAgICAgICAgeyB1bml0OiBcImxvdmVsYWNlXCIsIHF1YW50aXR5OiBBLnZhbHVlIH0sXG4gICAgICAgICAgICAgICAgLi4uQS5hc3NldF9saXN0Lm1hcCgoSSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgIHVuaXQ6IGAke0kucG9saWN5X2lkfSR7SS5hc3NldF9uYW1lfWAsXG4gICAgICAgICAgICAgICAgICBxdWFudGl0eTogYCR7SS5xdWFudGl0eX1gXG4gICAgICAgICAgICAgICAgfSkpXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIGRhdGFIYXNoOiBBLmRhdHVtX2hhc2ggPz8gdm9pZCAwLFxuICAgICAgICAgICAgICBwbHV0dXNEYXRhOiAoKGMgPSBBLmlubGluZV9kYXR1bSkgPT0gbnVsbCA/IHZvaWQgMCA6IGMuYnl0ZXMpID8/IHZvaWQgMCxcbiAgICAgICAgICAgICAgc2NyaXB0UmVmOiByKEEucmVmZXJlbmNlX3NjcmlwdClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHQgIT09IHZvaWQgMCA/IG8uZmlsdGVyKChBKSA9PiBBLm91dHB1dC5hbW91bnQuZmluZCgoYykgPT4gYy51bml0ID09PSB0KSAhPT0gdm9pZCAwKSA6IG87XG4gICAgICB9XG4gICAgICB0aHJvdyBsKGkpO1xuICAgIH0gY2F0Y2gge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cbiAgfVxuICBhc3luYyBmZXRjaEFzc2V0QWRkcmVzc2VzKGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgeyBwb2xpY3lJZDogdCwgYXNzZXROYW1lOiByIH0gPSBudChlKSwgeyBkYXRhOiBpLCBzdGF0dXM6IG4gfSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UuZ2V0KGBhc3NldF9hZGRyZXNzX2xpc3Q/X2Fzc2V0X3BvbGljeT0ke3R9Jl9hc3NldF9uYW1lPSR7cn1gKTtcbiAgICAgIGlmIChuID09PSAyMDApXG4gICAgICAgIHJldHVybiBpLm1hcCgobykgPT4gKHtcbiAgICAgICAgICBhZGRyZXNzOiBvLnBheW1lbnRfYWRkcmVzcyxcbiAgICAgICAgICBxdWFudGl0eTogby5xdWFudGl0eVxuICAgICAgICB9KSk7XG4gICAgICB0aHJvdyBsKGkpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIHRocm93IGwodCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoQXNzZXRNZXRhZGF0YShlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgcG9saWN5SWQ6IHQsIGFzc2V0TmFtZTogciB9ID0gbnQoZSksIHsgZGF0YTogaSwgc3RhdHVzOiBuIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgYXNzZXRfaW5mbz9fYXNzZXRfcG9saWN5PSR7dH0mX2Fzc2V0X25hbWU9JHtyfWApO1xuICAgICAgaWYgKG4gPT09IDIwMClcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5pWzBdLm1pbnRpbmdfdHhfbWV0YWRhdGFbNzIxXVt0XVtWdChyKV1cbiAgICAgICAgfTtcbiAgICAgIHRocm93IGwoaSk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hIYW5kbGVBZGRyZXNzKGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdCA9IFMoZS5yZXBsYWNlKFwiJFwiLCBcIlwiKSksIHsgZGF0YTogciwgc3RhdHVzOiBpIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgYXNzZXRfYWRkcmVzc19saXN0P19hc3NldF9wb2xpY3k9JHtIdFsxXX0mX2Fzc2V0X25hbWU9JHt0fWApO1xuICAgICAgaWYgKGkgPT09IDIwMClcbiAgICAgICAgcmV0dXJuIHJbMF0ucGF5bWVudF9hZGRyZXNzO1xuICAgICAgdGhyb3cgbChyKTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICB0aHJvdyBsKHQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBmZXRjaFByb3RvY29sUGFyYW1ldGVycyhlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgZGF0YTogdCwgc3RhdHVzOiByIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgZXBvY2hfcGFyYW1zP19lcG9jaF9ubz0ke2V9YCk7XG4gICAgICBpZiAociA9PT0gMjAwKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGNvaW5zUGVyVVR4T1NpemU6IHRbMF0uY29pbnNfcGVyX3V0eG9fc2l6ZSxcbiAgICAgICAgICBjb2xsYXRlcmFsUGVyY2VudDogdFswXS5jb2xsYXRlcmFsX3BlcmNlbnQsXG4gICAgICAgICAgZGVjZW50cmFsaXNhdGlvbjogdFswXS5kZWNlbnRyYWxpc2F0aW9uLFxuICAgICAgICAgIGVwb2NoOiB0WzBdLmVwb2NoX25vLFxuICAgICAgICAgIGtleURlcG9zaXQ6IHRbMF0ua2V5X2RlcG9zaXQsXG4gICAgICAgICAgbWF4QmxvY2tFeE1lbTogdFswXS5tYXhfYmxvY2tfZXhfbWVtLnRvU3RyaW5nKCksXG4gICAgICAgICAgbWF4QmxvY2tFeFN0ZXBzOiB0WzBdLm1heF9ibG9ja19leF9zdGVwcy50b1N0cmluZygpLFxuICAgICAgICAgIG1heEJsb2NrSGVhZGVyU2l6ZTogdFswXS5tYXhfYmhfc2l6ZSxcbiAgICAgICAgICBtYXhCbG9ja1NpemU6IHRbMF0ubWF4X2Jsb2NrX3NpemUsXG4gICAgICAgICAgbWF4Q29sbGF0ZXJhbElucHV0czogdFswXS5tYXhfY29sbGF0ZXJhbF9pbnB1dHMsXG4gICAgICAgICAgbWF4VHhFeE1lbTogdFswXS5tYXhfdHhfZXhfbWVtLnRvU3RyaW5nKCksXG4gICAgICAgICAgbWF4VHhFeFN0ZXBzOiB0WzBdLm1heF90eF9leF9zdGVwcy50b1N0cmluZygpLFxuICAgICAgICAgIG1heFR4U2l6ZTogdFswXS5tYXhfdHhfc2l6ZSxcbiAgICAgICAgICBtYXhWYWxTaXplOiB0WzBdLm1heF92YWxfc2l6ZS50b1N0cmluZygpLFxuICAgICAgICAgIG1pbkZlZUE6IHRbMF0ubWluX2ZlZV9hLFxuICAgICAgICAgIG1pbkZlZUI6IHRbMF0ubWluX2ZlZV9iLFxuICAgICAgICAgIG1pblBvb2xDb3N0OiB0WzBdLm1pbl9wb29sX2Nvc3QsXG4gICAgICAgICAgcG9vbERlcG9zaXQ6IHRbMF0ucG9vbF9kZXBvc2l0LFxuICAgICAgICAgIHByaWNlTWVtOiB0WzBdLnByaWNlX21lbSxcbiAgICAgICAgICBwcmljZVN0ZXA6IHRbMF0ucHJpY2Vfc3RlcFxuICAgICAgICB9O1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9IGNhdGNoICh0KSB7XG4gICAgICB0aHJvdyBsKHQpO1xuICAgIH1cbiAgfVxuICBhc3luYyBzdWJtaXRUeChlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHQgPSB7IFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vY2JvclwiIH0sIHsgZGF0YTogciwgc3RhdHVzOiBpIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLnBvc3QoXCJzdWJtaXR0eFwiLCBmKGUpLCB7IGhlYWRlcnM6IHQgfSk7XG4gICAgICBpZiAoaSA9PT0gMjAyKVxuICAgICAgICByZXR1cm4gcjtcbiAgICAgIHRocm93IGwocik7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIGRyIHtcbiAgX2F4aW9zSW5zdGFuY2U7XG4gIGNvbnN0cnVjdG9yKGUsIHQsIHIsIGkgPSAxKSB7XG4gICAgdGhpcy5fYXhpb3NJbnN0YW5jZSA9IG90LmNyZWF0ZSh7XG4gICAgICBiYXNlVVJMOiBgaHR0cHM6Ly9jYXJkYW5vLSR7ZX0udGFuZ29jcnlwdG8uY29tLyR7dH0vdiR7aX1gLFxuICAgICAgaGVhZGVyczogeyBcIngtYXBpLWtleVwiOiByIH1cbiAgICB9KTtcbiAgfVxuICBhc3luYyBmZXRjaEFjY291bnRJbmZvKGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdCA9IGUuc3RhcnRzV2l0aChcImFkZHJcIikgPyBPdChlKSA6IGUsIHsgZGF0YTogciwgc3RhdHVzOiBpIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgd2FsbGV0cy8ke3R9YCk7XG4gICAgICBpZiAoaSA9PT0gMjAwKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHBvb2xJZDogci5wb29sX2lkLFxuICAgICAgICAgIGFjdGl2ZTogci5hY3RpdmUsXG4gICAgICAgICAgYmFsYW5jZTogci5jb250cm9sbGVkX3RvdGFsX3N0YWtlLFxuICAgICAgICAgIHJld2FyZHM6IHIucmV3YXJkc19zdW0sXG4gICAgICAgICAgd2l0aGRyYXdhbHM6IHIud2l0aGRyYXdhbHNfc3VtXG4gICAgICAgIH07XG4gICAgICB0aHJvdyBsKHIpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIHRocm93IGwodCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoQWRkcmVzc1VUeE9zKGUsIHQpIHtcbiAgICBjb25zdCByID0gdCAhPT0gdm9pZCAwID8gYC9hc3NldHMvJHt0fWAgOiBcIlwiLCBpID0gYGFkZHJlc3Nlcy8ke2V9JHtyfS91dHhvcz9zaXplPTUwYCwgbiA9IGFzeW5jIChJID0gXCJcIiwgdSA9IFtdKSA9PiB7XG4gICAgICB2YXIgcDtcbiAgICAgIGNvbnN0IHsgZGF0YTogaCwgc3RhdHVzOiBnIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgJHtpfSZjdXJzb3I9JHtJfWApO1xuICAgICAgaWYgKGcgPT09IDIwMClcbiAgICAgICAgcmV0dXJuIGguY3Vyc29yICE9PSBudWxsICYmICgocCA9IGguY3Vyc29yKSA9PSBudWxsID8gdm9pZCAwIDogcC5sZW5ndGgpID4gMCA/IG4oaC5jdXJzb3IsIFsuLi51LCAuLi5oLmRhdGEubWFwKGMpXSkgOiBoLmRhdGEubWFwKGMpO1xuICAgICAgdGhyb3cgbChoKTtcbiAgICB9LCBvID0gKEksIHUpID0+IHtcbiAgICAgIGNvbnN0IGggPSBbe1xuICAgICAgICB1bml0OiBcImxvdmVsYWNlXCIsXG4gICAgICAgIHF1YW50aXR5OiBJLnRvU3RyaW5nKClcbiAgICAgIH1dO1xuICAgICAgcmV0dXJuIHUuZm9yRWFjaCgoZykgPT4ge1xuICAgICAgICBjb25zdCBwID0gUyhnLmFzc2V0X25hbWUpO1xuICAgICAgICBoLnB1c2goe1xuICAgICAgICAgIHVuaXQ6IGAke2cucG9saWN5X2lkfSR7cH1gLFxuICAgICAgICAgIHF1YW50aXR5OiBnLnF1YW50aXR5LnRvU3RyaW5nKClcbiAgICAgICAgfSk7XG4gICAgICB9KSwgaDtcbiAgICB9LCBBID0gKEkpID0+IHtcbiAgICAgIGlmIChJKSB7XG4gICAgICAgIGNvbnN0IHUgPSBJLnR5cGUuc3RhcnRzV2l0aChcInBsdXR1c1wiKSA/IHtcbiAgICAgICAgICBjb2RlOiBJLmNvZGUsXG4gICAgICAgICAgdmVyc2lvbjogSS50eXBlLnJlcGxhY2UoXCJwbHV0dXNcIiwgXCJcIilcbiAgICAgICAgfSA6IER0KFN0KEkuanNvbikpO1xuICAgICAgICByZXR1cm4gZHQodSkudG9faGV4KCk7XG4gICAgICB9XG4gICAgfSwgYyA9IChJKSA9PiB7XG4gICAgICB2YXIgdTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGlucHV0OiB7XG4gICAgICAgICAgb3V0cHV0SW5kZXg6IEkuaW5kZXgsXG4gICAgICAgICAgdHhIYXNoOiBJLmhhc2hcbiAgICAgICAgfSxcbiAgICAgICAgb3V0cHV0OiB7XG4gICAgICAgICAgYWRkcmVzczogZSxcbiAgICAgICAgICBhbW91bnQ6IG8oSS52YWx1ZSwgSS5hc3NldHMpLFxuICAgICAgICAgIGRhdGFIYXNoOiB2b2lkIDAsXG4gICAgICAgICAgcGx1dHVzRGF0YTogKCh1ID0gSS5pbmxpbmVfZGF0dW0pID09IG51bGwgPyB2b2lkIDAgOiB1LnZhbHVlX3JhdykgPz8gdm9pZCAwLFxuICAgICAgICAgIHNjcmlwdFJlZjogQShJLnJlZmVyZW5jZV9zY3JpcHQpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGF3YWl0IG4oKTtcbiAgICB9IGNhdGNoIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hBc3NldEFkZHJlc3NlcyhlKSB7XG4gICAgY29uc3QgdCA9IChpKSA9PiAoe1xuICAgICAgYWRkcmVzczogaS5hZGRyZXNzLFxuICAgICAgcXVhbnRpdHk6IGkucXVhbnRpdHkudG9TdHJpbmcoKVxuICAgIH0pLCByID0gYXN5bmMgKGkgPSBcIlwiLCBuID0gW10pID0+IHtcbiAgICAgIHZhciB1O1xuICAgICAgY29uc3QgeyBwb2xpY3lJZDogbywgYXNzZXROYW1lOiBBIH0gPSBudChlKSwgeyBkYXRhOiBjLCBzdGF0dXM6IEkgfSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UuZ2V0KGBhc3NldHMvJHtvfSR7QX0vYWRkcmVzc2VzP3NpemU9MTAwJmN1cnNvcj0ke2l9YCk7XG4gICAgICBpZiAoSSA9PT0gMjAwKVxuICAgICAgICByZXR1cm4gYy5jdXJzb3IgIT09IG51bGwgJiYgKCh1ID0gYy5jdXJzb3IpID09IG51bGwgPyB2b2lkIDAgOiB1Lmxlbmd0aCkgPiAwID8gcihjLmN1cnNvciwgWy4uLm4sIC4uLmMuZGF0YS5tYXAodCldKSA6IGMuZGF0YS5tYXAodCk7XG4gICAgICB0aHJvdyBsKGMpO1xuICAgIH07XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBhd2FpdCByKCk7XG4gICAgfSBjYXRjaCB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuICB9XG4gIGFzeW5jIGZldGNoQXNzZXRNZXRhZGF0YShlKSB7XG4gICAgdmFyIHQ7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHsgcG9saWN5SWQ6IHIsIGFzc2V0TmFtZTogaSB9ID0gbnQoZSksIHsgZGF0YTogbiwgc3RhdHVzOiBvIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgYXNzZXRzLyR7cn0ke2l9YCk7XG4gICAgICBpZiAobyA9PT0gMjAwKVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIC4uLih0ID0gbi5tZXRhZGF0YVswXSkgPT0gbnVsbCA/IHZvaWQgMCA6IHQuanNvbltyXVtWdChpKV1cbiAgICAgICAgfTtcbiAgICAgIHRocm93IGwobik7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgdGhyb3cgbChyKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hIYW5kbGVBZGRyZXNzKGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdCA9IFMoZS5yZXBsYWNlKFwiJFwiLCBcIlwiKSksIHsgZGF0YTogciwgc3RhdHVzOiBpIH0gPSBhd2FpdCB0aGlzLl9heGlvc0luc3RhbmNlLmdldChgYXNzZXRzLyR7SHRbMV19JHt0fS9hZGRyZXNzZXNgKTtcbiAgICAgIGlmIChpID09PSAyMDApXG4gICAgICAgIHJldHVybiByLmRhdGFbMF0uYWRkcmVzcztcbiAgICAgIHRocm93IGwocik7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZmV0Y2hQcm90b2NvbFBhcmFtZXRlcnMoZSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7IGRhdGE6IHQsIHN0YXR1czogciB9ID0gYXdhaXQgdGhpcy5fYXhpb3NJbnN0YW5jZS5nZXQoYGVwb2Nocy8ke2V9L3BhcmFtZXRlcnNgKTtcbiAgICAgIGlmIChyID09PSAyMDApXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgY29pbnNQZXJVVHhPU2l6ZTogdC5jb2luc19wZXJfdXR4b19zaXplLnRvU3RyaW5nKCksXG4gICAgICAgICAgY29sbGF0ZXJhbFBlcmNlbnQ6IHQuY29sbGF0ZXJhbF9wZXJjZW50LFxuICAgICAgICAgIGRlY2VudHJhbGlzYXRpb246IHQuZGVjZW50cmFsaXNhdGlvbixcbiAgICAgICAgICBlcG9jaDogdC5lcG9jaF9ubyxcbiAgICAgICAgICBrZXlEZXBvc2l0OiB0LmtleV9kZXBvc2l0LnRvU3RyaW5nKCksXG4gICAgICAgICAgbWF4QmxvY2tFeE1lbTogdC5tYXhfYmxvY2tfZXhfbWVtLnRvU3RyaW5nKCksXG4gICAgICAgICAgbWF4QmxvY2tFeFN0ZXBzOiB0Lm1heF9ibG9ja19leF9zdGVwcy50b1N0cmluZygpLFxuICAgICAgICAgIG1heEJsb2NrSGVhZGVyU2l6ZTogdC5tYXhfYmxvY2tfaGVhZGVyX3NpemUsXG4gICAgICAgICAgbWF4QmxvY2tTaXplOiB0Lm1heF9ibG9ja19zaXplLFxuICAgICAgICAgIG1heENvbGxhdGVyYWxJbnB1dHM6IHQubWF4X2NvbGxhdGVyYWxfaW5wdXRzLFxuICAgICAgICAgIG1heFR4RXhNZW06IHQubWF4X3R4X2V4X21lbS50b1N0cmluZygpLFxuICAgICAgICAgIG1heFR4RXhTdGVwczogdC5tYXhfdHhfZXhfc3RlcHMudG9TdHJpbmcoKSxcbiAgICAgICAgICBtYXhUeFNpemU6IHQubWF4X3R4X3NpemUsXG4gICAgICAgICAgbWF4VmFsU2l6ZTogdC5tYXhfdmFsX3NpemUudG9TdHJpbmcoKSxcbiAgICAgICAgICBtaW5GZWVBOiB0Lm1pbl9mZWVfYSxcbiAgICAgICAgICBtaW5GZWVCOiB0Lm1pbl9mZWVfYixcbiAgICAgICAgICBtaW5Qb29sQ29zdDogdC5taW5fcG9vbF9jb3N0LnRvU3RyaW5nKCksXG4gICAgICAgICAgcG9vbERlcG9zaXQ6IHQucG9vbF9kZXBvc2l0LnRvU3RyaW5nKCksXG4gICAgICAgICAgcHJpY2VNZW06IHQucHJpY2VfbWVtLFxuICAgICAgICAgIHByaWNlU3RlcDogdC5wcmljZV9zdGVwXG4gICAgICAgIH07XG4gICAgICB0aHJvdyBsKHQpO1xuICAgIH0gY2F0Y2ggKHQpIHtcbiAgICAgIHRocm93IGwodCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHN1Ym1pdFR4KGUpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdCA9IHsgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIgfSwgeyBkYXRhOiByLCBzdGF0dXM6IGkgfSA9IGF3YWl0IHRoaXMuX2F4aW9zSW5zdGFuY2UucG9zdChcInRyYW5zYWN0aW9ucy9zdWJtaXRcIiwgeyB0eDogZSB9LCB7IGhlYWRlcnM6IHQgfSk7XG4gICAgICBpZiAoaSA9PT0gMjAwKVxuICAgICAgICByZXR1cm4gci50eF9pZDtcbiAgICAgIHRocm93IGwocik7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbCh0KTtcbiAgICB9XG4gIH1cbn1cbmNsYXNzIGxyIHtcbiAgc3RhdGljIHdpdGhPbmVTaWduYXR1cmUoZSkge1xuICAgIGNvbnN0IHQgPSBGKGV0KGUpKTtcbiAgICByZXR1cm4gX3QodCkudG9faGV4KCk7XG4gIH1cbiAgc3RhdGljIHdpdGhBdExlYXN0TlNpZ25hdHVyZXMoZSwgdCkge1xuICAgIGNvbnN0IHIgPSBhLk5hdGl2ZVNjcmlwdHMubmV3KCk7XG4gICAgZS5mb3JFYWNoKChuKSA9PiB7XG4gICAgICBjb25zdCBvID0gRihldChuKSk7XG4gICAgICByLmFkZChfdChvKSk7XG4gICAgfSk7XG4gICAgY29uc3QgaSA9IGEuU2NyaXB0Tk9mSy5uZXcodCwgcik7XG4gICAgcmV0dXJuIGEuTmF0aXZlU2NyaXB0Lm5ld19zY3JpcHRfYW55KGkpLnRvX2hleCgpO1xuICB9XG4gIHN0YXRpYyB3aXRoQW55U2lnbmF0dXJlKGUpIHtcbiAgICBjb25zdCB0ID0gYS5OYXRpdmVTY3JpcHRzLm5ldygpO1xuICAgIGUuZm9yRWFjaCgoaSkgPT4ge1xuICAgICAgY29uc3QgbiA9IEYoZXQoaSkpO1xuICAgICAgdC5hZGQoX3QobikpO1xuICAgIH0pO1xuICAgIGNvbnN0IHIgPSBhLlNjcmlwdEFueS5uZXcodCk7XG4gICAgcmV0dXJuIGEuTmF0aXZlU2NyaXB0Lm5ld19zY3JpcHRfYW55KHIpLnRvX2hleCgpO1xuICB9XG4gIHN0YXRpYyB3aXRoQWxsU2lnbmF0dXJlcyhlKSB7XG4gICAgY29uc3QgdCA9IGEuTmF0aXZlU2NyaXB0cy5uZXcoKTtcbiAgICBlLmZvckVhY2goKGkpID0+IHtcbiAgICAgIGNvbnN0IG4gPSBGKGV0KGkpKTtcbiAgICAgIHQuYWRkKF90KG4pKTtcbiAgICB9KTtcbiAgICBjb25zdCByID0gYS5TY3JpcHRBbGwubmV3KHQpO1xuICAgIHJldHVybiBhLk5hdGl2ZVNjcmlwdC5uZXdfc2NyaXB0X2FueShyKS50b19oZXgoKTtcbiAgfVxuICBzdGF0aWMgZnJvbU5hdGl2ZVNjcmlwdChlKSB7XG4gICAgcmV0dXJuIHZ0KGUpLnRvX2hleCgpO1xuICB9XG59XG5mdW5jdGlvbiBqKHMsIGUsIHQsIHIpIHtcbiAgdmFyIGkgPSBhcmd1bWVudHMubGVuZ3RoLCBuID0gaSA8IDMgPyBlIDogciA9PT0gbnVsbCA/IHIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGUsIHQpIDogciwgbztcbiAgaWYgKHR5cGVvZiBSZWZsZWN0ID09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT0gXCJmdW5jdGlvblwiKVxuICAgIG4gPSBSZWZsZWN0LmRlY29yYXRlKHMsIGUsIHQsIHIpO1xuICBlbHNlXG4gICAgZm9yICh2YXIgQSA9IHMubGVuZ3RoIC0gMTsgQSA+PSAwOyBBLS0pXG4gICAgICAobyA9IHNbQV0pICYmIChuID0gKGkgPCAzID8gbyhuKSA6IGkgPiAzID8gbyhlLCB0LCBuKSA6IG8oZSwgdCkpIHx8IG4pO1xuICByZXR1cm4gaSA+IDMgJiYgbiAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgdCwgbiksIG47XG59XG5jb25zdCBScyA9IChzKSA9PiBjbGFzcyBleHRlbmRzIHMge1xuICBfX3Zpc2l0cyA9IFtdO1xufSwgWiA9ICgpID0+IGZ1bmN0aW9uKHMsIGUsIHQpIHtcbiAgY29uc3QgciA9IHQudmFsdWU7XG4gIHQudmFsdWUgPSBmdW5jdGlvbiguLi5pKSB7XG4gICAgY29uc3QgbiA9IHIuY2FsbCh0aGlzLCAuLi5pKTtcbiAgICByZXR1cm4gdGhpcy5fX3Zpc2l0cyAmJiB0aGlzLl9fdmlzaXRzLnB1c2goZSksIG47XG4gIH07XG59O1xubGV0IFIgPSBjbGFzcyB7XG4gIF9jaGFuZ2VBZGRyZXNzO1xuICBfcmVjaXBpZW50cyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgTWFwKCk7XG4gIF90b3RhbEJ1cm5zID0gLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKTtcbiAgX3RvdGFsTWludHMgPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICBfZXJhO1xuICBfaW5pdGlhdG9yO1xuICBfbWludEJ1aWxkZXI7XG4gIF9wcm90b2NvbFBhcmFtZXRlcnM7XG4gIF90eEJ1aWxkZXI7XG4gIF90eENlcnRpZmljYXRlcztcbiAgX3R4SW5wdXRzQnVpbGRlcjtcbiAgX3R4V2l0aGRyYXdhbHM7XG4gIGNvbnN0cnVjdG9yKGUgPSB7fSkge1xuICAgIHRoaXMuX2VyYSA9IGUuZXJhLCB0aGlzLl9pbml0aWF0b3IgPSBlLmluaXRpYXRvciwgdGhpcy5fbWludEJ1aWxkZXIgPSBhLk1pbnRCdWlsZGVyLm5ldygpLCB0aGlzLl9wcm90b2NvbFBhcmFtZXRlcnMgPSBlLnBhcmFtZXRlcnMgPz8gWSwgdGhpcy5fdHhCdWlsZGVyID0gT3MoZS5wYXJhbWV0ZXJzKSwgdGhpcy5fdHhDZXJ0aWZpY2F0ZXMgPSBhLkNlcnRpZmljYXRlcy5uZXcoKSwgdGhpcy5fdHhJbnB1dHNCdWlsZGVyID0gYS5UeElucHV0c0J1aWxkZXIubmV3KCksIHRoaXMuX3R4V2l0aGRyYXdhbHMgPSBhLldpdGhkcmF3YWxzLm5ldygpO1xuICB9XG4gIHN0YXRpYyBtYXNrTWV0YWRhdGEoZSwgdCA9IFwiQUxPTlpPXCIpIHtcbiAgICB2YXIgbjtcbiAgICBjb25zdCByID0gVyhlKSwgaSA9IChuID0gci5hdXhpbGlhcnlfZGF0YSgpKSA9PSBudWxsID8gdm9pZCAwIDogbi5tZXRhZGF0YSgpO1xuICAgIGlmIChpICE9PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IG8gPSBhLkdlbmVyYWxUcmFuc2FjdGlvbk1ldGFkYXRhLm5ldygpO1xuICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCBpLmxlbigpOyBjICs9IDEpIHtcbiAgICAgICAgY29uc3QgSSA9IGkua2V5cygpLmdldChjKSwgdSA9IGkuZ2V0KEkpO1xuICAgICAgICBvLmluc2VydChJLCBhLlRyYW5zYWN0aW9uTWV0YWRhdHVtLmZyb21faGV4KFwiMFwiLnJlcGVhdCgoKHUgPT0gbnVsbCA/IHZvaWQgMCA6IHUudG9faGV4KCkpID8/IFwiXCIpLmxlbmd0aCkpKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IEEgPSByLmF1eGlsaWFyeV9kYXRhKCk7XG4gICAgICByZXR1cm4gQSAhPT0gdm9pZCAwICYmIChBLnNldF9tZXRhZGF0YShvKSwgQS5zZXRfcHJlZmVyX2Fsb256b19mb3JtYXQodCA9PT0gXCJBTE9OWk9cIikpLCBhLlRyYW5zYWN0aW9uLm5ldyhyLmJvZHkoKSwgci53aXRuZXNzX3NldCgpLCBBKS50b19oZXgoKTtcbiAgICB9XG4gICAgcmV0dXJuIGU7XG4gIH1cbiAgc3RhdGljIHJlYWRNZXRhZGF0YShlKSB7XG4gICAgdmFyIHIsIGk7XG4gICAgcmV0dXJuICgoaSA9IChyID0gVyhlKS5hdXhpbGlhcnlfZGF0YSgpKSA9PSBudWxsID8gdm9pZCAwIDogci5tZXRhZGF0YSgpKSA9PSBudWxsID8gdm9pZCAwIDogaS50b19oZXgoKSkgPz8gXCJcIjtcbiAgfVxuICBzdGF0aWMgd3JpdGVNZXRhZGF0YShlLCB0LCByID0gXCJBTE9OWk9cIikge1xuICAgIGNvbnN0IGkgPSBXKGUpLCBuID0gaS5hdXhpbGlhcnlfZGF0YSgpID8/IGEuQXV4aWxpYXJ5RGF0YS5uZXcoKTtcbiAgICByZXR1cm4gbi5zZXRfbWV0YWRhdGEoYS5HZW5lcmFsVHJhbnNhY3Rpb25NZXRhZGF0YS5mcm9tX2hleCh0KSksIG4uc2V0X3ByZWZlcl9hbG9uem9fZm9ybWF0KHIgPT09IFwiQUxPTlpPXCIpLCBhLlRyYW5zYWN0aW9uLm5ldyhpLmJvZHkoKSwgaS53aXRuZXNzX3NldCgpLCBuKS50b19oZXgoKTtcbiAgfVxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fdHhCdWlsZGVyLmZ1bGxfc2l6ZSgpO1xuICB9XG4gIGFzeW5jIGJ1aWxkKCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKHRoaXMuX21pbnRCdWlsZGVyLmhhc19wbHV0dXNfc2NyaXB0cygpIHx8IHRoaXMubm90VmlzaXRlZChcInJlZGVlbVZhbHVlXCIpID09PSAhMSkgJiYgKGF3YWl0IHRoaXMuYWRkUmVxdWlyZWRTaWduZXJzSWZOZWVkZWQoKSwgYXdhaXQgdGhpcy5hZGRDb2xsYXRlcmFsSWZOZWVkZWQoKSksIGF3YWl0IHRoaXMuZm9yZ2VBc3NldHNJZk5lZWRlZCgpLCBhd2FpdCB0aGlzLmFkZFR4SW5wdXRzQXNOZWVkZWQoKSwgYXdhaXQgdGhpcy5hZGRDaGFuZ2VBZGRyZXNzKCksIHRoaXMuX3R4QnVpbGRlci5idWlsZF90eCgpLnRvX2hleCgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgW1RyYW5zYWN0aW9uXSBBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgYnVpbGQ6ICR7ZX0uYCk7XG4gICAgfVxuICB9XG4gIGJ1cm5Bc3NldChlLCB0LCByKSB7XG4gICAgY29uc3QgaSA9IHRoaXMuX3RvdGFsQnVybnMuaGFzKHQudW5pdCkgPyBhLkJpZ051bS5mcm9tX3N0cih0aGlzLl90b3RhbEJ1cm5zLmdldCh0LnVuaXQpID8/IFwiMFwiKS5jaGVja2VkX2FkZChhLkJpZ051bS5mcm9tX3N0cih0LnF1YW50aXR5KSkudG9fc3RyKCkgOiB0LnF1YW50aXR5O1xuICAgIHJldHVybiB0aGlzLl9taW50QnVpbGRlci5hZGRfYXNzZXQoZmUoZSwgciksIGEuQXNzZXROYW1lLm5ldyhmKHQudW5pdC5zbGljZShOKSkpLCBhLkludC5uZXdfbmVnYXRpdmUoYS5CaWdOdW0uZnJvbV9zdHIodC5xdWFudGl0eSkpKSwgdGhpcy5fdG90YWxCdXJucy5zZXQodC51bml0LCBpKSwgdGhpcztcbiAgfVxuICBkZWxlZ2F0ZVN0YWtlKGUsIHQpIHtcbiAgICBjb25zdCByID0gYS5DZXJ0aWZpY2F0ZS5uZXdfc3Rha2VfZGVsZWdhdGlvbihhLlN0YWtlRGVsZWdhdGlvbi5uZXcoYS5TdGFrZUNyZWRlbnRpYWwuZnJvbV9rZXloYXNoKEYoSXQoZSkpKSwgYS5FZDI1NTE5S2V5SGFzaC5mcm9tX2JlY2gzMih0KSkpO1xuICAgIHJldHVybiB0aGlzLl90eENlcnRpZmljYXRlcy5hZGQociksIHRoaXM7XG4gIH1cbiAgZGVyZWdpc3RlclN0YWtlKGUpIHtcbiAgICBjb25zdCB0ID0gYS5DZXJ0aWZpY2F0ZS5uZXdfc3Rha2VfZGVyZWdpc3RyYXRpb24oYS5TdGFrZURlcmVnaXN0cmF0aW9uLm5ldyhhLlN0YWtlQ3JlZGVudGlhbC5mcm9tX2tleWhhc2goRihJdChlKSkpKSk7XG4gICAgcmV0dXJuIHRoaXMuX3R4Q2VydGlmaWNhdGVzLmFkZCh0KSwgdGhpcztcbiAgfVxuICBtaW50QXNzZXQoZSwgdCwgcikge1xuICAgIHZhciBJLCB1O1xuICAgIGNvbnN0IGkgPSAoaCwgZykgPT4ge1xuICAgICAgY29uc3QgcCA9IHR5cGVvZiBoID09IFwic3RyaW5nXCIgPyBTdChoKS5oYXNoKCkudG9faGV4KCkgOiBuKGgpLmhhc2goKS50b19oZXgoKSwgeCA9IFMoZy5hc3NldE5hbWUpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5pdDogYCR7cH0ke3h9YCxcbiAgICAgICAgcXVhbnRpdHk6IGcuYXNzZXRRdWFudGl0eVxuICAgICAgfTtcbiAgICB9LCBuID0gKGgpID0+IHtcbiAgICAgIGlmIChcImNvZGVcIiBpbiBoKVxuICAgICAgICByZXR1cm4gYXQoaC5jb2RlLCBoLnZlcnNpb24pO1xuICAgICAgY29uc3QgZyA9IE8oaCk7XG4gICAgICBpZiAoZy5vdXRwdXQoKS5oYXNfc2NyaXB0X3JlZigpKSB7XG4gICAgICAgIGNvbnN0IHAgPSBnLm91dHB1dCgpLnNjcmlwdF9yZWYoKTtcbiAgICAgICAgaWYgKHAuaXNfcGx1dHVzX3NjcmlwdCgpKSB7XG4gICAgICAgICAgY29uc3QgeCA9IE1lKHApO1xuICAgICAgICAgIHJldHVybiBhdCh4LmNvZGUsIHgudmVyc2lvbik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcihgTm8gcGx1dHVzIHNjcmlwdCByZWZlcmVuY2UgZm91bmQgaW4gVVR4TzogJHtnLmlucHV0KCkudHJhbnNhY3Rpb25faWQoKS50b19oZXgoKX1gKTtcbiAgICB9LCBvID0gaShlLCB0KSwgYyA9IGEuQmlnTnVtLmZyb21fc3RyKCgoSSA9IHRoaXMuX3RvdGFsTWludHMuZ2V0KG8udW5pdCkpID09IG51bGwgPyB2b2lkIDAgOiBJLmFzc2V0UXVhbnRpdHkpID8/IFwiMFwiKS5jaGVja2VkX2FkZChhLkJpZ051bS5mcm9tX3N0cihvLnF1YW50aXR5KSk7XG4gICAgcmV0dXJuIHRoaXMuX21pbnRCdWlsZGVyLmFkZF9hc3NldChmZShlLCByKSwgYS5Bc3NldE5hbWUubmV3KGYoUyh0LmFzc2V0TmFtZSkpKSwgYS5JbnQubmV3KGEuQmlnTnVtLmZyb21fc3RyKG8ucXVhbnRpdHkpKSksIHRoaXMuX3JlY2lwaWVudHMuaGFzKHQucmVjaXBpZW50KSA/ICh1ID0gdGhpcy5fcmVjaXBpZW50cy5nZXQodC5yZWNpcGllbnQpKSA9PSBudWxsIHx8IHUucHVzaChvKSA6IHRoaXMuX3JlY2lwaWVudHMuc2V0KHQucmVjaXBpZW50LCBbb10pLCB0aGlzLl90b3RhbE1pbnRzLnNldChvLnVuaXQsIHtcbiAgICAgIC4uLnQsXG4gICAgICBhc3NldFF1YW50aXR5OiBjLnRvX3N0cigpXG4gICAgfSksIHRoaXM7XG4gIH1cbiAgcmVkZWVtVmFsdWUoZSkge1xuICAgIGNvbnN0IHQgPSB7XG4gICAgICB0YWc6IFwiU1BFTkRcIixcbiAgICAgIGJ1ZGdldDogbWUsXG4gICAgICBpbmRleDogdGhpcy5fdHhJbnB1dHNCdWlsZGVyLmlucHV0cygpLmxlbigpLFxuICAgICAgZGF0YToge1xuICAgICAgICBhbHRlcm5hdGl2ZTogMCxcbiAgICAgICAgZmllbGRzOiBbXVxuICAgICAgfSxcbiAgICAgIC4uLmUucmVkZWVtZXJcbiAgICB9LCByID0gTyhlLnZhbHVlKSwgaSA9IGEuUGx1dHVzV2l0bmVzcy5uZXdfd2l0aF9yZWYoT2UoZS5zY3JpcHQpLCBWcyhlLmRhdHVtKSwgUGUodCkpO1xuICAgIHJldHVybiB0aGlzLl90eElucHV0c0J1aWxkZXIuYWRkX3BsdXR1c19zY3JpcHRfaW5wdXQoaSwgci5pbnB1dCgpLCByLm91dHB1dCgpLmFtb3VudCgpKSwgdGhpcztcbiAgfVxuICByZWdpc3RlclN0YWtlKGUpIHtcbiAgICBjb25zdCB0ID0gYS5DZXJ0aWZpY2F0ZS5uZXdfc3Rha2VfcmVnaXN0cmF0aW9uKGEuU3Rha2VSZWdpc3RyYXRpb24ubmV3KGEuU3Rha2VDcmVkZW50aWFsLmZyb21fa2V5aGFzaChGKEl0KGUpKSkpKTtcbiAgICByZXR1cm4gdGhpcy5fdHhDZXJ0aWZpY2F0ZXMuYWRkKHQpLCB0aGlzO1xuICB9XG4gIHJlZ2lzdGVyUG9vbChlKSB7XG4gICAgY29uc3QgdCA9IGEuQ2VydGlmaWNhdGUubmV3X3Bvb2xfcmVnaXN0cmF0aW9uKGEuUG9vbFJlZ2lzdHJhdGlvbi5uZXcoTXMoZSkpKTtcbiAgICByZXR1cm4gdGhpcy5fdHhDZXJ0aWZpY2F0ZXMuYWRkKHQpLCB0aGlzO1xuICB9XG4gIHJldGlyZVBvb2woZSwgdCkge1xuICAgIGNvbnN0IHIgPSBhLkNlcnRpZmljYXRlLm5ld19wb29sX3JldGlyZW1lbnQoYS5Qb29sUmV0aXJlbWVudC5uZXcoYS5FZDI1NTE5S2V5SGFzaC5mcm9tX2JlY2gzMihlKSwgdCkpO1xuICAgIHJldHVybiB0aGlzLl90eENlcnRpZmljYXRlcy5hZGQociksIHRoaXM7XG4gIH1cbiAgc2VuZEFzc2V0cyhlLCB0KSB7XG4gICAgY29uc3QgciA9IHl0KHQpLCBpID0gci5tdWx0aWFzc2V0KCk7XG4gICAgaWYgKHIuaXNfemVybygpIHx8IGkgPT09IHZvaWQgMClcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IG8gPSBDdChlKS5uZXh0KCkud2l0aF9hc3NldF9hbmRfbWluX3JlcXVpcmVkX2NvaW5fYnlfdXR4b19jb3N0KGksIGxlKHRoaXMuX3Byb3RvY29sUGFyYW1ldGVycy5jb2luc1BlclVUeE9TaXplKSkuYnVpbGQoKTtcbiAgICByZXR1cm4gdGhpcy5fdHhCdWlsZGVyLmFkZF9vdXRwdXQobyksIHRoaXM7XG4gIH1cbiAgc2VuZExvdmVsYWNlKGUsIHQpIHtcbiAgICBjb25zdCBpID0gQ3QoZSkubmV4dCgpLndpdGhfY29pbihhLkJpZ051bS5mcm9tX3N0cih0KSkuYnVpbGQoKTtcbiAgICByZXR1cm4gdGhpcy5fdHhCdWlsZGVyLmFkZF9vdXRwdXQoaSksIHRoaXM7XG4gIH1cbiAgc2VuZFZhbHVlKGUsIHQpIHtcbiAgICBjb25zdCByID0geXQodC5vdXRwdXQuYW1vdW50KSwgbiA9IEN0KGUpLm5leHQoKS53aXRoX3ZhbHVlKHIpLmJ1aWxkKCk7XG4gICAgcmV0dXJuIHRoaXMuX3R4QnVpbGRlci5hZGRfb3V0cHV0KG4pLCB0aGlzO1xuICB9XG4gIHNldENoYW5nZUFkZHJlc3MoZSkge1xuICAgIHJldHVybiB0aGlzLl9jaGFuZ2VBZGRyZXNzID0gSChlKSwgdGhpcztcbiAgfVxuICBzZXRDb2xsYXRlcmFsKGUpIHtcbiAgICBjb25zdCB0ID0gX2UoZSk7XG4gICAgcmV0dXJuIHRoaXMuX3R4QnVpbGRlci5zZXRfY29sbGF0ZXJhbCh0KSwgdGhpcztcbiAgfVxuICBzZXRNZXRhZGF0YShlLCB0KSB7XG4gICAgcmV0dXJuIHRoaXMuX3R4QnVpbGRlci5hZGRfanNvbl9tZXRhZGF0dW1fd2l0aF9zY2hlbWEoYS5CaWdOdW0uZnJvbV9zdHIoZS50b1N0cmluZygpKSwgSlNPTi5zdHJpbmdpZnkodCksIGEuTWV0YWRhdGFKc29uU2NoZW1hLk5vQ29udmVyc2lvbnMpLCB0aGlzO1xuICB9XG4gIHNldFJlcXVpcmVkU2lnbmVycyhlKSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChlLm1hcCgocikgPT4gci5zdGFydHNXaXRoKFwiYWRkclwiKSA/IGV0KHIpIDogSXQocikpLm1hcCgocikgPT4gRihyKSkpKS5mb3JFYWNoKChyKSA9PiB7XG4gICAgICB0aGlzLl90eEJ1aWxkZXIuYWRkX3JlcXVpcmVkX3NpZ25lcihyKTtcbiAgICB9KSwgdGhpcztcbiAgfVxuICBzZXRUaW1lVG9TdGFydChlKSB7XG4gICAgcmV0dXJuIHRoaXMuX3R4QnVpbGRlci5zZXRfdmFsaWRpdHlfc3RhcnRfaW50ZXJ2YWxfYmlnbnVtKGEuQmlnTnVtLmZyb21fc3RyKGUpKSwgdGhpcztcbiAgfVxuICBzZXRUaW1lVG9FeHBpcmUoZSkge1xuICAgIHJldHVybiB0aGlzLl90eEJ1aWxkZXIuc2V0X3R0bF9iaWdudW0oYS5CaWdOdW0uZnJvbV9zdHIoZSkpLCB0aGlzO1xuICB9XG4gIHNldFR4SW5wdXRzKGUpIHtcbiAgICByZXR1cm4gZS5tYXAoKHQpID0+IE8odCkpLmZvckVhY2goKHQpID0+IHtcbiAgICAgIHRoaXMuX3R4SW5wdXRzQnVpbGRlci5hZGRfaW5wdXQodC5vdXRwdXQoKS5hZGRyZXNzKCksIHQuaW5wdXQoKSwgdC5vdXRwdXQoKS5hbW91bnQoKSk7XG4gICAgfSksIHRoaXM7XG4gIH1cbiAgd2l0aGRyYXdSZXdhcmRzKGUsIHQpIHtcbiAgICBjb25zdCByID0gSGUoZSk7XG4gICAgcmV0dXJuIHIgIT09IHZvaWQgMCAmJiB0aGlzLl90eFdpdGhkcmF3YWxzLmluc2VydChyLCBhLkJpZ051bS5mcm9tX3N0cih0KSksIHRoaXM7XG4gIH1cbiAgYXN5bmMgYWRkQnVybklucHV0c0lmTmVlZGVkKCkge1xuICAgIGlmICh0aGlzLl9pbml0aWF0b3IgJiYgdGhpcy5fdG90YWxCdXJucy5zaXplID4gMCAmJiB0aGlzLm5vdFZpc2l0ZWQoXCJzZXRUeElucHV0c1wiKSkge1xuICAgICAgY29uc3QgZSA9IGF3YWl0IHRoaXMuX2luaXRpYXRvci5nZXRVc2VkVVR4T3MoKTtcbiAgICAgIHRzKHRoaXMuX3RvdGFsQnVybnMsIGUubWFwKChyKSA9PiBRdChyKSkpLm1hcCgocikgPT4gTyhyKSkuZm9yRWFjaCgocikgPT4ge1xuICAgICAgICB0aGlzLl90eElucHV0c0J1aWxkZXIuYWRkX2lucHV0KHIub3V0cHV0KCkuYWRkcmVzcygpLCByLmlucHV0KCksIHIub3V0cHV0KCkuYW1vdW50KCkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGFkZENoYW5nZUFkZHJlc3MoKSB7XG4gICAgaWYgKHRoaXMuX2luaXRpYXRvciAmJiB0aGlzLl9jaGFuZ2VBZGRyZXNzID09PSB2b2lkIDApIHtcbiAgICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLl9pbml0aWF0b3IuZ2V0VXNlZEFkZHJlc3MoKTtcbiAgICAgIHRoaXMuX3R4QnVpbGRlci5hZGRfY2hhbmdlX2lmX25lZWRlZChlKTtcbiAgICB9IGVsc2VcbiAgICAgIHRoaXMuX2NoYW5nZUFkZHJlc3MgIT09IHZvaWQgMCAmJiB0aGlzLl90eEJ1aWxkZXIuYWRkX2NoYW5nZV9pZl9uZWVkZWQodGhpcy5fY2hhbmdlQWRkcmVzcyk7XG4gIH1cbiAgYXN5bmMgYWRkQ29sbGF0ZXJhbElmTmVlZGVkKCkge1xuICAgIGlmICh0aGlzLl9pbml0aWF0b3IgJiYgdGhpcy5ub3RWaXNpdGVkKFwic2V0Q29sbGF0ZXJhbFwiKSkge1xuICAgICAgY29uc3QgZSA9IGF3YWl0IHRoaXMuX2luaXRpYXRvci5nZXRVc2VkQ29sbGF0ZXJhbCgpO1xuICAgICAgdGhpcy5fdHhCdWlsZGVyLnNldF9jb2xsYXRlcmFsKF9lKGUpKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgYWRkUmVxdWlyZWRTaWduZXJzSWZOZWVkZWQoKSB7XG4gICAgaWYgKHRoaXMuX2luaXRpYXRvciAmJiB0aGlzLm5vdFZpc2l0ZWQoXCJzZXRSZXF1aXJlZFNpZ25lcnNcIikpIHtcbiAgICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLl9pbml0aWF0b3IuZ2V0VXNlZEFkZHJlc3MoKSwgdCA9IGV0KGUudG9fYmVjaDMyKCkpO1xuICAgICAgdGhpcy5fdHhCdWlsZGVyLmFkZF9yZXF1aXJlZF9zaWduZXIoRih0KSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGFkZFR4SW5wdXRzQXNOZWVkZWQoKSB7XG4gICAgaWYgKHRoaXMuX3R4QnVpbGRlci5zZXRfaW5wdXRzKHRoaXMuX3R4SW5wdXRzQnVpbGRlciksICh0aGlzLl9taW50QnVpbGRlci5oYXNfbmF0aXZlX3NjcmlwdHMoKSB8fCB0aGlzLl9taW50QnVpbGRlci5oYXNfcGx1dHVzX3NjcmlwdHMoKSkgJiYgdGhpcy5fdHhCdWlsZGVyLnNldF9taW50X2J1aWxkZXIodGhpcy5fbWludEJ1aWxkZXIpLCB0aGlzLl90eENlcnRpZmljYXRlcy5sZW4oKSA+IDAgJiYgdGhpcy5fdHhCdWlsZGVyLnNldF9jZXJ0cyh0aGlzLl90eENlcnRpZmljYXRlcyksIHRoaXMuX3R4V2l0aGRyYXdhbHMubGVuKCkgPiAwICYmIHRoaXMuX3R4QnVpbGRlci5zZXRfd2l0aGRyYXdhbHModGhpcy5fdHhXaXRoZHJhd2FscyksIHRoaXMubm90VmlzaXRlZChcInNldFR4SW5wdXRzXCIpKSB7XG4gICAgICBjb25zdCBlID0gIXRoaXMubm90VmlzaXRlZChcIm1pbnRBc3NldFwiKSB8fCAhdGhpcy5ub3RWaXNpdGVkKFwic2VuZEFzc2V0c1wiKSB8fCAhdGhpcy5ub3RWaXNpdGVkKFwic2VuZFZhbHVlXCIpLCB0ID0gYXdhaXQgdGhpcy5zZWxlY3RMb3ZlbGFjZVVUeE9zKCExKSwgciA9IGF3YWl0IHRoaXMuZmlsdGVyQXZhaWxhYmxlVVR4T3ModCksIGkgPSBlID8gYS5Db2luU2VsZWN0aW9uU3RyYXRlZ3lDSVAyLkxhcmdlc3RGaXJzdE11bHRpQXNzZXQgOiBhLkNvaW5TZWxlY3Rpb25TdHJhdGVneUNJUDIuTGFyZ2VzdEZpcnN0O1xuICAgICAgdGhpcy5fdHhCdWlsZGVyLmFkZF9pbnB1dHNfZnJvbShyLCBpKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3R4QnVpbGRlci5nZXRfbWludF9idWlsZGVyKCkgfHwgdGhpcy5ub3RWaXNpdGVkKFwicmVkZWVtVmFsdWVcIikgPT09ICExKSB7XG4gICAgICBjb25zdCBlID0gdGhpcy5fZXJhICE9PSB2b2lkIDAgPyB6dFt0aGlzLl9lcmFdIDogenQuQkFCQkFHRTtcbiAgICAgIHRoaXMuX3R4QnVpbGRlci5jYWxjX3NjcmlwdF9kYXRhX2hhc2goZSk7XG4gICAgfVxuICB9XG4gIGFzeW5jIGZvcmdlQXNzZXRzSWZOZWVkZWQoKSB7XG4gICAgY29uc3QgZSA9ICh0LCByKSA9PiB7XG4gICAgICBjb25zdCBpID0gdC5kYXRhLmFzc2V0TmFtZSwgbiA9IHQuZGF0YS5tZXRhZGF0YSwgbyA9IHQudW5pdC5zbGljZSgwLCBOKTtcbiAgICAgIGlmIChyICYmIHJbb10pIHtcbiAgICAgICAgY29uc3QgeyBbb106IEEsIC4uLmMgfSA9IHIsIEkgPSB7XG4gICAgICAgICAgW2ldOiBuLFxuICAgICAgICAgIC4uLkFcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBbb106IHtcbiAgICAgICAgICAgIC4uLklcbiAgICAgICAgICB9LFxuICAgICAgICAgIC4uLmNcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByICE9PSB2b2lkIDAgPyB7XG4gICAgICAgIFtvXToge1xuICAgICAgICAgIFtpXTogblxuICAgICAgICB9LFxuICAgICAgICAuLi5yXG4gICAgICB9IDoge1xuICAgICAgICBbb106IHsgW2ldOiBuIH1cbiAgICAgIH07XG4gICAgfTtcbiAgICBhd2FpdCB0aGlzLmFkZEJ1cm5JbnB1dHNJZk5lZWRlZCgpLCBBcnJheS5mcm9tKHRoaXMuX3RvdGFsTWludHMsICh0KSA9PiAoe1xuICAgICAgdW5pdDogdFswXSxcbiAgICAgIGRhdGE6IHRbMV1cbiAgICB9KSkucmVkdWNlKCh0LCByKSA9PiB0LnNldChyLmRhdGEubGFiZWwsIGUociwgdC5nZXQoci5kYXRhLmxhYmVsKSkpLCAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpKS5mb3JFYWNoKCh0LCByKSA9PiB7XG4gICAgICB0aGlzLl90eEJ1aWxkZXIuYWRkX2pzb25fbWV0YWRhdHVtKGEuQmlnTnVtLmZyb21fc3RyKHIpLCBKU09OLnN0cmluZ2lmeSh0KSk7XG4gICAgfSksIHRoaXMuYWRkTWludE91dHB1dHMoKTtcbiAgfVxuICBhc3luYyBmaWx0ZXJBdmFpbGFibGVVVHhPcyhlID0gW10pIHtcbiAgICBjb25zdCB0ID0gYS5UcmFuc2FjdGlvblVuc3BlbnRPdXRwdXRzLm5ldygpO1xuICAgIHJldHVybiB0aGlzLl9pbml0aWF0b3IgPT09IHZvaWQgMCB8fCAoYXdhaXQgdGhpcy5faW5pdGlhdG9yLmdldFVzZWRVVHhPcygpKS5maWx0ZXIoKGkpID0+IGUuZmluZCgobikgPT4gbi5pbnB1dC50eEhhc2ggPT09IGkuaW5wdXQoKS50cmFuc2FjdGlvbl9pZCgpLnRvX2hleCgpKSA9PT0gdm9pZCAwKS5mb3JFYWNoKChpKSA9PiB7XG4gICAgICB0LmFkZChpKTtcbiAgICB9KSwgdDtcbiAgfVxuICBhc3luYyBzZWxlY3RMb3ZlbGFjZVVUeE9zKGUpIHtcbiAgICBpZiAodGhpcy5faW5pdGlhdG9yID09PSB2b2lkIDAgfHwgZSA9PT0gITEpXG4gICAgICByZXR1cm4gW107XG4gICAgY29uc3QgdCA9IGF3YWl0IHRoaXMuX2luaXRpYXRvci5nZXRVc2VkVVR4T3MoKSwgciA9IFplKFwiNTAwMDAwMFwiLCB0Lm1hcCgobikgPT4gUXQobikpKTtcbiAgICByZXR1cm4gci5tYXAoKG4pID0+IE8obikpLmZvckVhY2goKG4pID0+IHtcbiAgICAgIHRoaXMuX3R4QnVpbGRlci5hZGRfaW5wdXQobi5vdXRwdXQoKS5hZGRyZXNzKCksIG4uaW5wdXQoKSwgbi5vdXRwdXQoKS5hbW91bnQoKSk7XG4gICAgfSksIHI7XG4gIH1cbiAgYWRkTWludE91dHB1dHMoKSB7XG4gICAgdGhpcy5fcmVjaXBpZW50cy5mb3JFYWNoKChlLCB0KSA9PiB7XG4gICAgICBjb25zdCBpID0geXQoZSkubXVsdGlhc3NldCgpO1xuICAgICAgaWYgKGkgIT09IHZvaWQgMCkge1xuICAgICAgICBjb25zdCBvID0gQ3QodCkubmV4dCgpLndpdGhfYXNzZXRfYW5kX21pbl9yZXF1aXJlZF9jb2luX2J5X3V0eG9fY29zdChpLCBsZSh0aGlzLl9wcm90b2NvbFBhcmFtZXRlcnMuY29pbnNQZXJVVHhPU2l6ZSkpLmJ1aWxkKCk7XG4gICAgICAgIHRoaXMuX3R4QnVpbGRlci5hZGRfb3V0cHV0KG8pO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIG5vdFZpc2l0ZWQoZSkge1xuICAgIHJldHVybiB0aGlzLl9fdmlzaXRzLmluY2x1ZGVzKGUpID09PSAhMTtcbiAgfVxufTtcbmooW1xuICBaKClcbl0sIFIucHJvdG90eXBlLCBcIm1pbnRBc3NldFwiLCBudWxsKTtcbmooW1xuICBaKClcbl0sIFIucHJvdG90eXBlLCBcInJlZGVlbVZhbHVlXCIsIG51bGwpO1xuaihbXG4gIFooKVxuXSwgUi5wcm90b3R5cGUsIFwic2VuZEFzc2V0c1wiLCBudWxsKTtcbmooW1xuICBaKClcbl0sIFIucHJvdG90eXBlLCBcInNlbmRWYWx1ZVwiLCBudWxsKTtcbmooW1xuICBaKClcbl0sIFIucHJvdG90eXBlLCBcInNldENvbGxhdGVyYWxcIiwgbnVsbCk7XG5qKFtcbiAgWigpXG5dLCBSLnByb3RvdHlwZSwgXCJzZXRSZXF1aXJlZFNpZ25lcnNcIiwgbnVsbCk7XG5qKFtcbiAgWigpXG5dLCBSLnByb3RvdHlwZSwgXCJzZXRUeElucHV0c1wiLCBudWxsKTtcblIgPSBqKFtcbiAgUnNcbl0sIFIpO1xuY2xhc3MgeSB7XG4gIF9uZXR3b3JrSWQ7XG4gIF9lbmNyeXB0ZWRTZWNyZXQ7XG4gIGNvbnN0cnVjdG9yKGUsIHQpIHtcbiAgICB0aGlzLl9uZXR3b3JrSWQgPSBlLCB0aGlzLl9lbmNyeXB0ZWRTZWNyZXQgPSB0O1xuICB9XG4gIGdldEFjY291bnQoZSwgdCkge1xuICAgIHJldHVybiB0aGlzLmFjY291bnRDb250ZXh0KGUsIHQsIChyLCBpKSA9PiB7XG4gICAgICBjb25zdCBuID0gZGUodGhpcy5fbmV0d29ya0lkLCByLnRvX3B1YmxpYygpLmhhc2goKSwgaS50b19wdWJsaWMoKS5oYXNoKCkpLnRvX2FkZHJlc3MoKS50b19iZWNoMzIoKSwgbyA9IGdlKHRoaXMuX25ldHdvcmtJZCwgci50b19wdWJsaWMoKS5oYXNoKCkpLnRvX2FkZHJlc3MoKS50b19iZWNoMzIoKSwgQSA9IEZ0KHRoaXMuX25ldHdvcmtJZCwgaS50b19wdWJsaWMoKS5oYXNoKCkpLnRvX2FkZHJlc3MoKS50b19iZWNoMzIoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VBZGRyZXNzOiBuLFxuICAgICAgICBlbnRlcnByaXNlQWRkcmVzczogbyxcbiAgICAgICAgcmV3YXJkQWRkcmVzczogQVxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICBzaWduRGF0YShlLCB0LCByLCBpKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLmFjY291bnRDb250ZXh0KGUsIHQsIChuLCBvKSA9PiB7XG4gICAgICAgIGNvbnN0IEEgPSB7IHBheWxvYWQ6IGkgfSwgYyA9IHtcbiAgICAgICAgICBhZGRyZXNzOiB5LnJlc29sdmVBZGRyZXNzKHRoaXMuX25ldHdvcmtJZCwgciwgbiwgbyksXG4gICAgICAgICAga2V5OiByLnN0YXJ0c1dpdGgoXCJzdGFrZVwiKSA/IG8gOiBuXG4gICAgICAgIH0sIHsgY29zZVNpZ24xOiBJLCBjb3NlS2V5OiB1IH0gPSBycyhBLCBjKTtcbiAgICAgICAgcmV0dXJuIHsgc2lnbmF0dXJlOiBJLCBrZXk6IHUgfTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKG4pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ25EYXRhOiAke259LmApO1xuICAgIH1cbiAgfVxuICBzaWduVHgoZSwgdCwgciwgaSwgbikge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCBvID0gRmUoR3MoaSkpO1xuICAgICAgcmV0dXJuIHRoaXMuYWNjb3VudENvbnRleHQoZSwgdCwgKEEsIGMpID0+IHtcbiAgICAgICAgY29uc3QgSSA9IGEuVmtleXdpdG5lc3Nlcy5uZXcoKTtcbiAgICAgICAgcmV0dXJuIHkucmVzb2x2ZVNpZ25lcnMoaSwgciwgQS50b19wdWJsaWMoKS5oYXNoKCkudG9faGV4KCkpLmZvckVhY2goKGgpID0+IHtcbiAgICAgICAgICBpZiAoaCA9PT0gQS50b19wdWJsaWMoKS5oYXNoKCkudG9faGV4KCkpXG4gICAgICAgICAgICBJLmFkZChhLm1ha2VfdmtleV93aXRuZXNzKG8sIEEpKTtcbiAgICAgICAgICBlbHNlIGlmIChoID09PSBjLnRvX3B1YmxpYygpLmhhc2goKS50b19oZXgoKSlcbiAgICAgICAgICAgIEkuYWRkKGEubWFrZV92a2V5X3dpdG5lc3MobywgYykpO1xuICAgICAgICAgIGVsc2UgaWYgKG4gPT09ICExKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBNaXNzaW5nIGtleSB3aXRuZXNzIGZvcjogJHtofWApO1xuICAgICAgICB9KSwgSTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKG8pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ25UeDogJHtvfS5gKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGVuY3J5cHRNbmVtb25pYyhlLCB0KSB7XG4gICAgY29uc3QgciA9IHBlKGUuam9pbihcIiBcIikpLCBpID0gVmUociksIG4gPSBLKGkuYXNfYnl0ZXMoKSk7XG4gICAgcmV0dXJuIGkuZnJlZSgpLCB5LmVuY3J5cHQobiwgdCk7XG4gIH1cbiAgc3RhdGljIGVuY3J5cHRQcml2YXRlS2V5KGUsIHQpIHtcbiAgICBjb25zdCByID0gYS5CaXAzMlByaXZhdGVLZXkuZnJvbV9iZWNoMzIoZSksIGkgPSBLKHIuYXNfYnl0ZXMoKSk7XG4gICAgcmV0dXJuIHIuZnJlZSgpLCB5LmVuY3J5cHQoaSwgdCk7XG4gIH1cbiAgc3RhdGljIGVuY3J5cHRTaWduaW5nS2V5cyhlLCB0LCByKSB7XG4gICAgY29uc3QgaSA9IHkuZW5jcnlwdChlLnNsaWNlKDQpLCByKSwgbiA9IHkuZW5jcnlwdCh0LnNsaWNlKDQpLCByKTtcbiAgICByZXR1cm4gW2ksIG5dO1xuICB9XG4gIHN0YXRpYyBnZW5lcmF0ZU1uZW1vbmljKGUgPSAyNTYpIHtcbiAgICByZXR1cm4gTGUoZSkuc3BsaXQoXCIgXCIpO1xuICB9XG4gIGFjY291bnRDb250ZXh0KGUsIHQsIHIpIHtcbiAgICBjb25zdCB7IHBheW1lbnRLZXk6IGksIHN0YWtlS2V5OiBuIH0gPSB5LnJlc29sdmVLZXlzKGUsIHQsIHRoaXMuX2VuY3J5cHRlZFNlY3JldCksIG8gPSByKGksIG4pO1xuICAgIHJldHVybiBpLmZyZWUoKSwgbi5mcmVlKCksIG87XG4gIH1cbiAgc3RhdGljIGRlY3J5cHQoZSwgdCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gYS5kZWNyeXB0X3dpdGhfcGFzc3dvcmQoUyh0KSwgZSk7XG4gICAgfSBjYXRjaCB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgcGFzc3dvcmQgaXMgaW5jb3JyZWN0LlwiKTtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGVuY3J5cHQoZSwgdCkge1xuICAgIGNvbnN0IHIgPSBDZShcIjAxMjM0NTY3ODlhYmNkZWZcIiksIGkgPSByKDY0KSwgbiA9IHIoMjQpO1xuICAgIHJldHVybiBhLmVuY3J5cHRfd2l0aF9wYXNzd29yZChTKHQpLCBpLCBuLCBlKTtcbiAgfVxuICBzdGF0aWMgcmVzb2x2ZUFkZHJlc3MoZSwgdCwgciwgaSkge1xuICAgIGNvbnN0IG4gPSBbXG4gICAgICBkZShlLCByLnRvX3B1YmxpYygpLmhhc2goKSwgaS50b19wdWJsaWMoKS5oYXNoKCkpLFxuICAgICAgZ2UoZSwgci50b19wdWJsaWMoKS5oYXNoKCkpLFxuICAgICAgRnQoZSwgaS50b19wdWJsaWMoKS5oYXNoKCkpXG4gICAgXS5maW5kKChvKSA9PiBvLnRvX2FkZHJlc3MoKS50b19iZWNoMzIoKSA9PT0gdCk7XG4gICAgaWYgKG4gIT09IHZvaWQgMClcbiAgICAgIHJldHVybiBuLnRvX2FkZHJlc3MoKTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEFkZHJlc3M6ICR7dH0gZG9lc24ndCBiZWxvbmcgdG8gdGhpcyBhY2NvdW50LmApO1xuICB9XG4gIHN0YXRpYyByZXNvbHZlS2V5cyhlLCB0LCByKSB7XG4gICAgaWYgKHR5cGVvZiByID09IFwic3RyaW5nXCIpIHtcbiAgICAgIGNvbnN0IG8gPSB5LmRlY3J5cHQociwgdCk7XG4gICAgICByZXR1cm4gRHMobywgZSk7XG4gICAgfVxuICAgIGNvbnN0IGkgPSB5LmRlY3J5cHQoclswXSwgdCksIG4gPSB5LmRlY3J5cHQoclsxXSwgdCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBheW1lbnRLZXk6IGEuUHJpdmF0ZUtleS5mcm9tX2hleChpKSxcbiAgICAgIHN0YWtlS2V5OiBhLlByaXZhdGVLZXkuZnJvbV9oZXgobilcbiAgICB9O1xuICB9XG4gIHN0YXRpYyByZXNvbHZlU2lnbmVycyhlLCB0LCByKSB7XG4gICAgY29uc3QgaSA9IChBKSA9PiB7XG4gICAgICBjb25zdCBjID0gKF8sIEIgPSBbXSwgbSA9IDApID0+IHtcbiAgICAgICAgdmFyIGx0LCBBdCwgWXQsIEd0LCBSdDtcbiAgICAgICAgaWYgKF8gPT09IHZvaWQgMCB8fCBtID49IF8ubGVuKCkpXG4gICAgICAgICAgcmV0dXJuIEI7XG4gICAgICAgIGNvbnN0IHYgPSBfLmdldChtKSwgYiA9IG5ldyBBcnJheSgpO1xuICAgICAgICBzd2l0Y2ggKHYua2luZCgpKSB7XG4gICAgICAgICAgY2FzZSBhLkNlcnRpZmljYXRlS2luZC5TdGFrZURlcmVnaXN0cmF0aW9uOiB7XG4gICAgICAgICAgICBjb25zdCB3ID0gKGx0ID0gdi5hc19zdGFrZV9kZXJlZ2lzdHJhdGlvbigpKSA9PSBudWxsID8gdm9pZCAwIDogbHQuc3Rha2VfY3JlZGVudGlhbCgpLCBUID0gKHcgPT0gbnVsbCA/IHZvaWQgMCA6IHcua2luZCgpKSA9PT0gYS5TdGFrZUNyZWRLaW5kLktleSA/IHcudG9fa2V5aGFzaCgpIDogdm9pZCAwO1xuICAgICAgICAgICAgVCAmJiBiLnB1c2goVC50b19oZXgoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBhLkNlcnRpZmljYXRlS2luZC5TdGFrZURlbGVnYXRpb246IHtcbiAgICAgICAgICAgIGNvbnN0IHcgPSAoQXQgPSB2LmFzX3N0YWtlX2RlbGVnYXRpb24oKSkgPT0gbnVsbCA/IHZvaWQgMCA6IEF0LnN0YWtlX2NyZWRlbnRpYWwoKSwgVCA9ICh3ID09IG51bGwgPyB2b2lkIDAgOiB3LmtpbmQoKSkgPT09IGEuU3Rha2VDcmVkS2luZC5LZXkgPyB3LnRvX2tleWhhc2goKSA6IHZvaWQgMDtcbiAgICAgICAgICAgIFQgJiYgYi5wdXNoKFQudG9faGV4KCkpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNhc2UgYS5DZXJ0aWZpY2F0ZUtpbmQuUG9vbFJlZ2lzdHJhdGlvbjoge1xuICAgICAgICAgICAgY29uc3QgdyA9IChZdCA9IHYuYXNfcG9vbF9yZWdpc3RyYXRpb24oKSkgPT0gbnVsbCA/IHZvaWQgMCA6IFl0LnBvb2xfcGFyYW1zKCkucG9vbF9vd25lcnMoKTtcbiAgICAgICAgICAgIGIucHVzaCguLi51KHcpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlIGEuQ2VydGlmaWNhdGVLaW5kLlBvb2xSZXRpcmVtZW50OiB7XG4gICAgICAgICAgICBjb25zdCB3ID0gKEd0ID0gdi5hc19wb29sX3JldGlyZW1lbnQoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IEd0LnBvb2xfa2V5aGFzaCgpO1xuICAgICAgICAgICAgdyAmJiBiLnB1c2gody50b19oZXgoKSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSBhLkNlcnRpZmljYXRlS2luZC5Nb3ZlSW5zdGFudGFuZW91c1Jld2FyZHNDZXJ0OiB7XG4gICAgICAgICAgICBjb25zdCB3ID0gKFJ0ID0gdi5hc19tb3ZlX2luc3RhbnRhbmVvdXNfcmV3YXJkc19jZXJ0KCkpID09IG51bGwgPyB2b2lkIDAgOiBSdC5tb3ZlX2luc3RhbnRhbmVvdXNfcmV3YXJkKCkuYXNfdG9fc3Rha2VfY3JlZHMoKTtcbiAgICAgICAgICAgIGlmICh3KVxuICAgICAgICAgICAgICBmb3IgKGxldCBUID0gMDsgVCA8IHcubGVuKCk7IFQgKz0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IEx0ID0gdy5rZXlzKCkuZ2V0KFQpLCAkdCA9IEx0LmtpbmQoKSA9PT0gYS5TdGFrZUNyZWRLaW5kLktleSA/IEx0LnRvX2tleWhhc2goKSA6IHZvaWQgMDtcbiAgICAgICAgICAgICAgICAkdCAmJiBiLnB1c2goJHQudG9faGV4KCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGMoXywgWy4uLkIsIC4uLmJdLCBtICsgMSk7XG4gICAgICB9LCBJID0gKF8sIEIgPSBbXSwgbSA9IDApID0+IHtcbiAgICAgICAgaWYgKF8gPT09IHZvaWQgMCB8fCBtID49IF8ubGVuKCkpXG4gICAgICAgICAgcmV0dXJuIEI7XG4gICAgICAgIGNvbnN0IHYgPSBfLmdldChtKS5pbmRleCgpLCBiID0gXy5nZXQobSkudHJhbnNhY3Rpb25faWQoKSwgbHQgPSB0LmZpbmQoKEF0KSA9PiBBdC5pbnB1dC5vdXRwdXRJbmRleCA9PT0gdiAmJiBBdC5pbnB1dC50eEhhc2ggPT09IGIudG9faGV4KCkpICE9PSB2b2lkIDAgPyByIDogXCJPVVJfUFJJTkNFU1NfSVNfSU5fQU5PVEhFUl9DQVNUTEVcIjtcbiAgICAgICAgcmV0dXJuIEkoXywgWy4uLkIsIGx0XSwgbSArIDEpO1xuICAgICAgfSwgdSA9IChfLCBCID0gW10sIG0gPSAwKSA9PiBfID09PSB2b2lkIDAgfHwgbSA+PSBfLmxlbigpID8gQiA6IHUoXywgWy4uLkIsIF8uZ2V0KG0pLnRvX2hleCgpXSwgbSArIDEpLCBoID0gKF8sIEIgPSBbXSwgbSA9IDApID0+IHtcbiAgICAgICAgaWYgKF8gPT09IHZvaWQgMCB8fCBtID49IF8ubGVuKCkpXG4gICAgICAgICAgcmV0dXJuIEI7XG4gICAgICAgIGNvbnN0IHYgPSBfLmtleXMoKS5nZXQobSkucGF5bWVudF9jcmVkKCksIGIgPSB2LmtpbmQoKSA9PT0gYS5TdGFrZUNyZWRLaW5kLktleSA/IHYudG9fa2V5aGFzaCgpIDogdm9pZCAwO1xuICAgICAgICByZXR1cm4gaChfLCBiID8gWy4uLkIsIGIudG9faGV4KCldIDogQiwgbSArIDEpO1xuICAgICAgfSwgZyA9IEEuY2VydHMoKSwgcCA9IEEuY29sbGF0ZXJhbCgpLCB4ID0gQS5pbnB1dHMoKSwgTSA9IEEucmVxdWlyZWRfc2lnbmVycygpLCBMID0gQS53aXRoZHJhd2FscygpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uYyhnKSxcbiAgICAgICAgLi4uSShwKSxcbiAgICAgICAgLi4uSSh4KSxcbiAgICAgICAgLi4udShNKSxcbiAgICAgICAgLi4uaChMKVxuICAgICAgXTtcbiAgICB9LCBuID0gKEEpID0+IHtcbiAgICAgIGNvbnN0IGMgPSAodSwgaCA9IFtdKSA9PiB7XG4gICAgICAgIHZhciBnLCBwLCB4LCBNO1xuICAgICAgICBpZiAodSlcbiAgICAgICAgICBmb3IgKGxldCBMID0gMDsgTCA8IHUubGVuKCk7IEwgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgXyA9IHUuZ2V0KEwpO1xuICAgICAgICAgICAgc3dpdGNoIChfLmtpbmQoKSkge1xuICAgICAgICAgICAgICBjYXNlIGEuTmF0aXZlU2NyaXB0S2luZC5TY3JpcHRQdWJrZXk6IHtcbiAgICAgICAgICAgICAgICBjb25zdCBCID0gKGcgPSBfLmFzX3NjcmlwdF9wdWJrZXkoKSkgPT0gbnVsbCA/IHZvaWQgMCA6IGcuYWRkcl9rZXloYXNoKCkudG9faGV4KCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIEIgPyBbLi4uaCwgQl0gOiBoO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgYS5OYXRpdmVTY3JpcHRLaW5kLlNjcmlwdEFsbDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYygocCA9IF8uYXNfc2NyaXB0X2FsbCgpKSA9PSBudWxsID8gdm9pZCAwIDogcC5uYXRpdmVfc2NyaXB0cygpLCBoKTtcbiAgICAgICAgICAgICAgY2FzZSBhLk5hdGl2ZVNjcmlwdEtpbmQuU2NyaXB0QW55OlxuICAgICAgICAgICAgICAgIHJldHVybiBjKCh4ID0gXy5hc19zY3JpcHRfYW55KCkpID09IG51bGwgPyB2b2lkIDAgOiB4Lm5hdGl2ZV9zY3JpcHRzKCksIGgpO1xuICAgICAgICAgICAgICBjYXNlIGEuTmF0aXZlU2NyaXB0S2luZC5TY3JpcHROT2ZLOlxuICAgICAgICAgICAgICAgIHJldHVybiBjKChNID0gXy5hc19zY3JpcHRfbl9vZl9rKCkpID09IG51bGwgPyB2b2lkIDAgOiBNLm5hdGl2ZV9zY3JpcHRzKCksIGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGg7XG4gICAgICB9LCBJID0gQS5uYXRpdmVfc2NyaXB0cygpO1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4uYyhJKVxuICAgICAgXTtcbiAgICB9LCBvID0gVyhlKTtcbiAgICByZXR1cm4gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoW1xuICAgICAgLi4uaShvLmJvZHkoKSksXG4gICAgICAuLi5uKG8ud2l0bmVzc19zZXQoKSlcbiAgICBdKTtcbiAgfVxufVxuY29uc3QgVSA9IFwiTUFSSTBUSU1FXCI7XG5jbGFzcyBmciB7XG4gIF9mZXRjaGVyO1xuICBfc3VibWl0dGVyO1xuICBfd2FsbGV0O1xuICBjb25zdHJ1Y3RvcihlKSB7XG4gICAgc3dpdGNoICh0aGlzLl9mZXRjaGVyID0gZS5mZXRjaGVyLCB0aGlzLl9zdWJtaXR0ZXIgPSBlLnN1Ym1pdHRlciwgZS5rZXkudHlwZSkge1xuICAgICAgY2FzZSBcIm1uZW1vbmljXCI6XG4gICAgICAgIHRoaXMuX3dhbGxldCA9IG5ldyB5KGUubmV0d29ya0lkLCB5LmVuY3J5cHRNbmVtb25pYyhlLmtleS53b3JkcywgVSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJyb290XCI6XG4gICAgICAgIHRoaXMuX3dhbGxldCA9IG5ldyB5KGUubmV0d29ya0lkLCB5LmVuY3J5cHRQcml2YXRlS2V5KGUua2V5LmJlY2gzMiwgVSkpO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJjbGlcIjpcbiAgICAgICAgdGhpcy5fd2FsbGV0ID0gbmV3IHkoZS5uZXR3b3JrSWQsIHkuZW5jcnlwdFNpZ25pbmdLZXlzKGUua2V5LnBheW1lbnQsIGUua2V5LnN0YWtlID8/IFwiZjBcIi5yZXBlYXQoMzQpLCBVKSk7XG4gICAgfVxuICB9XG4gIGdldFBheW1lbnRBZGRyZXNzKGUgPSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dhbGxldC5nZXRBY2NvdW50KGUsIFUpLmVudGVycHJpc2VBZGRyZXNzO1xuICB9XG4gIGdldFJld2FyZEFkZHJlc3MoZSA9IDApIHtcbiAgICByZXR1cm4gdGhpcy5fd2FsbGV0LmdldEFjY291bnQoZSwgVSkucmV3YXJkQWRkcmVzcztcbiAgfVxuICBnZXRVc2VkQWRkcmVzcyhlID0gMCkge1xuICAgIGNvbnN0IHQgPSB0aGlzLl93YWxsZXQuZ2V0QWNjb3VudChlLCBVKTtcbiAgICByZXR1cm4gSCh0LmVudGVycHJpc2VBZGRyZXNzKTtcbiAgfVxuICBnZXRVc2VkQ29sbGF0ZXJhbChlID0gWS5tYXhDb2xsYXRlcmFsSW5wdXRzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZ2V0VXNlZENvbGxhdGVyYWwgbm90IGltcGxlbWVudGVkLlwiKTtcbiAgfVxuICBhc3luYyBnZXRVc2VkVVR4T3MoZSA9IDApIHtcbiAgICBjb25zdCB0ID0gdGhpcy5fd2FsbGV0LmdldEFjY291bnQoZSwgVSk7XG4gICAgcmV0dXJuIChhd2FpdCB0aGlzLl9mZXRjaGVyLmZldGNoQWRkcmVzc1VUeE9zKHQuZW50ZXJwcmlzZUFkZHJlc3MpKS5tYXAoKGkpID0+IE8oaSkpO1xuICB9XG4gIHNpZ25EYXRhKGUsIHQsIHIgPSAwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB0aGlzLl93YWxsZXQuc2lnbkRhdGEociwgVSwgZSwgdCk7XG4gICAgfSBjYXRjaCAoaSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBbQXBwV2FsbGV0XSBBbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgc2lnbkRhdGE6ICR7aX0uYCk7XG4gICAgfVxuICB9XG4gIGFzeW5jIHNpZ25UeChlLCB0ID0gITEsIHIgPSAwKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGkgPSB0aGlzLl93YWxsZXQuZ2V0QWNjb3VudChyLCBVKSwgbiA9IGF3YWl0IHRoaXMuX2ZldGNoZXIuZmV0Y2hBZGRyZXNzVVR4T3MoaS5lbnRlcnByaXNlQWRkcmVzcyksIG8gPSB0aGlzLl93YWxsZXQuc2lnblR4KHIsIFUsIG4sIGUsIHQpLCBBID0gVyhlKSwgYyA9IEEud2l0bmVzc19zZXQoKSwgSSA9IEdlKGMsIG8pO1xuICAgICAgcmV0dXJuIGMuc2V0X3ZrZXlzKEkpLCBhLlRyYW5zYWN0aW9uLm5ldyhBLmJvZHkoKSwgYywgQS5hdXhpbGlhcnlfZGF0YSgpKS50b19oZXgoKTtcbiAgICB9IGNhdGNoIChpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYFtBcHBXYWxsZXRdIEFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBzaWduVHg6ICR7aX0uYCk7XG4gICAgfVxuICB9XG4gIHN1Ym1pdFR4KGUpIHtcbiAgICByZXR1cm4gdGhpcy5fc3VibWl0dGVyLnN1Ym1pdFR4KGUpO1xuICB9XG4gIHN0YXRpYyBicmV3KGUgPSAyNTYpIHtcbiAgICByZXR1cm4geS5nZW5lcmF0ZU1uZW1vbmljKGUpO1xuICB9XG59XG5jbGFzcyBOdCB7XG4gIF93YWxsZXRJbnN0YW5jZTtcbiAgY29uc3RydWN0b3IoZSkge1xuICAgIHRoaXMuX3dhbGxldEluc3RhbmNlID0gZTtcbiAgfVxuICBzdGF0aWMgZ2V0SW5zdGFsbGVkV2FsbGV0cygpIHtcbiAgICByZXR1cm4gd2luZG93LmNhcmRhbm8gPT09IHZvaWQgMCA/IFtdIDogSnQuZmlsdGVyKChlKSA9PiB3aW5kb3cuY2FyZGFub1tlXSAhPT0gdm9pZCAwKS5tYXAoKGUpID0+ICh7XG4gICAgICBuYW1lOiB3aW5kb3cuY2FyZGFub1tlXS5uYW1lLFxuICAgICAgaWNvbjogd2luZG93LmNhcmRhbm9bZV0uaWNvbixcbiAgICAgIHZlcnNpb246IHdpbmRvdy5jYXJkYW5vW2VdLmFwaVZlcnNpb25cbiAgICB9KSk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGVuYWJsZShlKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHQgPSBhd2FpdCBOdC5yZXNvbHZlSW5zdGFuY2UoZSk7XG4gICAgICBpZiAodCAhPT0gdm9pZCAwKVxuICAgICAgICByZXR1cm4gbmV3IE50KHQpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDb3VsZG4ndCBjcmVhdGUgYW4gaW5zdGFuY2Ugb2Ygd2FsbGV0OiAke2V9YCk7XG4gICAgfSBjYXRjaCAodCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBbQnJvd3NlcldhbGxldF0gQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIGVuYWJsZTogJHt0fS5gKTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgZ2V0QmFsYW5jZSgpIHtcbiAgICBjb25zdCBlID0gYXdhaXQgdGhpcy5fd2FsbGV0SW5zdGFuY2UuZ2V0QmFsYW5jZSgpO1xuICAgIHJldHVybiBUZShQcyhlKSk7XG4gIH1cbiAgYXN5bmMgZ2V0Q2hhbmdlQWRkcmVzcygpIHtcbiAgICBjb25zdCBlID0gYXdhaXQgdGhpcy5fd2FsbGV0SW5zdGFuY2UuZ2V0Q2hhbmdlQWRkcmVzcygpO1xuICAgIHJldHVybiB0dChlKS50b19iZWNoMzIoKTtcbiAgfVxuICBhc3luYyBnZXRDb2xsYXRlcmFsKGUgPSBZLm1heENvbGxhdGVyYWxJbnB1dHMpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0VXNlZENvbGxhdGVyYWwoZSkpLm1hcCgocikgPT4gUXQocikpO1xuICB9XG4gIGdldE5ldHdvcmtJZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fd2FsbGV0SW5zdGFuY2UuZ2V0TmV0d29ya0lkKCk7XG4gIH1cbiAgYXN5bmMgZ2V0UmV3YXJkQWRkcmVzc2VzKCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5fd2FsbGV0SW5zdGFuY2UuZ2V0UmV3YXJkQWRkcmVzc2VzKCkpLm1hcCgodCkgPT4gdHQodCkudG9fYmVjaDMyKCkpO1xuICB9XG4gIGFzeW5jIGdldFVudXNlZEFkZHJlc3NlcygpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuX3dhbGxldEluc3RhbmNlLmdldFVudXNlZEFkZHJlc3NlcygpKS5tYXAoKHQpID0+IHR0KHQpLnRvX2JlY2gzMigpKTtcbiAgfVxuICBhc3luYyBnZXRVc2VkQWRkcmVzc2VzKCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5fd2FsbGV0SW5zdGFuY2UuZ2V0VXNlZEFkZHJlc3NlcygpKS5tYXAoKHQpID0+IHR0KHQpLnRvX2JlY2gzMigpKTtcbiAgfVxuICBhc3luYyBnZXRVdHhvcygpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0VXNlZFVUeE9zKCkpLm1hcCgodCkgPT4gUXQodCkpO1xuICB9XG4gIHNpZ25EYXRhKGUsIHQpIHtcbiAgICBjb25zdCByID0gSChlKS50b19oZXgoKTtcbiAgICByZXR1cm4gdGhpcy5fd2FsbGV0SW5zdGFuY2Uuc2lnbkRhdGEociwgUyh0KSk7XG4gIH1cbiAgYXN5bmMgc2lnblR4KGUsIHQgPSAhMSkge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByID0gVyhlKSwgaSA9IHIud2l0bmVzc19zZXQoKSwgbiA9IGF3YWl0IHRoaXMuX3dhbGxldEluc3RhbmNlLnNpZ25UeChlLCB0KSwgbyA9IEhzKG4pLnZrZXlzKCkgPz8gYS5Wa2V5d2l0bmVzc2VzLm5ldygpLCBBID0gR2UoaSwgbyk7XG4gICAgICByZXR1cm4gaS5zZXRfdmtleXMoQSksIEsoYS5UcmFuc2FjdGlvbi5uZXcoci5ib2R5KCksIGksIHIuYXV4aWxpYXJ5X2RhdGEoKSkudG9fYnl0ZXMoKSk7XG4gICAgfSBjYXRjaCAocikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBbQnJvd3NlcldhbGxldF0gQW4gZXJyb3Igb2NjdXJyZWQgZHVyaW5nIHNpZ25UeDogJHtKU09OLnN0cmluZ2lmeShyKX0uYCk7XG4gICAgfVxuICB9XG4gIHN1Ym1pdFR4KGUpIHtcbiAgICByZXR1cm4gdGhpcy5fd2FsbGV0SW5zdGFuY2Uuc3VibWl0VHgoZSk7XG4gIH1cbiAgYXN5bmMgZ2V0VXNlZEFkZHJlc3MoKSB7XG4gICAgY29uc3QgZSA9IGF3YWl0IHRoaXMuX3dhbGxldEluc3RhbmNlLmdldFVzZWRBZGRyZXNzZXMoKTtcbiAgICByZXR1cm4gdHQoZVswXSk7XG4gIH1cbiAgYXN5bmMgZ2V0VXNlZENvbGxhdGVyYWwoZSA9IFkubWF4Q29sbGF0ZXJhbElucHV0cykge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5fd2FsbGV0SW5zdGFuY2UuZXhwZXJpbWVudGFsLmdldENvbGxhdGVyYWwoKSA/PyBbXSkubWFwKChyKSA9PiBoZShyKSkuc2xpY2UoMCwgZSk7XG4gIH1cbiAgYXN5bmMgZ2V0VXNlZFVUeE9zKCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5fd2FsbGV0SW5zdGFuY2UuZ2V0VXR4b3MoKSA/PyBbXSkubWFwKCh0KSA9PiBoZSh0KSk7XG4gIH1cbiAgYXN5bmMgZ2V0QXNzZXRzKCkge1xuICAgIHJldHVybiAoYXdhaXQgdGhpcy5nZXRCYWxhbmNlKCkpLmZpbHRlcigodCkgPT4gdC51bml0ICE9PSBcImxvdmVsYWNlXCIpLm1hcCgodCkgPT4ge1xuICAgICAgY29uc3QgciA9IHQudW5pdC5zbGljZSgwLCBOKSwgaSA9IHQudW5pdC5zbGljZShOKSwgbiA9IFlzKHIsIGkpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdW5pdDogdC51bml0LFxuICAgICAgICBwb2xpY3lJZDogcixcbiAgICAgICAgYXNzZXROYW1lOiBWdChpKSxcbiAgICAgICAgZmluZ2VycHJpbnQ6IG4sXG4gICAgICAgIHF1YW50aXR5OiB0LnF1YW50aXR5XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG4gIGFzeW5jIGdldExvdmVsYWNlKCkge1xuICAgIGNvbnN0IHQgPSAoYXdhaXQgdGhpcy5nZXRCYWxhbmNlKCkpLmZpbmQoKHIpID0+IHIudW5pdCA9PT0gXCJsb3ZlbGFjZVwiKTtcbiAgICByZXR1cm4gdCAhPT0gdm9pZCAwID8gdC5xdWFudGl0eSA6IFwiMFwiO1xuICB9XG4gIGFzeW5jIGdldFBvbGljeUlkQXNzZXRzKGUpIHtcbiAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0QXNzZXRzKCkpLmZpbHRlcigocikgPT4gci5wb2xpY3lJZCA9PT0gZSk7XG4gIH1cbiAgYXN5bmMgZ2V0UG9saWN5SWRzKCkge1xuICAgIGNvbnN0IGUgPSBhd2FpdCB0aGlzLmdldEJhbGFuY2UoKTtcbiAgICByZXR1cm4gQXJyYXkuZnJvbShuZXcgU2V0KGUubWFwKCh0KSA9PiB0LnVuaXQuc2xpY2UoMCwgTikpKSkuZmlsdGVyKCh0KSA9PiB0ICE9PSBcImxvdmVsYWNlXCIpO1xuICB9XG4gIHN0YXRpYyByZXNvbHZlSW5zdGFuY2UoZSkge1xuICAgIGlmICh3aW5kb3cuY2FyZGFubyA9PT0gdm9pZCAwKVxuICAgICAgcmV0dXJuO1xuICAgIGNvbnN0IHQgPSBKdC5tYXAoKHIpID0+IHdpbmRvdy5jYXJkYW5vW3JdKS5maWx0ZXIoKHIpID0+IHIgIT09IHZvaWQgMCkuZmluZCgocikgPT4gci5uYW1lLnRvTG93ZXJDYXNlKCkgPT09IGUudG9Mb3dlckNhc2UoKSk7XG4gICAgcmV0dXJuIHQgPT0gbnVsbCA/IHZvaWQgMCA6IHQuZW5hYmxlKCk7XG4gIH1cbn1cbmNvbnN0IFJlID0gXCJodHRwOi8vbG9jYWxob3N0OjQwMDAvXCIsIExzID0gXCJodHRwOi8vbG9jYWxob3N0OjUwMDAvXCIsICRzID0gYCR7UmV9YWNjZXNzYCwgcXMgPSBgJHtSZX10cmFuc2FjdGlvbi9zaWdudHhgO1xuY2xhc3MgX3Ige1xuICBzdGF0aWMgZ2V0QXhpb3NJbnN0YW5jZSgpIHtcbiAgICByZXR1cm4gb3QuY3JlYXRlKHtcbiAgICAgIGJhc2VVUkw6IExzLFxuICAgICAgd2l0aENyZWRlbnRpYWxzOiAhMFxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBnZXRBcHBJZCgpIHtcbiAgICByZXR1cm4gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lO1xuICB9XG4gIHN0YXRpYyBhc3luYyBvcGVuTWluYUZyb250ZW5kKGUpIHtcbiAgICBjb25zdCB0ID0gdGhpcy5nZXRBcHBJZCgpO1xuICAgIGUuaW5jbHVkZXMoXCI/XCIpID8gZSA9IGAke2V9JmFwcElkPSR7dH1gIDogZSA9IGAke2V9P2FwcElkPSR7dH1gO1xuICAgIGNvbnN0IHIgPSBcImxlZnQ9MTAwLHRvcD0xMDAsd2lkdGg9NTQwLGhlaWdodD01NDBcIiwgaSA9IHdpbmRvdy5vcGVuKGUsIFwibWVzaFdpbmRvd1wiLCByKTtcbiAgICByZXR1cm4gaSB8fCBjb25zb2xlLmVycm9yKFwidGhlIHdpbmRvdyBkaWQgbm90IG9wZW5cIiwgaSksIGF3YWl0IChhc3luYyAoKSA9PiBuZXcgUHJvbWlzZSgobikgPT4ge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGFzeW5jIChvKSA9PiB7XG4gICAgICAgIG8uZGF0YS50YXJnZXQgPT0gXCJtaW5hV2FsbGV0XCIgJiYgbihvLmRhdGEpO1xuICAgICAgfSk7XG4gICAgfSkpKCk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGdldChlLCB0ID0ge30pIHtcbiAgICBjb25zdCByID0gdGhpcy5nZXRBcHBJZCgpO1xuICAgIHQgPSB7XG4gICAgICAuLi50LFxuICAgICAgYXBwSWQ6IHJcbiAgICB9O1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGF3YWl0IHRoaXMuZ2V0QXhpb3NJbnN0YW5jZSgpLmdldChlLCB7XG4gICAgICAgIHBhcmFtczogdFxuICAgICAgfSkpLmRhdGE7XG4gICAgfSBjYXRjaCB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiTm90IGxvZ2dlZCBpblwiKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cbiAgc3RhdGljIGFzeW5jIGVuYWJsZSgpIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQoXCJ3YWxsZXQvZ2V0dXNlcndhbGxldHNtZXRhXCIpID09PSB2b2lkIDAgPyBhd2FpdCB0aGlzLm9wZW5NaW5hRnJvbnRlbmQoJHMpIDogITA7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGdldENoYW5nZUFkZHJlc3MoZSA9IHZvaWQgMCwgdCA9IHZvaWQgMCkge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldChcIndhbGxldC9nZXRjaGFuZ2VhZGRyZXNzXCIsIHtcbiAgICAgIHdhbGxldElkOiBlLFxuICAgICAgYWNjb3VudEluZGV4OiB0XG4gICAgfSk7XG4gIH1cbiAgc3RhdGljIGFzeW5jIGdldFV0eG9zKGUgPSB2b2lkIDAsIHQgPSB2b2lkIDApIHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5nZXQoXCJ3YWxsZXQvZ2V0dXR4b1wiLCB7XG4gICAgICB3YWxsZXRJZDogZSxcbiAgICAgIGFjY291bnRJbmRleDogdFxuICAgIH0pO1xuICB9XG4gIHN0YXRpYyBhc3luYyBzaWduVHgoZSwgdCA9ICExKSB7XG4gICAgY29uc3QgciA9IGF3YWl0IHRoaXMuZ2V0KFwid2FsbGV0L2dldHVzZXJ3YWxsZXRzbWV0YVwiKTtcbiAgICBpZiAoY29uc29sZS5sb2coXCJ1c2VyV2FsbGV0c01ldGFcIiwgciksIHIpIHtcbiAgICAgIGNvbnN0IGkgPSBhd2FpdCB0aGlzLm9wZW5NaW5hRnJvbnRlbmQoYCR7cXN9P3Vuc2lnbmVkVHg9JHtlfSZwYXJ0aWFsU2lnbj0ke3R9YCk7XG4gICAgICBpZiAoaSBpbnN0YW5jZW9mIGEuVmtleXdpdG5lc3Nlcykge1xuICAgICAgICBjb25zdCBuID0gVyhlKSwgbyA9IG4ud2l0bmVzc19zZXQoKTtcbiAgICAgICAgby5zZXRfdmtleXMoaSk7XG4gICAgICAgIGNvbnN0IEEgPSBhLlRyYW5zYWN0aW9uLm5ldyhuLmJvZHkoKSwgbywgbi5hdXhpbGlhcnlfZGF0YSgpKS50b19oZXgoKTtcbiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKFwic2lnbmVkVHhcIiwgQSksIEE7XG4gICAgICB9XG4gICAgfSBlbHNlXG4gICAgICByZXR1cm47XG4gIH1cbn1cbmV4cG9ydCB7XG4gIGZyIGFzIEFwcFdhbGxldCxcbiAgSXIgYXMgQmxvY2tmcm9zdFByb3ZpZGVyLFxuICBOdCBhcyBCcm93c2VyV2FsbGV0LFxuICB5IGFzIEVtYmVkZGVkV2FsbGV0LFxuICBsciBhcyBGb3JnZVNjcmlwdCxcbiAgaHIgYXMgSW5mdXJhUHJvdmlkZXIsXG4gIHVyIGFzIEtvaW9zUHJvdmlkZXIsXG4gIF9yIGFzIE1pbmFXYWxsZXQsXG4gIGRyIGFzIFRhbmdvUHJvdmlkZXIsXG4gIFIgYXMgVHJhbnNhY3Rpb24sXG4gIFhzIGFzIGNoZWNrU2lnbmF0dXJlLFxuICBjciBhcyBnZW5lcmF0ZU5vbmNlLFxuICBaZSBhcyBsYXJnZXN0Rmlyc3QsXG4gIHRzIGFzIGxhcmdlc3RGaXJzdE11bHRpQXNzZXQsXG4gIFpzIGFzIHJlc29sdmVEYXRhSGFzaCxcbiAgdHIgYXMgcmVzb2x2ZUVwb2NoTm8sXG4gIFlzIGFzIHJlc29sdmVGaW5nZXJwcmludCxcbiAgZXIgYXMgcmVzb2x2ZUxhbmd1YWdlVmlldyxcbiAgc3IgYXMgcmVzb2x2ZU5hdGl2ZVNjcmlwdEhhc2gsXG4gIGV0IGFzIHJlc29sdmVQYXltZW50S2V5SGFzaCxcbiAgcnIgYXMgcmVzb2x2ZVBsdXR1c1NjcmlwdEFkZHJlc3MsXG4gIGlyIGFzIHJlc29sdmVQbHV0dXNTY3JpcHRIYXNoLFxuICBhciBhcyByZXNvbHZlUG9vbElkLFxuICBuciBhcyByZXNvbHZlUHJpdmF0ZUtleSxcbiAgT3QgYXMgcmVzb2x2ZVJld2FyZEFkZHJlc3MsXG4gIG9yIGFzIHJlc29sdmVTY3JpcHRSZWYsXG4gIEFyIGFzIHJlc29sdmVTbG90Tm8sXG4gIEl0IGFzIHJlc29sdmVTdGFrZUtleUhhc2gsXG4gIFllIGFzIHJlc29sdmVUeEZlZXMsXG4gIEdzIGFzIHJlc29sdmVUeEhhc2hcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@meshsdk/core/dist/core.js\n"));

/***/ }),

/***/ "./node_modules/@meshsdk/react/dist/react.js":
/*!***************************************************!*\
  !*** ./node_modules/@meshsdk/react/dist/react.js ***!
  \***************************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

"use strict";
eval(__webpack_require__.ts("__webpack_require__.a(__webpack_module__, async function (__webpack_handle_async_dependencies__, __webpack_async_result__) { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"CardanoWallet\": function() { return /* binding */ eo; },\n/* harmony export */   \"MeshBadge\": function() { return /* binding */ to; },\n/* harmony export */   \"MeshProvider\": function() { return /* binding */ Xn; },\n/* harmony export */   \"StakeButton\": function() { return /* binding */ ro; },\n/* harmony export */   \"WalletContext\": function() { return /* binding */ Te; },\n/* harmony export */   \"useAddress\": function() { return /* binding */ Kn; },\n/* harmony export */   \"useAssets\": function() { return /* binding */ Zn; },\n/* harmony export */   \"useLovelace\": function() { return /* binding */ kn; },\n/* harmony export */   \"useNetwork\": function() { return /* binding */ Jn; },\n/* harmony export */   \"useRewardAddress\": function() { return /* binding */ An; },\n/* harmony export */   \"useWallet\": function() { return /* binding */ St; },\n/* harmony export */   \"useWalletList\": function() { return /* binding */ bt; },\n/* harmony export */   \"useWalletSubmit\": function() { return /* binding */ Qn; },\n/* harmony export */   \"useWalletTx\": function() { return /* binding */ Tn; }\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var _meshsdk_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @meshsdk/core */ \"./node_modules/@meshsdk/core/dist/core.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"./node_modules/next/dist/build/polyfills/process.js\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_meshsdk_core__WEBPACK_IMPORTED_MODULE_1__]);\n_meshsdk_core__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nvar qe = { exports: {} }, B = {};\n/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar It;\nfunction xr() {\n  if (It)\n    return B;\n  It = 1;\n  var e = typeof Symbol == \"function\" && Symbol.for, n = e ? Symbol.for(\"react.element\") : 60103, t = e ? Symbol.for(\"react.portal\") : 60106, o = e ? Symbol.for(\"react.fragment\") : 60107, a = e ? Symbol.for(\"react.strict_mode\") : 60108, c = e ? Symbol.for(\"react.profiler\") : 60114, s = e ? Symbol.for(\"react.provider\") : 60109, f = e ? Symbol.for(\"react.context\") : 60110, h = e ? Symbol.for(\"react.async_mode\") : 60111, v = e ? Symbol.for(\"react.concurrent_mode\") : 60111, g = e ? Symbol.for(\"react.forward_ref\") : 60112, C = e ? Symbol.for(\"react.suspense\") : 60113, D = e ? Symbol.for(\"react.suspense_list\") : 60120, F = e ? Symbol.for(\"react.memo\") : 60115, E = e ? Symbol.for(\"react.lazy\") : 60116, O = e ? Symbol.for(\"react.block\") : 60121, x = e ? Symbol.for(\"react.fundamental\") : 60117, I = e ? Symbol.for(\"react.responder\") : 60118, y = e ? Symbol.for(\"react.scope\") : 60119;\n  function T(d) {\n    if (typeof d == \"object\" && d !== null) {\n      var ae = d.$$typeof;\n      switch (ae) {\n        case n:\n          switch (d = d.type, d) {\n            case h:\n            case v:\n            case o:\n            case c:\n            case a:\n            case C:\n              return d;\n            default:\n              switch (d = d && d.$$typeof, d) {\n                case f:\n                case g:\n                case E:\n                case F:\n                case s:\n                  return d;\n                default:\n                  return ae;\n              }\n          }\n        case t:\n          return ae;\n      }\n    }\n  }\n  function _(d) {\n    return T(d) === v;\n  }\n  return B.AsyncMode = h, B.ConcurrentMode = v, B.ContextConsumer = f, B.ContextProvider = s, B.Element = n, B.ForwardRef = g, B.Fragment = o, B.Lazy = E, B.Memo = F, B.Portal = t, B.Profiler = c, B.StrictMode = a, B.Suspense = C, B.isAsyncMode = function(d) {\n    return _(d) || T(d) === h;\n  }, B.isConcurrentMode = _, B.isContextConsumer = function(d) {\n    return T(d) === f;\n  }, B.isContextProvider = function(d) {\n    return T(d) === s;\n  }, B.isElement = function(d) {\n    return typeof d == \"object\" && d !== null && d.$$typeof === n;\n  }, B.isForwardRef = function(d) {\n    return T(d) === g;\n  }, B.isFragment = function(d) {\n    return T(d) === o;\n  }, B.isLazy = function(d) {\n    return T(d) === E;\n  }, B.isMemo = function(d) {\n    return T(d) === F;\n  }, B.isPortal = function(d) {\n    return T(d) === t;\n  }, B.isProfiler = function(d) {\n    return T(d) === c;\n  }, B.isStrictMode = function(d) {\n    return T(d) === a;\n  }, B.isSuspense = function(d) {\n    return T(d) === C;\n  }, B.isValidElementType = function(d) {\n    return typeof d == \"string\" || typeof d == \"function\" || d === o || d === v || d === c || d === a || d === C || d === D || typeof d == \"object\" && d !== null && (d.$$typeof === E || d.$$typeof === F || d.$$typeof === s || d.$$typeof === f || d.$$typeof === g || d.$$typeof === x || d.$$typeof === I || d.$$typeof === y || d.$$typeof === O);\n  }, B.typeOf = T, B;\n}\nvar V = {};\n/** @license React v16.13.1\n * react-is.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Nt;\nfunction Rr() {\n  return Nt || (Nt = 1,  true && function() {\n    var e = typeof Symbol == \"function\" && Symbol.for, n = e ? Symbol.for(\"react.element\") : 60103, t = e ? Symbol.for(\"react.portal\") : 60106, o = e ? Symbol.for(\"react.fragment\") : 60107, a = e ? Symbol.for(\"react.strict_mode\") : 60108, c = e ? Symbol.for(\"react.profiler\") : 60114, s = e ? Symbol.for(\"react.provider\") : 60109, f = e ? Symbol.for(\"react.context\") : 60110, h = e ? Symbol.for(\"react.async_mode\") : 60111, v = e ? Symbol.for(\"react.concurrent_mode\") : 60111, g = e ? Symbol.for(\"react.forward_ref\") : 60112, C = e ? Symbol.for(\"react.suspense\") : 60113, D = e ? Symbol.for(\"react.suspense_list\") : 60120, F = e ? Symbol.for(\"react.memo\") : 60115, E = e ? Symbol.for(\"react.lazy\") : 60116, O = e ? Symbol.for(\"react.block\") : 60121, x = e ? Symbol.for(\"react.fundamental\") : 60117, I = e ? Symbol.for(\"react.responder\") : 60118, y = e ? Symbol.for(\"react.scope\") : 60119;\n    function T(l) {\n      return typeof l == \"string\" || typeof l == \"function\" || l === o || l === v || l === c || l === a || l === C || l === D || typeof l == \"object\" && l !== null && (l.$$typeof === E || l.$$typeof === F || l.$$typeof === s || l.$$typeof === f || l.$$typeof === g || l.$$typeof === x || l.$$typeof === I || l.$$typeof === y || l.$$typeof === O);\n    }\n    function _(l) {\n      if (typeof l == \"object\" && l !== null) {\n        var X = l.$$typeof;\n        switch (X) {\n          case n:\n            var Z = l.type;\n            switch (Z) {\n              case h:\n              case v:\n              case o:\n              case c:\n              case a:\n              case C:\n                return Z;\n              default:\n                var P = Z && Z.$$typeof;\n                switch (P) {\n                  case f:\n                  case g:\n                  case E:\n                  case F:\n                  case s:\n                    return P;\n                  default:\n                    return X;\n                }\n            }\n          case t:\n            return X;\n        }\n      }\n    }\n    var d = h, ae = v, he = f, ce = s, ue = n, me = g, we = o, ie = E, G = F, te = t, K = c, be = a, le = C, se = !1;\n    function Se(l) {\n      return se || (se = !0, console.warn(\"The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.\")), ve(l) || _(l) === h;\n    }\n    function ve(l) {\n      return _(l) === v;\n    }\n    function Ce(l) {\n      return _(l) === f;\n    }\n    function S(l) {\n      return _(l) === s;\n    }\n    function w(l) {\n      return typeof l == \"object\" && l !== null && l.$$typeof === n;\n    }\n    function b(l) {\n      return _(l) === g;\n    }\n    function A(l) {\n      return _(l) === o;\n    }\n    function i(l) {\n      return _(l) === E;\n    }\n    function j(l) {\n      return _(l) === F;\n    }\n    function p(l) {\n      return _(l) === t;\n    }\n    function U(l) {\n      return _(l) === c;\n    }\n    function M(l) {\n      return _(l) === a;\n    }\n    function $(l) {\n      return _(l) === C;\n    }\n    V.AsyncMode = d, V.ConcurrentMode = ae, V.ContextConsumer = he, V.ContextProvider = ce, V.Element = ue, V.ForwardRef = me, V.Fragment = we, V.Lazy = ie, V.Memo = G, V.Portal = te, V.Profiler = K, V.StrictMode = be, V.Suspense = le, V.isAsyncMode = Se, V.isConcurrentMode = ve, V.isContextConsumer = Ce, V.isContextProvider = S, V.isElement = w, V.isForwardRef = b, V.isFragment = A, V.isLazy = i, V.isMemo = j, V.isPortal = p, V.isProfiler = U, V.isStrictMode = M, V.isSuspense = $, V.isValidElementType = T, V.typeOf = _;\n  }()), V;\n}\n(function(e) {\n   false ? 0 : e.exports = Rr();\n})(qe);\nfunction kr(e) {\n  function n(S, w, b, A, i) {\n    for (var j = 0, p = 0, U = 0, M = 0, $, l, X = 0, Z = 0, P, J = P = $ = 0, z = 0, re = 0, Ee = 0, oe = 0, je = b.length, xe = je - 1, pe, R = \"\", q = \"\", We = \"\", Re = \"\", _e; z < je; ) {\n      if (l = b.charCodeAt(z), z === xe && p + M + U + j !== 0 && (p !== 0 && (l = p === 47 ? 10 : 47), M = U = j = 0, je++, xe++), p + M + U + j === 0) {\n        if (z === xe && (0 < re && (R = R.replace(D, \"\")), 0 < R.trim().length)) {\n          switch (l) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n            default:\n              R += b.charAt(z);\n          }\n          l = 59;\n        }\n        switch (l) {\n          case 123:\n            for (R = R.trim(), $ = R.charCodeAt(0), P = 1, oe = ++z; z < je; ) {\n              switch (l = b.charCodeAt(z)) {\n                case 123:\n                  P++;\n                  break;\n                case 125:\n                  P--;\n                  break;\n                case 47:\n                  switch (l = b.charCodeAt(z + 1)) {\n                    case 42:\n                    case 47:\n                      e: {\n                        for (J = z + 1; J < xe; ++J)\n                          switch (b.charCodeAt(J)) {\n                            case 47:\n                              if (l === 42 && b.charCodeAt(J - 1) === 42 && z + 2 !== J) {\n                                z = J + 1;\n                                break e;\n                              }\n                              break;\n                            case 10:\n                              if (l === 47) {\n                                z = J + 1;\n                                break e;\n                              }\n                          }\n                        z = J;\n                      }\n                  }\n                  break;\n                case 91:\n                  l++;\n                case 40:\n                  l++;\n                case 34:\n                case 39:\n                  for (; z++ < xe && b.charCodeAt(z) !== l; )\n                    ;\n              }\n              if (P === 0)\n                break;\n              z++;\n            }\n            switch (P = b.substring(oe, z), $ === 0 && ($ = (R = R.replace(C, \"\").trim()).charCodeAt(0)), $) {\n              case 64:\n                switch (0 < re && (R = R.replace(D, \"\")), l = R.charCodeAt(1), l) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    re = w;\n                    break;\n                  default:\n                    re = be;\n                }\n                if (P = n(w, re, P, l, i + 1), oe = P.length, 0 < se && (re = t(be, R, Ee), _e = f(3, P, re, w, G, ie, oe, l, i, A), R = re.join(\"\"), _e !== void 0 && (oe = (P = _e.trim()).length) === 0 && (l = 0, P = \"\")), 0 < oe)\n                  switch (l) {\n                    case 115:\n                      R = R.replace(ae, s);\n                    case 100:\n                    case 109:\n                    case 45:\n                      P = R + \"{\" + P + \"}\";\n                      break;\n                    case 107:\n                      R = R.replace(y, \"$1 $2\"), P = R + \"{\" + P + \"}\", P = K === 1 || K === 2 && c(\"@\" + P, 3) ? \"@-webkit-\" + P + \"@\" + P : \"@\" + P;\n                      break;\n                    default:\n                      P = R + P, A === 112 && (P = (q += P, \"\"));\n                  }\n                else\n                  P = \"\";\n                break;\n              default:\n                P = n(w, t(w, R, Ee), P, A, i + 1);\n            }\n            We += P, P = Ee = re = J = $ = 0, R = \"\", l = b.charCodeAt(++z);\n            break;\n          case 125:\n          case 59:\n            if (R = (0 < re ? R.replace(D, \"\") : R).trim(), 1 < (oe = R.length))\n              switch (J === 0 && ($ = R.charCodeAt(0), $ === 45 || 96 < $ && 123 > $) && (oe = (R = R.replace(\" \", \":\")).length), 0 < se && (_e = f(1, R, w, S, G, ie, q.length, A, i, A)) !== void 0 && (oe = (R = _e.trim()).length) === 0 && (R = \"\\0\\0\"), $ = R.charCodeAt(0), l = R.charCodeAt(1), $) {\n                case 0:\n                  break;\n                case 64:\n                  if (l === 105 || l === 99) {\n                    Re += R + b.charAt(z);\n                    break;\n                  }\n                default:\n                  R.charCodeAt(oe - 1) !== 58 && (q += a(R, $, l, R.charCodeAt(2)));\n              }\n            Ee = re = J = $ = 0, R = \"\", l = b.charCodeAt(++z);\n        }\n      }\n      switch (l) {\n        case 13:\n        case 10:\n          p === 47 ? p = 0 : 1 + $ === 0 && A !== 107 && 0 < R.length && (re = 1, R += \"\\0\"), 0 < se * ve && f(0, R, w, S, G, ie, q.length, A, i, A), ie = 1, G++;\n          break;\n        case 59:\n        case 125:\n          if (p + M + U + j === 0) {\n            ie++;\n            break;\n          }\n        default:\n          switch (ie++, pe = b.charAt(z), l) {\n            case 9:\n            case 32:\n              if (M + j + p === 0)\n                switch (X) {\n                  case 44:\n                  case 58:\n                  case 9:\n                  case 32:\n                    pe = \"\";\n                    break;\n                  default:\n                    l !== 32 && (pe = \" \");\n                }\n              break;\n            case 0:\n              pe = \"\\\\0\";\n              break;\n            case 12:\n              pe = \"\\\\f\";\n              break;\n            case 11:\n              pe = \"\\\\v\";\n              break;\n            case 38:\n              M + p + j === 0 && (re = Ee = 1, pe = \"\\f\" + pe);\n              break;\n            case 108:\n              if (M + p + j + te === 0 && 0 < J)\n                switch (z - J) {\n                  case 2:\n                    X === 112 && b.charCodeAt(z - 3) === 58 && (te = X);\n                  case 8:\n                    Z === 111 && (te = Z);\n                }\n              break;\n            case 58:\n              M + p + j === 0 && (J = z);\n              break;\n            case 44:\n              p + U + M + j === 0 && (re = 1, pe += \"\\r\");\n              break;\n            case 34:\n            case 39:\n              p === 0 && (M = M === l ? 0 : M === 0 ? l : M);\n              break;\n            case 91:\n              M + p + U === 0 && j++;\n              break;\n            case 93:\n              M + p + U === 0 && j--;\n              break;\n            case 41:\n              M + p + j === 0 && U--;\n              break;\n            case 40:\n              if (M + p + j === 0) {\n                if ($ === 0)\n                  switch (2 * X + 3 * Z) {\n                    case 533:\n                      break;\n                    default:\n                      $ = 1;\n                  }\n                U++;\n              }\n              break;\n            case 64:\n              p + U + M + j + J + P === 0 && (P = 1);\n              break;\n            case 42:\n            case 47:\n              if (!(0 < M + j + U))\n                switch (p) {\n                  case 0:\n                    switch (2 * l + 3 * b.charCodeAt(z + 1)) {\n                      case 235:\n                        p = 47;\n                        break;\n                      case 220:\n                        oe = z, p = 42;\n                    }\n                    break;\n                  case 42:\n                    l === 47 && X === 42 && oe + 2 !== z && (b.charCodeAt(oe + 2) === 33 && (q += b.substring(oe, z + 1)), pe = \"\", p = 0);\n                }\n          }\n          p === 0 && (R += pe);\n      }\n      Z = X, X = l, z++;\n    }\n    if (oe = q.length, 0 < oe) {\n      if (re = w, 0 < se && (_e = f(2, q, re, S, G, ie, oe, A, i, A), _e !== void 0 && (q = _e).length === 0))\n        return Re + q + We;\n      if (q = re.join(\",\") + \"{\" + q + \"}\", K * te !== 0) {\n        switch (K !== 2 || c(q, 2) || (te = 0), te) {\n          case 111:\n            q = q.replace(_, \":-moz-$1\") + q;\n            break;\n          case 112:\n            q = q.replace(T, \"::-webkit-input-$1\") + q.replace(T, \"::-moz-$1\") + q.replace(T, \":-ms-input-$1\") + q;\n        }\n        te = 0;\n      }\n    }\n    return Re + q + We;\n  }\n  function t(S, w, b) {\n    var A = w.trim().split(x);\n    w = A;\n    var i = A.length, j = S.length;\n    switch (j) {\n      case 0:\n      case 1:\n        var p = 0;\n        for (S = j === 0 ? \"\" : S[0] + \" \"; p < i; ++p)\n          w[p] = o(S, w[p], b).trim();\n        break;\n      default:\n        var U = p = 0;\n        for (w = []; p < i; ++p)\n          for (var M = 0; M < j; ++M)\n            w[U++] = o(S[M] + \" \", A[p], b).trim();\n    }\n    return w;\n  }\n  function o(S, w, b) {\n    var A = w.charCodeAt(0);\n    switch (33 > A && (A = (w = w.trim()).charCodeAt(0)), A) {\n      case 38:\n        return w.replace(I, \"$1\" + S.trim());\n      case 58:\n        return S.trim() + w.replace(I, \"$1\" + S.trim());\n      default:\n        if (0 < 1 * b && 0 < w.indexOf(\"\\f\"))\n          return w.replace(I, (S.charCodeAt(0) === 58 ? \"\" : \"$1\") + S.trim());\n    }\n    return S + w;\n  }\n  function a(S, w, b, A) {\n    var i = S + \";\", j = 2 * w + 3 * b + 4 * A;\n    if (j === 944) {\n      S = i.indexOf(\":\", 9) + 1;\n      var p = i.substring(S, i.length - 1).trim();\n      return p = i.substring(0, S).trim() + p + \";\", K === 1 || K === 2 && c(p, 1) ? \"-webkit-\" + p + p : p;\n    }\n    if (K === 0 || K === 2 && !c(i, 1))\n      return i;\n    switch (j) {\n      case 1015:\n        return i.charCodeAt(10) === 97 ? \"-webkit-\" + i + i : i;\n      case 951:\n        return i.charCodeAt(3) === 116 ? \"-webkit-\" + i + i : i;\n      case 963:\n        return i.charCodeAt(5) === 110 ? \"-webkit-\" + i + i : i;\n      case 1009:\n        if (i.charCodeAt(4) !== 100)\n          break;\n      case 969:\n      case 942:\n        return \"-webkit-\" + i + i;\n      case 978:\n        return \"-webkit-\" + i + \"-moz-\" + i + i;\n      case 1019:\n      case 983:\n        return \"-webkit-\" + i + \"-moz-\" + i + \"-ms-\" + i + i;\n      case 883:\n        if (i.charCodeAt(8) === 45)\n          return \"-webkit-\" + i + i;\n        if (0 < i.indexOf(\"image-set(\", 11))\n          return i.replace(we, \"$1-webkit-$2\") + i;\n        break;\n      case 932:\n        if (i.charCodeAt(4) === 45)\n          switch (i.charCodeAt(5)) {\n            case 103:\n              return \"-webkit-box-\" + i.replace(\"-grow\", \"\") + \"-webkit-\" + i + \"-ms-\" + i.replace(\"grow\", \"positive\") + i;\n            case 115:\n              return \"-webkit-\" + i + \"-ms-\" + i.replace(\"shrink\", \"negative\") + i;\n            case 98:\n              return \"-webkit-\" + i + \"-ms-\" + i.replace(\"basis\", \"preferred-size\") + i;\n          }\n        return \"-webkit-\" + i + \"-ms-\" + i + i;\n      case 964:\n        return \"-webkit-\" + i + \"-ms-flex-\" + i + i;\n      case 1023:\n        if (i.charCodeAt(8) !== 99)\n          break;\n        return p = i.substring(i.indexOf(\":\", 15)).replace(\"flex-\", \"\").replace(\"space-between\", \"justify\"), \"-webkit-box-pack\" + p + \"-webkit-\" + i + \"-ms-flex-pack\" + p + i;\n      case 1005:\n        return E.test(i) ? i.replace(F, \":-webkit-\") + i.replace(F, \":-moz-\") + i : i;\n      case 1e3:\n        switch (p = i.substring(13).trim(), w = p.indexOf(\"-\") + 1, p.charCodeAt(0) + p.charCodeAt(w)) {\n          case 226:\n            p = i.replace(d, \"tb\");\n            break;\n          case 232:\n            p = i.replace(d, \"tb-rl\");\n            break;\n          case 220:\n            p = i.replace(d, \"lr\");\n            break;\n          default:\n            return i;\n        }\n        return \"-webkit-\" + i + \"-ms-\" + p + i;\n      case 1017:\n        if (i.indexOf(\"sticky\", 9) === -1)\n          break;\n      case 975:\n        switch (w = (i = S).length - 10, p = (i.charCodeAt(w) === 33 ? i.substring(0, w) : i).substring(S.indexOf(\":\", 7) + 1).trim(), j = p.charCodeAt(0) + (p.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > p.charCodeAt(8))\n              break;\n          case 115:\n            i = i.replace(p, \"-webkit-\" + p) + \";\" + i;\n            break;\n          case 207:\n          case 102:\n            i = i.replace(p, \"-webkit-\" + (102 < j ? \"inline-\" : \"\") + \"box\") + \";\" + i.replace(p, \"-webkit-\" + p) + \";\" + i.replace(p, \"-ms-\" + p + \"box\") + \";\" + i;\n        }\n        return i + \";\";\n      case 938:\n        if (i.charCodeAt(5) === 45)\n          switch (i.charCodeAt(6)) {\n            case 105:\n              return p = i.replace(\"-items\", \"\"), \"-webkit-\" + i + \"-webkit-box-\" + p + \"-ms-flex-\" + p + i;\n            case 115:\n              return \"-webkit-\" + i + \"-ms-flex-item-\" + i.replace(ce, \"\") + i;\n            default:\n              return \"-webkit-\" + i + \"-ms-flex-line-pack\" + i.replace(\"align-content\", \"\").replace(ce, \"\") + i;\n          }\n        break;\n      case 973:\n      case 989:\n        if (i.charCodeAt(3) !== 45 || i.charCodeAt(4) === 122)\n          break;\n      case 931:\n      case 953:\n        if (me.test(S) === !0)\n          return (p = S.substring(S.indexOf(\":\") + 1)).charCodeAt(0) === 115 ? a(S.replace(\"stretch\", \"fill-available\"), w, b, A).replace(\":fill-available\", \":stretch\") : i.replace(p, \"-webkit-\" + p) + i.replace(p, \"-moz-\" + p.replace(\"fill-\", \"\")) + i;\n        break;\n      case 962:\n        if (i = \"-webkit-\" + i + (i.charCodeAt(5) === 102 ? \"-ms-\" + i : \"\") + i, b + A === 211 && i.charCodeAt(13) === 105 && 0 < i.indexOf(\"transform\", 10))\n          return i.substring(0, i.indexOf(\";\", 27) + 1).replace(O, \"$1-webkit-$2\") + i;\n    }\n    return i;\n  }\n  function c(S, w) {\n    var b = S.indexOf(w === 1 ? \":\" : \"{\"), A = S.substring(0, w !== 3 ? b : 10);\n    return b = S.substring(b + 1, S.length - 1), Se(w !== 2 ? A : A.replace(ue, \"$1\"), b, w);\n  }\n  function s(S, w) {\n    var b = a(w, w.charCodeAt(0), w.charCodeAt(1), w.charCodeAt(2));\n    return b !== w + \";\" ? b.replace(he, \" or ($1)\").substring(4) : \"(\" + w + \")\";\n  }\n  function f(S, w, b, A, i, j, p, U, M, $) {\n    for (var l = 0, X = w, Z; l < se; ++l)\n      switch (Z = le[l].call(g, S, X, b, A, i, j, p, U, M, $)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n        default:\n          X = Z;\n      }\n    if (X !== w)\n      return X;\n  }\n  function h(S) {\n    switch (S) {\n      case void 0:\n      case null:\n        se = le.length = 0;\n        break;\n      default:\n        if (typeof S == \"function\")\n          le[se++] = S;\n        else if (typeof S == \"object\")\n          for (var w = 0, b = S.length; w < b; ++w)\n            h(S[w]);\n        else\n          ve = !!S | 0;\n    }\n    return h;\n  }\n  function v(S) {\n    return S = S.prefix, S !== void 0 && (Se = null, S ? typeof S != \"function\" ? K = 1 : (K = 2, Se = S) : K = 0), v;\n  }\n  function g(S, w) {\n    var b = S;\n    if (33 > b.charCodeAt(0) && (b = b.trim()), Ce = b, b = [Ce], 0 < se) {\n      var A = f(-1, w, b, b, G, ie, 0, 0, 0, 0);\n      A !== void 0 && typeof A == \"string\" && (w = A);\n    }\n    var i = n(be, b, w, 0, 0);\n    return 0 < se && (A = f(-2, i, b, b, G, ie, i.length, 0, 0, 0), A !== void 0 && (i = A)), Ce = \"\", te = 0, ie = G = 1, i;\n  }\n  var C = /^\\0+/g, D = /[\\0\\r\\f]/g, F = /: */g, E = /zoo|gra/, O = /([,: ])(transform)/g, x = /,\\r+?/g, I = /([\\t\\r\\n ])*\\f?&/g, y = /@(k\\w+)\\s*(\\S*)\\s*/, T = /::(place)/g, _ = /:(read-only)/g, d = /[svh]\\w+-[tblr]{2}/, ae = /\\(\\s*(.*)\\s*\\)/g, he = /([\\s\\S]*?);/g, ce = /-self|flex-/g, ue = /[^]*?(:[rp][el]a[\\w-]+)[^]*/, me = /stretch|:\\s*\\w+\\-(?:conte|avail)/, we = /([^-])(image-set\\()/, ie = 1, G = 1, te = 0, K = 1, be = [], le = [], se = 0, Se = null, ve = 0, Ce = \"\";\n  return g.use = h, g.set = v, e !== void 0 && v(e), g;\n}\nvar Ar = {\n  animationIterationCount: 1,\n  borderImageOutset: 1,\n  borderImageSlice: 1,\n  borderImageWidth: 1,\n  boxFlex: 1,\n  boxFlexGroup: 1,\n  boxOrdinalGroup: 1,\n  columnCount: 1,\n  columns: 1,\n  flex: 1,\n  flexGrow: 1,\n  flexPositive: 1,\n  flexShrink: 1,\n  flexNegative: 1,\n  flexOrder: 1,\n  gridRow: 1,\n  gridRowEnd: 1,\n  gridRowSpan: 1,\n  gridRowStart: 1,\n  gridColumn: 1,\n  gridColumnEnd: 1,\n  gridColumnSpan: 1,\n  gridColumnStart: 1,\n  msGridRow: 1,\n  msGridRowSpan: 1,\n  msGridColumn: 1,\n  msGridColumnSpan: 1,\n  fontWeight: 1,\n  lineHeight: 1,\n  opacity: 1,\n  order: 1,\n  orphans: 1,\n  tabSize: 1,\n  widows: 1,\n  zIndex: 1,\n  zoom: 1,\n  WebkitLineClamp: 1,\n  fillOpacity: 1,\n  floodOpacity: 1,\n  stopOpacity: 1,\n  strokeDasharray: 1,\n  strokeDashoffset: 1,\n  strokeMiterlimit: 1,\n  strokeOpacity: 1,\n  strokeWidth: 1\n};\nfunction Tr(e) {\n  var n = /* @__PURE__ */ Object.create(null);\n  return function(t) {\n    return n[t] === void 0 && (n[t] = e(t)), n[t];\n  };\n}\nvar Pr = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/, Dt = /* @__PURE__ */ Tr(\n  function(e) {\n    return Pr.test(e) || e.charCodeAt(0) === 111 && e.charCodeAt(1) === 110 && e.charCodeAt(2) < 91;\n  }\n), vt = qe.exports, Or = {\n  childContextTypes: !0,\n  contextType: !0,\n  contextTypes: !0,\n  defaultProps: !0,\n  displayName: !0,\n  getDefaultProps: !0,\n  getDerivedStateFromError: !0,\n  getDerivedStateFromProps: !0,\n  mixins: !0,\n  propTypes: !0,\n  type: !0\n}, Ir = {\n  name: !0,\n  length: !0,\n  prototype: !0,\n  caller: !0,\n  callee: !0,\n  arguments: !0,\n  arity: !0\n}, Nr = {\n  $$typeof: !0,\n  render: !0,\n  defaultProps: !0,\n  displayName: !0,\n  propTypes: !0\n}, Xt = {\n  $$typeof: !0,\n  compare: !0,\n  defaultProps: !0,\n  displayName: !0,\n  propTypes: !0,\n  type: !0\n}, gt = {};\ngt[vt.ForwardRef] = Nr;\ngt[vt.Memo] = Xt;\nfunction Mt(e) {\n  return vt.isMemo(e) ? Xt : gt[e.$$typeof] || Or;\n}\nvar Dr = Object.defineProperty, Mr = Object.getOwnPropertyNames, jt = Object.getOwnPropertySymbols, jr = Object.getOwnPropertyDescriptor, Wr = Object.getPrototypeOf, Wt = Object.prototype;\nfunction Kt(e, n, t) {\n  if (typeof n != \"string\") {\n    if (Wt) {\n      var o = Wr(n);\n      o && o !== Wt && Kt(e, o, t);\n    }\n    var a = Mr(n);\n    jt && (a = a.concat(jt(n)));\n    for (var c = Mt(e), s = Mt(n), f = 0; f < a.length; ++f) {\n      var h = a[f];\n      if (!Ir[h] && !(t && t[h]) && !(s && s[h]) && !(c && c[h])) {\n        var v = jr(n, h);\n        try {\n          Dr(e, h, v);\n        } catch {\n        }\n      }\n    }\n  }\n  return e;\n}\nvar $r = Kt;\nfunction Ae() {\n  return (Ae = Object.assign || function(e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var t = arguments[n];\n      for (var o in t)\n        Object.prototype.hasOwnProperty.call(t, o) && (e[o] = t[o]);\n    }\n    return e;\n  }).apply(this, arguments);\n}\nvar $t = function(e, n) {\n  for (var t = [e[0]], o = 0, a = n.length; o < a; o += 1)\n    t.push(n[o], e[o + 1]);\n  return t;\n}, lt = function(e) {\n  return e !== null && typeof e == \"object\" && (e.toString ? e.toString() : Object.prototype.toString.call(e)) === \"[object Object]\" && !qe.exports.typeOf(e);\n}, Qe = Object.freeze([]), Pe = Object.freeze({});\nfunction Ge(e) {\n  return typeof e == \"function\";\n}\nfunction ut(e) {\n  return  true && typeof e == \"string\" && e || e.displayName || e.name || \"Component\";\n}\nfunction yt(e) {\n  return e && typeof e.styledComponentId == \"string\";\n}\nvar Fe = typeof process < \"u\" && (process.env.REACT_APP_SC_ATTR || process.env.SC_ATTR) || \"data-styled\", wt = typeof window < \"u\" && \"HTMLElement\" in window, Lr = Boolean(typeof SC_DISABLE_SPEEDY == \"boolean\" ? SC_DISABLE_SPEEDY : typeof process < \"u\" && process.env.REACT_APP_SC_DISABLE_SPEEDY !== void 0 && process.env.REACT_APP_SC_DISABLE_SPEEDY !== \"\" ? process.env.REACT_APP_SC_DISABLE_SPEEDY !== \"false\" && process.env.REACT_APP_SC_DISABLE_SPEEDY : typeof process < \"u\" && process.env.SC_DISABLE_SPEEDY !== void 0 && process.env.SC_DISABLE_SPEEDY !== \"\" ? process.env.SC_DISABLE_SPEEDY !== \"false\" && process.env.SC_DISABLE_SPEEDY : \"development\" !== \"production\"), Fr =  true ? { 1: `Cannot create styled-component for component: %s.\n\n`, 2: `Can't collect styles once you've consumed a \\`ServerStyleSheet\\`'s styles! \\`ServerStyleSheet\\` is a one off instance for each server-side render cycle.\n\n- Are you trying to reuse it across renders?\n- Are you accidentally calling collectStyles twice?\n\n`, 3: `Streaming SSR is only supported in a Node.js environment; Please do not try to call this method in the browser.\n\n`, 4: `The \\`StyleSheetManager\\` expects a valid target or sheet prop!\n\n- Does this error occur on the client and is your target falsy?\n- Does this error occur on the server and is the sheet falsy?\n\n`, 5: `The clone method cannot be used on the client!\n\n- Are you running in a client-like environment on the server?\n- Are you trying to run SSR on the client?\n\n`, 6: `Trying to insert a new style tag, but the given Node is unmounted!\n\n- Are you using a custom target that isn't mounted?\n- Does your document not have a valid head element?\n- Have you accidentally removed a style tag manually?\n\n`, 7: 'ThemeProvider: Please return an object from your \"theme\" prop function, e.g.\\n\\n```js\\ntheme={() => ({})}\\n```\\n\\n', 8: `ThemeProvider: Please make your \"theme\" prop an object.\n\n`, 9: \"Missing document `<head>`\\n\\n\", 10: `Cannot find a StyleSheet instance. Usually this happens if there are multiple copies of styled-components loaded at once. Check out this issue for how to troubleshoot and fix the common cases where this situation can happen: https://github.com/styled-components/styled-components/issues/1941#issuecomment-417862021\n\n`, 11: `_This error was replaced with a dev-time warning, it will be deleted for v4 final._ [createGlobalStyle] received children which will not be rendered. Please use the component without passing children elements.\n\n`, 12: \"It seems you are interpolating a keyframe declaration (%s) into an untagged string. This was supported in styled-components v3, but is not longer supported in v4 as keyframes are now injected on-demand. Please wrap your string in the css\\\\`\\\\` helper which ensures the styles are injected correctly. See https://www.styled-components.com/docs/api#css\\n\\n\", 13: `%s is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\n\n`, 14: `ThemeProvider: \"theme\" prop is required.\n\n`, 15: \"A stylis plugin has been supplied that is not named. We need a name for each plugin to be able to prevent styling collisions between different stylis configurations within the same app. Before you pass your plugin to `<StyleSheetManager stylisPlugins={[]}>`, please make sure each plugin is uniquely-named, e.g.\\n\\n```js\\nObject.defineProperty(importedPlugin, 'name', { value: 'some-unique-name' });\\n```\\n\\n\", 16: `Reached the limit of how many styled components may be created at group %s.\nYou may only create up to 1,073,741,824 components. If you're creating components dynamically,\nas for instance in your render method then you may be running into this limitation.\n\n`, 17: `CSSStyleSheet could not be found on HTMLStyleElement.\nHas styled-components' style tag been unmounted or altered by another script?\n` } : 0;\nfunction zr() {\n  for (var e = arguments.length <= 0 ? void 0 : arguments[0], n = [], t = 1, o = arguments.length; t < o; t += 1)\n    n.push(t < 0 || arguments.length <= t ? void 0 : arguments[t]);\n  return n.forEach(function(a) {\n    e = e.replace(/%[a-z]/, a);\n  }), e;\n}\nfunction Be(e) {\n  for (var n = arguments.length, t = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++)\n    t[o - 1] = arguments[o];\n  throw  false ? 0 : new Error(zr.apply(void 0, [Fr[e]].concat(t)).trim());\n}\nvar Yr = function() {\n  function e(t) {\n    this.groupSizes = new Uint32Array(512), this.length = 512, this.tag = t;\n  }\n  var n = e.prototype;\n  return n.indexOfGroup = function(t) {\n    for (var o = 0, a = 0; a < t; a++)\n      o += this.groupSizes[a];\n    return o;\n  }, n.insertRules = function(t, o) {\n    if (t >= this.groupSizes.length) {\n      for (var a = this.groupSizes, c = a.length, s = c; t >= s; )\n        (s <<= 1) < 0 && Be(16, \"\" + t);\n      this.groupSizes = new Uint32Array(s), this.groupSizes.set(a), this.length = s;\n      for (var f = c; f < s; f++)\n        this.groupSizes[f] = 0;\n    }\n    for (var h = this.indexOfGroup(t + 1), v = 0, g = o.length; v < g; v++)\n      this.tag.insertRule(h, o[v]) && (this.groupSizes[t]++, h++);\n  }, n.clearGroup = function(t) {\n    if (t < this.length) {\n      var o = this.groupSizes[t], a = this.indexOfGroup(t), c = a + o;\n      this.groupSizes[t] = 0;\n      for (var s = a; s < c; s++)\n        this.tag.deleteRule(a);\n    }\n  }, n.getGroup = function(t) {\n    var o = \"\";\n    if (t >= this.length || this.groupSizes[t] === 0)\n      return o;\n    for (var a = this.groupSizes[t], c = this.indexOfGroup(t), s = c + a, f = c; f < s; f++)\n      o += this.tag.getRule(f) + `/*!sc*/\n`;\n    return o;\n  }, e;\n}(), Je = /* @__PURE__ */ new Map(), et = /* @__PURE__ */ new Map(), He = 1, Xe = function(e) {\n  if (Je.has(e))\n    return Je.get(e);\n  for (; et.has(He); )\n    He++;\n  var n = He++;\n  return  true && ((0 | n) < 0 || n > 1 << 30) && Be(16, \"\" + n), Je.set(e, n), et.set(n, e), n;\n}, Br = function(e) {\n  return et.get(e);\n}, Vr = function(e, n) {\n  n >= He && (He = n + 1), Je.set(e, n), et.set(n, e);\n}, Ur = \"style[\" + Fe + '][data-styled-version=\"5.3.6\"]', Hr = new RegExp(\"^\" + Fe + '\\\\.g(\\\\d+)\\\\[id=\"([\\\\w\\\\d-]+)\"\\\\].*?\"([^\"]*)'), Gr = function(e, n, t) {\n  for (var o, a = t.split(\",\"), c = 0, s = a.length; c < s; c++)\n    (o = a[c]) && e.registerName(n, o);\n}, qr = function(e, n) {\n  for (var t = (n.textContent || \"\").split(`/*!sc*/\n`), o = [], a = 0, c = t.length; a < c; a++) {\n    var s = t[a].trim();\n    if (s) {\n      var f = s.match(Hr);\n      if (f) {\n        var h = 0 | parseInt(f[1], 10), v = f[2];\n        h !== 0 && (Vr(v, h), Gr(e, v, f[3]), e.getTag().insertRules(h, o)), o.length = 0;\n      } else\n        o.push(s);\n    }\n  }\n}, Xr = function() {\n  return  true ? __webpack_require__.nc : 0;\n}, Zt = function(e) {\n  var n = document.head, t = e || n, o = document.createElement(\"style\"), a = function(f) {\n    for (var h = f.childNodes, v = h.length; v >= 0; v--) {\n      var g = h[v];\n      if (g && g.nodeType === 1 && g.hasAttribute(Fe))\n        return g;\n    }\n  }(t), c = a !== void 0 ? a.nextSibling : null;\n  o.setAttribute(Fe, \"active\"), o.setAttribute(\"data-styled-version\", \"5.3.6\");\n  var s = Xr();\n  return s && o.setAttribute(\"nonce\", s), t.insertBefore(o, c), o;\n}, Kr = function() {\n  function e(t) {\n    var o = this.element = Zt(t);\n    o.appendChild(document.createTextNode(\"\")), this.sheet = function(a) {\n      if (a.sheet)\n        return a.sheet;\n      for (var c = document.styleSheets, s = 0, f = c.length; s < f; s++) {\n        var h = c[s];\n        if (h.ownerNode === a)\n          return h;\n      }\n      Be(17);\n    }(o), this.length = 0;\n  }\n  var n = e.prototype;\n  return n.insertRule = function(t, o) {\n    try {\n      return this.sheet.insertRule(o, t), this.length++, !0;\n    } catch {\n      return !1;\n    }\n  }, n.deleteRule = function(t) {\n    this.sheet.deleteRule(t), this.length--;\n  }, n.getRule = function(t) {\n    var o = this.sheet.cssRules[t];\n    return o !== void 0 && typeof o.cssText == \"string\" ? o.cssText : \"\";\n  }, e;\n}(), Zr = function() {\n  function e(t) {\n    var o = this.element = Zt(t);\n    this.nodes = o.childNodes, this.length = 0;\n  }\n  var n = e.prototype;\n  return n.insertRule = function(t, o) {\n    if (t <= this.length && t >= 0) {\n      var a = document.createTextNode(o), c = this.nodes[t];\n      return this.element.insertBefore(a, c || null), this.length++, !0;\n    }\n    return !1;\n  }, n.deleteRule = function(t) {\n    this.element.removeChild(this.nodes[t]), this.length--;\n  }, n.getRule = function(t) {\n    return t < this.length ? this.nodes[t].textContent : \"\";\n  }, e;\n}(), Jr = function() {\n  function e(t) {\n    this.rules = [], this.length = 0;\n  }\n  var n = e.prototype;\n  return n.insertRule = function(t, o) {\n    return t <= this.length && (this.rules.splice(t, 0, o), this.length++, !0);\n  }, n.deleteRule = function(t) {\n    this.rules.splice(t, 1), this.length--;\n  }, n.getRule = function(t) {\n    return t < this.length ? this.rules[t] : \"\";\n  }, e;\n}(), Lt = wt, Qr = { isServer: !wt, useCSSOMInjection: !Lr }, Jt = function() {\n  function e(t, o, a) {\n    t === void 0 && (t = Pe), o === void 0 && (o = {}), this.options = Ae({}, Qr, {}, t), this.gs = o, this.names = new Map(a), this.server = !!t.isServer, !this.server && wt && Lt && (Lt = !1, function(c) {\n      for (var s = document.querySelectorAll(Ur), f = 0, h = s.length; f < h; f++) {\n        var v = s[f];\n        v && v.getAttribute(Fe) !== \"active\" && (qr(c, v), v.parentNode && v.parentNode.removeChild(v));\n      }\n    }(this));\n  }\n  e.registerId = function(t) {\n    return Xe(t);\n  };\n  var n = e.prototype;\n  return n.reconstructWithOptions = function(t, o) {\n    return o === void 0 && (o = !0), new e(Ae({}, this.options, {}, t), this.gs, o && this.names || void 0);\n  }, n.allocateGSInstance = function(t) {\n    return this.gs[t] = (this.gs[t] || 0) + 1;\n  }, n.getTag = function() {\n    return this.tag || (this.tag = (a = (o = this.options).isServer, c = o.useCSSOMInjection, s = o.target, t = a ? new Jr(s) : c ? new Kr(s) : new Zr(s), new Yr(t)));\n    var t, o, a, c, s;\n  }, n.hasNameForId = function(t, o) {\n    return this.names.has(t) && this.names.get(t).has(o);\n  }, n.registerName = function(t, o) {\n    if (Xe(t), this.names.has(t))\n      this.names.get(t).add(o);\n    else {\n      var a = /* @__PURE__ */ new Set();\n      a.add(o), this.names.set(t, a);\n    }\n  }, n.insertRules = function(t, o, a) {\n    this.registerName(t, o), this.getTag().insertRules(Xe(t), a);\n  }, n.clearNames = function(t) {\n    this.names.has(t) && this.names.get(t).clear();\n  }, n.clearRules = function(t) {\n    this.getTag().clearGroup(Xe(t)), this.clearNames(t);\n  }, n.clearTag = function() {\n    this.tag = void 0;\n  }, n.toString = function() {\n    return function(t) {\n      for (var o = t.getTag(), a = o.length, c = \"\", s = 0; s < a; s++) {\n        var f = Br(s);\n        if (f !== void 0) {\n          var h = t.names.get(f), v = o.getGroup(s);\n          if (h && v && h.size) {\n            var g = Fe + \".g\" + s + '[id=\"' + f + '\"]', C = \"\";\n            h !== void 0 && h.forEach(function(D) {\n              D.length > 0 && (C += D + \",\");\n            }), c += \"\" + v + g + '{content:\"' + C + `\"}/*!sc*/\n`;\n          }\n        }\n      }\n      return c;\n    }(this);\n  }, e;\n}(), en = /(a)(d)/gi, Ft = function(e) {\n  return String.fromCharCode(e + (e > 25 ? 39 : 97));\n};\nfunction dt(e) {\n  var n, t = \"\";\n  for (n = Math.abs(e); n > 52; n = n / 52 | 0)\n    t = Ft(n % 52) + t;\n  return (Ft(n % 52) + t).replace(en, \"$1-$2\");\n}\nvar Ie = function(e, n) {\n  for (var t = n.length; t; )\n    e = 33 * e ^ n.charCodeAt(--t);\n  return e;\n}, Qt = function(e) {\n  return Ie(5381, e);\n};\nfunction tn(e) {\n  for (var n = 0; n < e.length; n += 1) {\n    var t = e[n];\n    if (Ge(t) && !yt(t))\n      return !1;\n  }\n  return !0;\n}\nvar rn = Qt(\"5.3.6\"), nn = function() {\n  function e(n, t, o) {\n    this.rules = n, this.staticRulesId = \"\", this.isStatic =  false && 0, this.componentId = t, this.baseHash = Ie(rn, t), this.baseStyle = o, Jt.registerId(t);\n  }\n  return e.prototype.generateAndInjectStyles = function(n, t, o) {\n    var a = this.componentId, c = [];\n    if (this.baseStyle && c.push(this.baseStyle.generateAndInjectStyles(n, t, o)), this.isStatic && !o.hash)\n      if (this.staticRulesId && t.hasNameForId(a, this.staticRulesId))\n        c.push(this.staticRulesId);\n      else {\n        var s = ze(this.rules, n, t, o).join(\"\"), f = dt(Ie(this.baseHash, s) >>> 0);\n        if (!t.hasNameForId(a, f)) {\n          var h = o(s, \".\" + f, void 0, a);\n          t.insertRules(a, f, h);\n        }\n        c.push(f), this.staticRulesId = f;\n      }\n    else {\n      for (var v = this.rules.length, g = Ie(this.baseHash, o.hash), C = \"\", D = 0; D < v; D++) {\n        var F = this.rules[D];\n        if (typeof F == \"string\")\n          C += F,  true && (g = Ie(g, F + D));\n        else if (F) {\n          var E = ze(F, n, t, o), O = Array.isArray(E) ? E.join(\"\") : E;\n          g = Ie(g, O + D), C += O;\n        }\n      }\n      if (C) {\n        var x = dt(g >>> 0);\n        if (!t.hasNameForId(a, x)) {\n          var I = o(C, \".\" + x, void 0, a);\n          t.insertRules(a, x, I);\n        }\n        c.push(x);\n      }\n    }\n    return c.join(\" \");\n  }, e;\n}(), on = /^\\s*\\/\\/.*$/gm, an = [\":\", \"[\", \".\", \"#\"];\nfunction sn(e) {\n  var n, t, o, a, c = e === void 0 ? Pe : e, s = c.options, f = s === void 0 ? Pe : s, h = c.plugins, v = h === void 0 ? Qe : h, g = new kr(f), C = [], D = function(O) {\n    function x(I) {\n      if (I)\n        try {\n          O(I + \"}\");\n        } catch {\n        }\n    }\n    return function(I, y, T, _, d, ae, he, ce, ue, me) {\n      switch (I) {\n        case 1:\n          if (ue === 0 && y.charCodeAt(0) === 64)\n            return O(y + \";\"), \"\";\n          break;\n        case 2:\n          if (ce === 0)\n            return y + \"/*|*/\";\n          break;\n        case 3:\n          switch (ce) {\n            case 102:\n            case 112:\n              return O(T[0] + y), \"\";\n            default:\n              return y + (me === 0 ? \"/*|*/\" : \"\");\n          }\n        case -2:\n          y.split(\"/*|*/}\").forEach(x);\n      }\n    };\n  }(function(O) {\n    C.push(O);\n  }), F = function(O, x, I) {\n    return x === 0 && an.indexOf(I[t.length]) !== -1 || I.match(a) ? O : \".\" + n;\n  };\n  function E(O, x, I, y) {\n    y === void 0 && (y = \"&\");\n    var T = O.replace(on, \"\"), _ = x && I ? I + \" \" + x + \" { \" + T + \" }\" : T;\n    return n = y, t = x, o = new RegExp(\"\\\\\" + t + \"\\\\b\", \"g\"), a = new RegExp(\"(\\\\\" + t + \"\\\\b){2,}\"), g(I || !x ? \"\" : x, _);\n  }\n  return g.use([].concat(v, [function(O, x, I) {\n    O === 2 && I.length && I[0].lastIndexOf(t) > 0 && (I[0] = I[0].replace(o, F));\n  }, D, function(O) {\n    if (O === -2) {\n      var x = C;\n      return C = [], x;\n    }\n  }])), E.hash = v.length ? v.reduce(function(O, x) {\n    return x.name || Be(15), Ie(O, x.name);\n  }, 5381).toString() : \"\", E;\n}\nvar er = react__WEBPACK_IMPORTED_MODULE_0__.createContext();\ner.Consumer;\nvar tr = react__WEBPACK_IMPORTED_MODULE_0__.createContext(), cn = (tr.Consumer, new Jt()), ft = sn();\nfunction ln() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(er) || cn;\n}\nfunction un() {\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(tr) || ft;\n}\nvar dn = function() {\n  function e(n, t) {\n    var o = this;\n    this.inject = function(a, c) {\n      c === void 0 && (c = ft);\n      var s = o.name + c.hash;\n      a.hasNameForId(o.id, s) || a.insertRules(o.id, s, c(o.rules, s, \"@keyframes\"));\n    }, this.toString = function() {\n      return Be(12, String(o.name));\n    }, this.name = n, this.id = \"sc-keyframes-\" + n, this.rules = t;\n  }\n  return e.prototype.getName = function(n) {\n    return n === void 0 && (n = ft), this.name + n.hash;\n  }, e;\n}(), fn = /([A-Z])/, pn = /([A-Z])/g, hn = /^ms-/, mn = function(e) {\n  return \"-\" + e.toLowerCase();\n};\nfunction zt(e) {\n  return fn.test(e) ? e.replace(pn, mn).replace(hn, \"-ms-\") : e;\n}\nvar Yt = function(e) {\n  return e == null || e === !1 || e === \"\";\n};\nfunction ze(e, n, t, o) {\n  if (Array.isArray(e)) {\n    for (var a, c = [], s = 0, f = e.length; s < f; s += 1)\n      (a = ze(e[s], n, t, o)) !== \"\" && (Array.isArray(a) ? c.push.apply(c, a) : c.push(a));\n    return c;\n  }\n  if (Yt(e))\n    return \"\";\n  if (yt(e))\n    return \".\" + e.styledComponentId;\n  if (Ge(e)) {\n    if (typeof (v = e) != \"function\" || v.prototype && v.prototype.isReactComponent || !n)\n      return e;\n    var h = e(n);\n    return  true && qe.exports.isElement(h) && console.warn(ut(e) + \" is not a styled component and cannot be referred to via component selector. See https://www.styled-components.com/docs/advanced#referring-to-other-components for more details.\"), ze(h, n, t, o);\n  }\n  var v;\n  return e instanceof dn ? t ? (e.inject(t, o), e.getName(o)) : e : lt(e) ? function g(C, D) {\n    var F, E, O = [];\n    for (var x in C)\n      C.hasOwnProperty(x) && !Yt(C[x]) && (Array.isArray(C[x]) && C[x].isCss || Ge(C[x]) ? O.push(zt(x) + \":\", C[x], \";\") : lt(C[x]) ? O.push.apply(O, g(C[x], x)) : O.push(zt(x) + \": \" + (F = x, (E = C[x]) == null || typeof E == \"boolean\" || E === \"\" ? \"\" : typeof E != \"number\" || E === 0 || F in Ar ? String(E).trim() : E + \"px\") + \";\"));\n    return D ? [D + \" {\"].concat(O, [\"}\"]) : O;\n  }(e) : e.toString();\n}\nvar Bt = function(e) {\n  return Array.isArray(e) && (e.isCss = !0), e;\n};\nfunction vn(e) {\n  for (var n = arguments.length, t = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++)\n    t[o - 1] = arguments[o];\n  return Ge(e) || lt(e) ? Bt(ze($t(Qe, [e].concat(t)))) : t.length === 0 && e.length === 1 && typeof e[0] == \"string\" ? e : Bt(ze($t(e, t)));\n}\nvar Vt = /invalid hook call/i, Ke = /* @__PURE__ */ new Set(), gn = function(e, n) {\n  if (true) {\n    var t = \"The component \" + e + (n ? ' with the id of \"' + n + '\"' : \"\") + ` has been created dynamically.\nYou may see this warning because you've called styled inside another component.\nTo resolve this only create new StyledComponents outside of any render method and function component.`, o = console.error;\n    try {\n      var a = !0;\n      console.error = function(c) {\n        if (Vt.test(c))\n          a = !1, Ke.delete(t);\n        else {\n          for (var s = arguments.length, f = new Array(s > 1 ? s - 1 : 0), h = 1; h < s; h++)\n            f[h - 1] = arguments[h];\n          o.apply(void 0, [c].concat(f));\n        }\n      }, (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), a && !Ke.has(t) && (console.warn(t), Ke.add(t));\n    } catch (c) {\n      Vt.test(c.message) && Ke.delete(t);\n    } finally {\n      console.error = o;\n    }\n  }\n}, yn = function(e, n, t) {\n  return t === void 0 && (t = Pe), e.theme !== t.theme && e.theme || n || t.theme;\n}, wn = /[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~-]+/g, bn = /(^-|-$)/g;\nfunction it(e) {\n  return e.replace(wn, \"-\").replace(bn, \"\");\n}\nvar Sn = function(e) {\n  return dt(Qt(e) >>> 0);\n};\nfunction Ze(e) {\n  return typeof e == \"string\" && ( false || e.charAt(0) === e.charAt(0).toLowerCase());\n}\nvar pt = function(e) {\n  return typeof e == \"function\" || typeof e == \"object\" && e !== null && !Array.isArray(e);\n}, Cn = function(e) {\n  return e !== \"__proto__\" && e !== \"constructor\" && e !== \"prototype\";\n};\nfunction En(e, n, t) {\n  var o = e[t];\n  pt(n) && pt(o) ? rr(o, n) : e[t] = n;\n}\nfunction rr(e) {\n  for (var n = arguments.length, t = new Array(n > 1 ? n - 1 : 0), o = 1; o < n; o++)\n    t[o - 1] = arguments[o];\n  for (var a = 0, c = t; a < c.length; a++) {\n    var s = c[a];\n    if (pt(s))\n      for (var f in s)\n        Cn(f) && En(e, s[f], f);\n  }\n  return e;\n}\nvar nr = react__WEBPACK_IMPORTED_MODULE_0__.createContext();\nnr.Consumer;\nvar st = {};\nfunction or(e, n, t) {\n  var o = yt(e), a = !Ze(e), c = n.attrs, s = c === void 0 ? Qe : c, f = n.componentId, h = f === void 0 ? function(y, T) {\n    var _ = typeof y != \"string\" ? \"sc\" : it(y);\n    st[_] = (st[_] || 0) + 1;\n    var d = _ + \"-\" + Sn(\"5.3.6\" + _ + st[_]);\n    return T ? T + \"-\" + d : d;\n  }(n.displayName, n.parentComponentId) : f, v = n.displayName, g = v === void 0 ? function(y) {\n    return Ze(y) ? \"styled.\" + y : \"Styled(\" + ut(y) + \")\";\n  }(e) : v, C = n.displayName && n.componentId ? it(n.displayName) + \"-\" + n.componentId : n.componentId || h, D = o && e.attrs ? Array.prototype.concat(e.attrs, s).filter(Boolean) : s, F = n.shouldForwardProp;\n  o && e.shouldForwardProp && (F = n.shouldForwardProp ? function(y, T, _) {\n    return e.shouldForwardProp(y, T, _) && n.shouldForwardProp(y, T, _);\n  } : e.shouldForwardProp);\n  var E, O = new nn(t, C, o ? e.componentStyle : void 0), x = O.isStatic && s.length === 0, I = function(y, T) {\n    return function(_, d, ae, he) {\n      var ce = _.attrs, ue = _.componentStyle, me = _.defaultProps, we = _.foldedComponentIds, ie = _.shouldForwardProp, G = _.styledComponentId, te = _.target;\n       true && (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)(G);\n      var K = function(A, i, j) {\n        A === void 0 && (A = Pe);\n        var p = Ae({}, i, { theme: A }), U = {};\n        return j.forEach(function(M) {\n          var $, l, X, Z = M;\n          for ($ in Ge(Z) && (Z = Z(p)), Z)\n            p[$] = U[$] = $ === \"className\" ? (l = U[$], X = Z[$], l && X ? l + \" \" + X : l || X) : Z[$];\n        }), [p, U];\n      }(yn(d, (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(nr), me) || Pe, d, ce), be = K[0], le = K[1], se = function(A, i, j, p) {\n        var U = ln(), M = un(), $ = i ? A.generateAndInjectStyles(Pe, U, M) : A.generateAndInjectStyles(j, U, M);\n        return  true && (0,react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue)($),  true && !i && p && p($), $;\n      }(ue, he, be,  true ? _.warnTooManyClasses : 0), Se = ae, ve = le.$as || d.$as || le.as || d.as || te, Ce = Ze(ve), S = le !== d ? Ae({}, d, {}, le) : d, w = {};\n      for (var b in S)\n        b[0] !== \"$\" && b !== \"as\" && (b === \"forwardedAs\" ? w.as = S[b] : (ie ? ie(b, Dt, ve) : !Ce || Dt(b)) && (w[b] = S[b]));\n      return d.style && le.style !== d.style && (w.style = Ae({}, d.style, {}, le.style)), w.className = Array.prototype.concat(we, G, se !== G ? se : null, d.className, le.className).filter(Boolean).join(\" \"), w.ref = Se, (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(ve, w);\n    }(E, y, T, x);\n  };\n  return I.displayName = g, (E = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(I)).attrs = D, E.componentStyle = O, E.displayName = g, E.shouldForwardProp = F, E.foldedComponentIds = o ? Array.prototype.concat(e.foldedComponentIds, e.styledComponentId) : Qe, E.styledComponentId = C, E.target = o ? e.target : e, E.withComponent = function(y) {\n    var T = n.componentId, _ = function(ae, he) {\n      if (ae == null)\n        return {};\n      var ce, ue, me = {}, we = Object.keys(ae);\n      for (ue = 0; ue < we.length; ue++)\n        ce = we[ue], he.indexOf(ce) >= 0 || (me[ce] = ae[ce]);\n      return me;\n    }(n, [\"componentId\"]), d = T && T + \"-\" + (Ze(y) ? y : it(ut(y)));\n    return or(y, Ae({}, _, { attrs: D, componentId: d }), t);\n  }, Object.defineProperty(E, \"defaultProps\", { get: function() {\n    return this._foldedDefaultProps;\n  }, set: function(y) {\n    this._foldedDefaultProps = o ? rr({}, e.defaultProps, y) : y;\n  } }),  true && (gn(g, C), E.warnTooManyClasses = function(y, T) {\n    var _ = {}, d = !1;\n    return function(ae) {\n      if (!d && (_[ae] = !0, Object.keys(_).length >= 200)) {\n        var he = T ? ' with the id of \"' + T + '\"' : \"\";\n        console.warn(\"Over 200 classes were generated for component \" + y + he + `.\nConsider using the attrs method, together with a style object for frequently changed styles.\nExample:\n  const Component = styled.div.attrs(props => ({\n    style: {\n      background: props.background,\n    },\n  }))\\`width: 100%;\\`\n\n  <Component />`), d = !0, _ = {};\n      }\n    };\n  }(g, C)), E.toString = function() {\n    return \".\" + E.styledComponentId;\n  }, a && $r(E, e, { attrs: !0, componentStyle: !0, displayName: !0, foldedComponentIds: !0, shouldForwardProp: !0, styledComponentId: !0, target: !0, withComponent: !0 }), E;\n}\nvar ht = function(e) {\n  return function n(t, o, a) {\n    if (a === void 0 && (a = Pe), !qe.exports.isValidElementType(o))\n      return Be(1, String(o));\n    var c = function() {\n      return t(o, a, vn.apply(void 0, arguments));\n    };\n    return c.withConfig = function(s) {\n      return n(t, o, Ae({}, a, {}, s));\n    }, c.attrs = function(s) {\n      return n(t, o, Ae({}, a, { attrs: Array.prototype.concat(a.attrs, s).filter(Boolean) }));\n    }, c;\n  }(or, e);\n};\n[\"a\", \"abbr\", \"address\", \"area\", \"article\", \"aside\", \"audio\", \"b\", \"base\", \"bdi\", \"bdo\", \"big\", \"blockquote\", \"body\", \"br\", \"button\", \"canvas\", \"caption\", \"cite\", \"code\", \"col\", \"colgroup\", \"data\", \"datalist\", \"dd\", \"del\", \"details\", \"dfn\", \"dialog\", \"div\", \"dl\", \"dt\", \"em\", \"embed\", \"fieldset\", \"figcaption\", \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"head\", \"header\", \"hgroup\", \"hr\", \"html\", \"i\", \"iframe\", \"img\", \"input\", \"ins\", \"kbd\", \"keygen\", \"label\", \"legend\", \"li\", \"link\", \"main\", \"map\", \"mark\", \"marquee\", \"menu\", \"menuitem\", \"meta\", \"meter\", \"nav\", \"noscript\", \"object\", \"ol\", \"optgroup\", \"option\", \"output\", \"p\", \"param\", \"picture\", \"pre\", \"progress\", \"q\", \"rp\", \"rt\", \"ruby\", \"s\", \"samp\", \"script\", \"section\", \"select\", \"small\", \"source\", \"span\", \"strong\", \"style\", \"sub\", \"summary\", \"sup\", \"table\", \"tbody\", \"td\", \"textarea\", \"tfoot\", \"th\", \"thead\", \"time\", \"title\", \"tr\", \"track\", \"u\", \"ul\", \"var\", \"video\", \"wbr\", \"circle\", \"clipPath\", \"defs\", \"ellipse\", \"foreignObject\", \"g\", \"image\", \"line\", \"linearGradient\", \"marker\", \"mask\", \"path\", \"pattern\", \"polygon\", \"polyline\", \"radialGradient\", \"rect\", \"stop\", \"svg\", \"text\", \"textPath\", \"tspan\"].forEach(function(e) {\n  ht[e] = ht(e);\n});\n true && typeof navigator < \"u\" && navigator.product === \"ReactNative\" && console.warn(`It looks like you've imported 'styled-components' on React Native.\nPerhaps you're looking to import 'styled-components/native'?\nRead more about this at https://www.styled-components.com/docs/basics#react-native`),  true && typeof window < \"u\" && (window[\"__styled-components-init__\"] = window[\"__styled-components-init__\"] || 0, window[\"__styled-components-init__\"] === 1 && console.warn(`It looks like there are several instances of 'styled-components' initialized in this application. This may cause dynamic styles to not render properly, errors during the rehydration process, a missing theme prop, and makes your application bigger without good reason.\n\nSee https://s-c.sh/2BAXzed for more info.`), window[\"__styled-components-init__\"] += 1);\nconst fe = ht, Ne = {\n  walletName: \"\",\n  walletInstance: {}\n}, _n = () => {\n  const [e, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(void 0), [t, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [a, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Ne.walletInstance), [s, f] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(Ne.walletName), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (g) => {\n    o(!0);\n    try {\n      const C = await _meshsdk_core__WEBPACK_IMPORTED_MODULE_1__.BrowserWallet.enable(g);\n      c(C), f(g), n(void 0);\n    } catch (C) {\n      n(C), console.error(C);\n    }\n    o(!1);\n  }, []), v = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(() => {\n    f(Ne.walletName), c(Ne.walletInstance);\n  }, []);\n  return {\n    hasConnectedWallet: Ne.walletName !== s,\n    connectedWalletInstance: a,\n    connectedWalletName: s,\n    connectingWallet: t,\n    connectWallet: h,\n    disconnect: v,\n    error: e\n  };\n}, Te = (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({\n  hasConnectedWallet: !1,\n  connectedWalletInstance: Ne.walletInstance,\n  connectedWalletName: Ne.walletName,\n  connectingWallet: !1\n});\nvar tt = { exports: {} }, Ve = {};\n/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Ut;\nfunction xn() {\n  if (Ut)\n    return Ve;\n  Ut = 1;\n  var e = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), t = Symbol.for(\"react.fragment\"), o = Object.prototype.hasOwnProperty, a = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner, c = { key: !0, ref: !0, __self: !0, __source: !0 };\n  function s(f, h, v) {\n    var g, C = {}, D = null, F = null;\n    v !== void 0 && (D = \"\" + v), h.key !== void 0 && (D = \"\" + h.key), h.ref !== void 0 && (F = h.ref);\n    for (g in h)\n      o.call(h, g) && !c.hasOwnProperty(g) && (C[g] = h[g]);\n    if (f && f.defaultProps)\n      for (g in h = f.defaultProps, h)\n        C[g] === void 0 && (C[g] = h[g]);\n    return { $$typeof: n, type: f, key: D, ref: F, props: C, _owner: a.current };\n  }\n  return Ve.Fragment = t, Ve.jsx = s, Ve.jsxs = s, Ve;\n}\nvar Ue = {};\n/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar Ht;\nfunction Rn() {\n  return Ht || (Ht = 1,  true && function() {\n    var e = react__WEBPACK_IMPORTED_MODULE_0__, n = Symbol.for(\"react.element\"), t = Symbol.for(\"react.portal\"), o = Symbol.for(\"react.fragment\"), a = Symbol.for(\"react.strict_mode\"), c = Symbol.for(\"react.profiler\"), s = Symbol.for(\"react.provider\"), f = Symbol.for(\"react.context\"), h = Symbol.for(\"react.forward_ref\"), v = Symbol.for(\"react.suspense\"), g = Symbol.for(\"react.suspense_list\"), C = Symbol.for(\"react.memo\"), D = Symbol.for(\"react.lazy\"), F = Symbol.for(\"react.offscreen\"), E = Symbol.iterator, O = \"@@iterator\";\n    function x(r) {\n      if (r === null || typeof r != \"object\")\n        return null;\n      var u = E && r[E] || r[O];\n      return typeof u == \"function\" ? u : null;\n    }\n    var I = e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n    function y(r) {\n      {\n        for (var u = arguments.length, m = new Array(u > 1 ? u - 1 : 0), k = 1; k < u; k++)\n          m[k - 1] = arguments[k];\n        T(\"error\", r, m);\n      }\n    }\n    function T(r, u, m) {\n      {\n        var k = I.ReactDebugCurrentFrame, Y = k.getStackAddendum();\n        Y !== \"\" && (u += \"%s\", m = m.concat([Y]));\n        var H = m.map(function(L) {\n          return String(L);\n        });\n        H.unshift(\"Warning: \" + u), Function.prototype.apply.call(console[r], console, H);\n      }\n    }\n    var _ = !1, d = !1, ae = !1, he = !1, ce = !1, ue;\n    ue = Symbol.for(\"react.module.reference\");\n    function me(r) {\n      return !!(typeof r == \"string\" || typeof r == \"function\" || r === o || r === c || ce || r === a || r === v || r === g || he || r === F || _ || d || ae || typeof r == \"object\" && r !== null && (r.$$typeof === D || r.$$typeof === C || r.$$typeof === s || r.$$typeof === f || r.$$typeof === h || r.$$typeof === ue || r.getModuleId !== void 0));\n    }\n    function we(r, u, m) {\n      var k = r.displayName;\n      if (k)\n        return k;\n      var Y = u.displayName || u.name || \"\";\n      return Y !== \"\" ? m + \"(\" + Y + \")\" : m;\n    }\n    function ie(r) {\n      return r.displayName || \"Context\";\n    }\n    function G(r) {\n      if (r == null)\n        return null;\n      if (typeof r.tag == \"number\" && y(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), typeof r == \"function\")\n        return r.displayName || r.name || null;\n      if (typeof r == \"string\")\n        return r;\n      switch (r) {\n        case o:\n          return \"Fragment\";\n        case t:\n          return \"Portal\";\n        case c:\n          return \"Profiler\";\n        case a:\n          return \"StrictMode\";\n        case v:\n          return \"Suspense\";\n        case g:\n          return \"SuspenseList\";\n      }\n      if (typeof r == \"object\")\n        switch (r.$$typeof) {\n          case f:\n            var u = r;\n            return ie(u) + \".Consumer\";\n          case s:\n            var m = r;\n            return ie(m._context) + \".Provider\";\n          case h:\n            return we(r, r.render, \"ForwardRef\");\n          case C:\n            var k = r.displayName || null;\n            return k !== null ? k : G(r.type) || \"Memo\";\n          case D: {\n            var Y = r, H = Y._payload, L = Y._init;\n            try {\n              return G(L(H));\n            } catch {\n              return null;\n            }\n          }\n        }\n      return null;\n    }\n    var te = Object.assign, K = 0, be, le, se, Se, ve, Ce, S;\n    function w() {\n    }\n    w.__reactDisabledLog = !0;\n    function b() {\n      {\n        if (K === 0) {\n          be = console.log, le = console.info, se = console.warn, Se = console.error, ve = console.group, Ce = console.groupCollapsed, S = console.groupEnd;\n          var r = {\n            configurable: !0,\n            enumerable: !0,\n            value: w,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            info: r,\n            log: r,\n            warn: r,\n            error: r,\n            group: r,\n            groupCollapsed: r,\n            groupEnd: r\n          });\n        }\n        K++;\n      }\n    }\n    function A() {\n      {\n        if (K--, K === 0) {\n          var r = {\n            configurable: !0,\n            enumerable: !0,\n            writable: !0\n          };\n          Object.defineProperties(console, {\n            log: te({}, r, {\n              value: be\n            }),\n            info: te({}, r, {\n              value: le\n            }),\n            warn: te({}, r, {\n              value: se\n            }),\n            error: te({}, r, {\n              value: Se\n            }),\n            group: te({}, r, {\n              value: ve\n            }),\n            groupCollapsed: te({}, r, {\n              value: Ce\n            }),\n            groupEnd: te({}, r, {\n              value: S\n            })\n          });\n        }\n        K < 0 && y(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\");\n      }\n    }\n    var i = I.ReactCurrentDispatcher, j;\n    function p(r, u, m) {\n      {\n        if (j === void 0)\n          try {\n            throw Error();\n          } catch (Y) {\n            var k = Y.stack.trim().match(/\\n( *(at )?)/);\n            j = k && k[1] || \"\";\n          }\n        return `\n` + j + r;\n      }\n    }\n    var U = !1, M;\n    {\n      var $ = typeof WeakMap == \"function\" ? WeakMap : Map;\n      M = new $();\n    }\n    function l(r, u) {\n      if (!r || U)\n        return \"\";\n      {\n        var m = M.get(r);\n        if (m !== void 0)\n          return m;\n      }\n      var k;\n      U = !0;\n      var Y = Error.prepareStackTrace;\n      Error.prepareStackTrace = void 0;\n      var H;\n      H = i.current, i.current = null, b();\n      try {\n        if (u) {\n          var L = function() {\n            throw Error();\n          };\n          if (Object.defineProperty(L.prototype, \"props\", {\n            set: function() {\n              throw Error();\n            }\n          }), typeof Reflect == \"object\" && Reflect.construct) {\n            try {\n              Reflect.construct(L, []);\n            } catch (ke) {\n              k = ke;\n            }\n            Reflect.construct(r, [], L);\n          } else {\n            try {\n              L.call();\n            } catch (ke) {\n              k = ke;\n            }\n            r.call(L.prototype);\n          }\n        } else {\n          try {\n            throw Error();\n          } catch (ke) {\n            k = ke;\n          }\n          r();\n        }\n      } catch (ke) {\n        if (ke && k && typeof ke.stack == \"string\") {\n          for (var W = ke.stack.split(`\n`), de = k.stack.split(`\n`), Q = W.length - 1, ne = de.length - 1; Q >= 1 && ne >= 0 && W[Q] !== de[ne]; )\n            ne--;\n          for (; Q >= 1 && ne >= 0; Q--, ne--)\n            if (W[Q] !== de[ne]) {\n              if (Q !== 1 || ne !== 1)\n                do\n                  if (Q--, ne--, ne < 0 || W[Q] !== de[ne]) {\n                    var ge = `\n` + W[Q].replace(\" at new \", \" at \");\n                    return r.displayName && ge.includes(\"<anonymous>\") && (ge = ge.replace(\"<anonymous>\", r.displayName)), typeof r == \"function\" && M.set(r, ge), ge;\n                  }\n                while (Q >= 1 && ne >= 0);\n              break;\n            }\n        }\n      } finally {\n        U = !1, i.current = H, A(), Error.prepareStackTrace = Y;\n      }\n      var Le = r ? r.displayName || r.name : \"\", Pt = Le ? p(Le) : \"\";\n      return typeof r == \"function\" && M.set(r, Pt), Pt;\n    }\n    function X(r, u, m) {\n      return l(r, !1);\n    }\n    function Z(r) {\n      var u = r.prototype;\n      return !!(u && u.isReactComponent);\n    }\n    function P(r, u, m) {\n      if (r == null)\n        return \"\";\n      if (typeof r == \"function\")\n        return l(r, Z(r));\n      if (typeof r == \"string\")\n        return p(r);\n      switch (r) {\n        case v:\n          return p(\"Suspense\");\n        case g:\n          return p(\"SuspenseList\");\n      }\n      if (typeof r == \"object\")\n        switch (r.$$typeof) {\n          case h:\n            return X(r.render);\n          case C:\n            return P(r.type, u, m);\n          case D: {\n            var k = r, Y = k._payload, H = k._init;\n            try {\n              return P(H(Y), u, m);\n            } catch {\n            }\n          }\n        }\n      return \"\";\n    }\n    var J = Object.prototype.hasOwnProperty, z = {}, re = I.ReactDebugCurrentFrame;\n    function Ee(r) {\n      if (r) {\n        var u = r._owner, m = P(r.type, r._source, u ? u.type : null);\n        re.setExtraStackFrame(m);\n      } else\n        re.setExtraStackFrame(null);\n    }\n    function oe(r, u, m, k, Y) {\n      {\n        var H = Function.call.bind(J);\n        for (var L in r)\n          if (H(r, L)) {\n            var W = void 0;\n            try {\n              if (typeof r[L] != \"function\") {\n                var de = Error((k || \"React class\") + \": \" + m + \" type `\" + L + \"` is invalid; it must be a function, usually from the `prop-types` package, but received `\" + typeof r[L] + \"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");\n                throw de.name = \"Invariant Violation\", de;\n              }\n              W = r[L](u, L, k, m, null, \"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\");\n            } catch (Q) {\n              W = Q;\n            }\n            W && !(W instanceof Error) && (Ee(Y), y(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\", k || \"React class\", m, L, typeof W), Ee(null)), W instanceof Error && !(W.message in z) && (z[W.message] = !0, Ee(Y), y(\"Failed %s type: %s\", m, W.message), Ee(null));\n          }\n      }\n    }\n    var je = Array.isArray;\n    function xe(r) {\n      return je(r);\n    }\n    function pe(r) {\n      {\n        var u = typeof Symbol == \"function\" && Symbol.toStringTag, m = u && r[Symbol.toStringTag] || r.constructor.name || \"Object\";\n        return m;\n      }\n    }\n    function R(r) {\n      try {\n        return q(r), !1;\n      } catch {\n        return !0;\n      }\n    }\n    function q(r) {\n      return \"\" + r;\n    }\n    function We(r) {\n      if (R(r))\n        return y(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\", pe(r)), q(r);\n    }\n    var Re = I.ReactCurrentOwner, _e = {\n      key: !0,\n      ref: !0,\n      __self: !0,\n      __source: !0\n    }, Ct, Et, rt;\n    rt = {};\n    function ir(r) {\n      if (J.call(r, \"ref\")) {\n        var u = Object.getOwnPropertyDescriptor(r, \"ref\").get;\n        if (u && u.isReactWarning)\n          return !1;\n      }\n      return r.ref !== void 0;\n    }\n    function sr(r) {\n      if (J.call(r, \"key\")) {\n        var u = Object.getOwnPropertyDescriptor(r, \"key\").get;\n        if (u && u.isReactWarning)\n          return !1;\n      }\n      return r.key !== void 0;\n    }\n    function cr(r, u) {\n      if (typeof r.ref == \"string\" && Re.current && u && Re.current.stateNode !== u) {\n        var m = G(Re.current.type);\n        rt[m] || (y('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', G(Re.current.type), r.ref), rt[m] = !0);\n      }\n    }\n    function lr(r, u) {\n      {\n        var m = function() {\n          Ct || (Ct = !0, y(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", u));\n        };\n        m.isReactWarning = !0, Object.defineProperty(r, \"key\", {\n          get: m,\n          configurable: !0\n        });\n      }\n    }\n    function ur(r, u) {\n      {\n        var m = function() {\n          Et || (Et = !0, y(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\", u));\n        };\n        m.isReactWarning = !0, Object.defineProperty(r, \"ref\", {\n          get: m,\n          configurable: !0\n        });\n      }\n    }\n    var dr = function(r, u, m, k, Y, H, L) {\n      var W = {\n        $$typeof: n,\n        type: r,\n        key: u,\n        ref: m,\n        props: L,\n        _owner: H\n      };\n      return W._store = {}, Object.defineProperty(W._store, \"validated\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !0,\n        value: !1\n      }), Object.defineProperty(W, \"_self\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: k\n      }), Object.defineProperty(W, \"_source\", {\n        configurable: !1,\n        enumerable: !1,\n        writable: !1,\n        value: Y\n      }), Object.freeze && (Object.freeze(W.props), Object.freeze(W)), W;\n    };\n    function fr(r, u, m, k, Y) {\n      {\n        var H, L = {}, W = null, de = null;\n        m !== void 0 && (We(m), W = \"\" + m), sr(u) && (We(u.key), W = \"\" + u.key), ir(u) && (de = u.ref, cr(u, Y));\n        for (H in u)\n          J.call(u, H) && !_e.hasOwnProperty(H) && (L[H] = u[H]);\n        if (r && r.defaultProps) {\n          var Q = r.defaultProps;\n          for (H in Q)\n            L[H] === void 0 && (L[H] = Q[H]);\n        }\n        if (W || de) {\n          var ne = typeof r == \"function\" ? r.displayName || r.name || \"Unknown\" : r;\n          W && lr(L, ne), de && ur(L, ne);\n        }\n        return dr(r, W, de, Y, k, Re.current, L);\n      }\n    }\n    var nt = I.ReactCurrentOwner, _t = I.ReactDebugCurrentFrame;\n    function $e(r) {\n      if (r) {\n        var u = r._owner, m = P(r.type, r._source, u ? u.type : null);\n        _t.setExtraStackFrame(m);\n      } else\n        _t.setExtraStackFrame(null);\n    }\n    var ot;\n    ot = !1;\n    function at(r) {\n      return typeof r == \"object\" && r !== null && r.$$typeof === n;\n    }\n    function xt() {\n      {\n        if (nt.current) {\n          var r = G(nt.current.type);\n          if (r)\n            return `\n\nCheck the render method of \\`` + r + \"`.\";\n        }\n        return \"\";\n      }\n    }\n    function pr(r) {\n      {\n        if (r !== void 0) {\n          var u = r.fileName.replace(/^.*[\\\\\\/]/, \"\"), m = r.lineNumber;\n          return `\n\nCheck your code at ` + u + \":\" + m + \".\";\n        }\n        return \"\";\n      }\n    }\n    var Rt = {};\n    function hr(r) {\n      {\n        var u = xt();\n        if (!u) {\n          var m = typeof r == \"string\" ? r : r.displayName || r.name;\n          m && (u = `\n\nCheck the top-level render call using <` + m + \">.\");\n        }\n        return u;\n      }\n    }\n    function kt(r, u) {\n      {\n        if (!r._store || r._store.validated || r.key != null)\n          return;\n        r._store.validated = !0;\n        var m = hr(u);\n        if (Rt[m])\n          return;\n        Rt[m] = !0;\n        var k = \"\";\n        r && r._owner && r._owner !== nt.current && (k = \" It was passed a child from \" + G(r._owner.type) + \".\"), $e(r), y('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', m, k), $e(null);\n      }\n    }\n    function At(r, u) {\n      {\n        if (typeof r != \"object\")\n          return;\n        if (xe(r))\n          for (var m = 0; m < r.length; m++) {\n            var k = r[m];\n            at(k) && kt(k, u);\n          }\n        else if (at(r))\n          r._store && (r._store.validated = !0);\n        else if (r) {\n          var Y = x(r);\n          if (typeof Y == \"function\" && Y !== r.entries)\n            for (var H = Y.call(r), L; !(L = H.next()).done; )\n              at(L.value) && kt(L.value, u);\n        }\n      }\n    }\n    function mr(r) {\n      {\n        var u = r.type;\n        if (u == null || typeof u == \"string\")\n          return;\n        var m;\n        if (typeof u == \"function\")\n          m = u.propTypes;\n        else if (typeof u == \"object\" && (u.$$typeof === h || u.$$typeof === C))\n          m = u.propTypes;\n        else\n          return;\n        if (m) {\n          var k = G(u);\n          oe(m, r.props, \"prop\", k, r);\n        } else if (u.PropTypes !== void 0 && !ot) {\n          ot = !0;\n          var Y = G(u);\n          y(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\", Y || \"Unknown\");\n        }\n        typeof u.getDefaultProps == \"function\" && !u.getDefaultProps.isReactClassApproved && y(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\");\n      }\n    }\n    function vr(r) {\n      {\n        for (var u = Object.keys(r.props), m = 0; m < u.length; m++) {\n          var k = u[m];\n          if (k !== \"children\" && k !== \"key\") {\n            $e(r), y(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\", k), $e(null);\n            break;\n          }\n        }\n        r.ref !== null && ($e(r), y(\"Invalid attribute `ref` supplied to `React.Fragment`.\"), $e(null));\n      }\n    }\n    function Tt(r, u, m, k, Y, H) {\n      {\n        var L = me(r);\n        if (!L) {\n          var W = \"\";\n          (r === void 0 || typeof r == \"object\" && r !== null && Object.keys(r).length === 0) && (W += \" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");\n          var de = pr(Y);\n          de ? W += de : W += xt();\n          var Q;\n          r === null ? Q = \"null\" : xe(r) ? Q = \"array\" : r !== void 0 && r.$$typeof === n ? (Q = \"<\" + (G(r.type) || \"Unknown\") + \" />\", W = \" Did you accidentally export a JSX literal instead of a component?\") : Q = typeof r, y(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\", Q, W);\n        }\n        var ne = fr(r, u, m, Y, H);\n        if (ne == null)\n          return ne;\n        if (L) {\n          var ge = u.children;\n          if (ge !== void 0)\n            if (k)\n              if (xe(ge)) {\n                for (var Le = 0; Le < ge.length; Le++)\n                  At(ge[Le], r);\n                Object.freeze && Object.freeze(ge);\n              } else\n                y(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n            else\n              At(ge, r);\n        }\n        return r === o ? vr(ne) : mr(ne), ne;\n      }\n    }\n    function gr(r, u, m) {\n      return Tt(r, u, m, !0);\n    }\n    function yr(r, u, m) {\n      return Tt(r, u, m, !1);\n    }\n    var wr = yr, br = gr;\n    Ue.Fragment = o, Ue.jsx = wr, Ue.jsxs = br;\n  }()), Ue;\n}\n(function(e) {\n   false ? 0 : e.exports = Rn();\n})(tt);\nconst De = tt.exports.Fragment, N = tt.exports.jsx, Me = tt.exports.jsxs, Xn = ({\n  children: e\n}) => {\n  const n = _n();\n  return /* @__PURE__ */ N(Te.Provider, {\n    value: n,\n    children: e\n  });\n}, Kn = (e = 0) => {\n  const [n, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), {\n    hasConnectedWallet: o,\n    connectedWalletName: a,\n    connectedWalletInstance: c\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    o && c.getUsedAddresses().then((s) => {\n      s[e] && t(s[e]);\n    });\n  }, [e, a]), n;\n}, Zn = () => {\n  const [e, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), {\n    hasConnectedWallet: t,\n    connectedWalletName: o,\n    connectedWalletInstance: a\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t && a.getAssets().then(n);\n  }, [o]), e;\n}, bt = () => {\n  const [e, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)([]);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    n(_meshsdk_core__WEBPACK_IMPORTED_MODULE_1__.BrowserWallet.getInstalledWallets());\n  }, []), e;\n}, kn = () => {\n  const [e, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), {\n    hasConnectedWallet: t,\n    connectedWalletName: o,\n    connectedWalletInstance: a\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t && a.getLovelace().then(n);\n  }, [o]), e;\n}, Jn = () => {\n  const [e, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), {\n    hasConnectedWallet: t,\n    connectedWalletName: o,\n    connectedWalletInstance: a\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    t && a.getNetworkId().then(n);\n  }, [o]), e;\n}, An = (e = 0) => {\n  const [n, t] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), {\n    hasConnectedWallet: o,\n    connectedWalletName: a,\n    connectedWalletInstance: c\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te);\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    o && c.getRewardAddresses().then((s) => {\n      s[e] && t(s[e]);\n    });\n  }, [e, a]), n;\n}, St = () => {\n  const {\n    hasConnectedWallet: e,\n    connectedWalletName: n,\n    connectedWalletInstance: t,\n    connectingWallet: o,\n    connectWallet: a,\n    disconnect: c,\n    error: s\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te);\n  if (a === void 0 || c === void 0)\n    throw new Error(\"Can't call useWallet outside of the WalletProvider context\");\n  return {\n    name: n,\n    connecting: o,\n    connected: e,\n    wallet: t,\n    connect: a,\n    disconnect: c,\n    error: s\n  };\n}, Qn = () => {\n  const [e, n] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [t, o] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [a, c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), {\n    hasConnectedWallet: s,\n    connectedWalletInstance: f\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te), h = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(async (v) => {\n    c(!0);\n    try {\n      if (s) {\n        const g = await f.submitTx(v);\n        n(void 0), o(g);\n      }\n      throw new Error(\"Please make sure to connect a wallet before calling useWalletSubmit\");\n    } catch (g) {\n      n(g), console.error(g);\n    }\n    c(!1);\n  }, []);\n  return {\n    error: e,\n    result: t,\n    submitting: a,\n    submitTx: h\n  };\n}, Tn = (e = {}) => {\n  const {\n    era: n,\n    parameters: t\n  } = e, {\n    hasConnectedWallet: o,\n    connectedWalletInstance: a\n  } = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(Te), [c] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(() => {\n    if (o)\n      return new _meshsdk_core__WEBPACK_IMPORTED_MODULE_1__.Transaction({\n        initiator: a,\n        parameters: t,\n        era: n\n      });\n    throw new Error(\"Please make sure to connect a wallet before calling useWalletTx\");\n  });\n  return c;\n}, Pn = fe.svg.withConfig({\n  displayName: \"CheckMark__StyledCheckMark\",\n  componentId: \"sc-bdkad9-0\"\n})({\n  margin: \"0.5rem\",\n  height: \"1.5rem\"\n}), On = () => /* @__PURE__ */ N(Pn, {\n  fill: \"currentColor\",\n  viewBox: \"0 0 512 512\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /* @__PURE__ */ N(\"path\", {\n    d: \"M470.6 105.4c12.5 12.5 12.5 32.8 0 45.3l-256 256c-12.5 12.5-32.8 12.5-45.3 0l-128-128c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0L192 338.7 425.4 105.4c12.5-12.5 32.8-12.5 45.3 0z\"\n  })\n}), In = fe.div.withConfig({\n  displayName: \"MenuItem__StyledItem\",\n  componentId: \"sc-obisy3-0\"\n})({\n  display: \"flex\",\n  cursor: \"pointer\",\n  alignItems: \"center\",\n  paddingLeft: \"1rem\",\n  paddingRight: \"1rem\",\n  paddingTop: \"0.5rem\",\n  paddingBottom: \"0.5rem\",\n  opacity: \"0.8\",\n  \":hover\": {\n    opacity: \"1\"\n  }\n}), Nn = fe.img.withConfig({\n  displayName: \"MenuItem__StyledIcon\",\n  componentId: \"sc-obisy3-1\"\n})({\n  margin: \"0.25rem\",\n  height: \"2rem\",\n  paddingRight: \"0.5rem\"\n}), Dn = fe.span.withConfig({\n  displayName: \"MenuItem__StyledName\",\n  componentId: \"sc-obisy3-2\"\n})({\n  fontSize: \"1.25rem\",\n  lineHeight: \"1.75rem\",\n  fontWeight: \"400\"\n}), Mn = fe.span.withConfig({\n  displayName: \"MenuItem__StyledActive\",\n  componentId: \"sc-obisy3-3\"\n})({\n  marginLeft: \"auto\"\n}), mt = ({\n  icon: e,\n  label: n,\n  action: t,\n  active: o\n}) => /* @__PURE__ */ Me(In, {\n  onClick: t,\n  children: [e && /* @__PURE__ */ N(Nn, {\n    src: e\n  }), /* @__PURE__ */ N(Dn, {\n    className: \"mr-menu-item\",\n    children: n.split(\" \").map((a) => a.charAt(0).toUpperCase() + a.slice(1).toLowerCase()).join(\" \")\n  }), o && /* @__PURE__ */ N(Mn, {\n    children: /* @__PURE__ */ N(On, {})\n  })]\n}), jn = fe.svg.withConfig({\n  displayName: \"ChevronDown__StyledChevronDown\",\n  componentId: \"sc-17n3mfh-0\"\n})({\n  margin: \"0.5rem\",\n  height: \"1.5rem\"\n}), ar = () => /* @__PURE__ */ N(jn, {\n  fill: \"none\",\n  \"aria-hidden\": \"true\",\n  viewBox: \"0 0 24 24\",\n  stroke: \"currentColor\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /* @__PURE__ */ N(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: \"2\",\n    d: \"M19 9l-7 7-7-7\"\n  })\n}), Gt = fe.img.withConfig({\n  displayName: \"WalletBalance__StyledIcon\",\n  componentId: \"sc-8if913-0\"\n})({\n  margin: \"0.5rem\",\n  height: \"1.5rem\"\n}), Wn = fe.span.withConfig({\n  displayName: \"WalletBalance__StyledSmall\",\n  componentId: \"sc-8if913-1\"\n})({\n  fontSize: \"0.75rem\",\n  lineHeight: \"1rem\"\n}), $n = ({\n  connected: e,\n  name: n,\n  connecting: t,\n  label: o\n}) => {\n  const a = bt().find((s) => s.name === n), c = kn();\n  return e && c && a?.icon ? /* @__PURE__ */ Me(De, {\n    children: [/* @__PURE__ */ N(Gt, {\n      src: a.icon\n    }), \"\\u20B3\", \" \", parseInt((parseInt(c, 10) / 1e6).toString(), 10), \".\", /* @__PURE__ */ N(Wn, {\n      children: c.substr(c.length - 6)\n    })]\n  }) : e && a?.icon ? /* @__PURE__ */ N(De, {\n    children: /* @__PURE__ */ N(Gt, {\n      src: a.icon\n    })\n  }) : t ? /* @__PURE__ */ N(De, {\n    children: \"Connecting...\"\n  }) : /* @__PURE__ */ Me(De, {\n    children: [o, \" \", /* @__PURE__ */ N(ar, {})]\n  });\n}, Ln = fe.button.withConfig({\n  displayName: \"CardanoWallet__StyledMenuButton\",\n  componentId: \"sc-13vl5pq-0\"\n})({\n  display: \"flex\",\n  width: \"15rem\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  borderTopLeftRadius: \"0.375rem\",\n  borderTopRightRadius: \"0.375rem\",\n  borderWidth: \"1px\",\n  paddingLeft: \"1rem\",\n  paddingRight: \"1rem\",\n  paddingTop: \"0.5rem\",\n  paddingBottom: \"0.5rem\",\n  fontSize: \"1.125rem\",\n  lineHeight: \"1.75rem\",\n  fontWeight: \"400\",\n  \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n  \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n  boxShadow: \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n}), Fn = fe.div.withConfig({\n  displayName: \"CardanoWallet__StyledMenuList\",\n  componentId: \"sc-13vl5pq-1\"\n})(({\n  hidden: e\n}) => [{\n  position: \"absolute\",\n  width: \"15rem\",\n  borderBottomRightRadius: \"0.375rem\",\n  borderBottomLeftRadius: \"0.375rem\",\n  borderWidth: \"1px\",\n  textAlign: \"center\",\n  \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n  \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n  boxShadow: \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n  \"--tw-backdrop-blur\": \"blur(8px)\",\n  backdropFilter: \"var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)\"\n}, e && {\n  display: \"none\"\n}]), eo = ({\n  label: e = \"Connect Wallet\",\n  onConnected: n = void 0\n}) => {\n  const t = bt(), [o, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), {\n    connect: c,\n    connecting: s,\n    connected: f,\n    disconnect: h,\n    name: v\n  } = St();\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    f && n && n();\n  }, [f]), /* @__PURE__ */ Me(\"div\", {\n    style: {\n      width: \"fit-content\"\n    },\n    onMouseEnter: () => a(!1),\n    onMouseLeave: () => a(!0),\n    children: [/* @__PURE__ */ N(Ln, {\n      type: \"button\",\n      className: \"mr-wallet-button\",\n      onClick: () => a(!o),\n      children: /* @__PURE__ */ N($n, {\n        name: v,\n        connected: f,\n        connecting: s,\n        label: e\n      })\n    }), /* @__PURE__ */ N(Fn, {\n      hidden: o,\n      className: \"mr-menu-list\",\n      children: !f && t.length > 0 ? t.map((g, C) => /* @__PURE__ */ N(mt, {\n        icon: g.icon,\n        label: g.name,\n        action: () => {\n          c(g.name), a(!o);\n        },\n        active: v === g.name\n      }, C)) : t.length === 0 ? /* @__PURE__ */ N(\"span\", {\n        children: \"No Wallet Found\"\n      }) : /* @__PURE__ */ N(De, {\n        children: /* @__PURE__ */ N(mt, {\n          active: !1,\n          label: \"disconnect\",\n          action: h,\n          icon: void 0\n        })\n      })\n    })]\n  });\n}, zn = fe.svg.withConfig({\n  displayName: \"MeshLogo__StyledLogo\",\n  componentId: \"sc-1nwgent-0\"\n})({\n  height: \"4rem\",\n  padding: \"0.5rem\"\n}), Yn = () => /* @__PURE__ */ N(zn, {\n  fill: \"currentColor\",\n  viewBox: \"0 0 300 200\",\n  xmlns: \"http://www.w3.org/2000/svg\",\n  children: /* @__PURE__ */ N(\"path\", {\n    d: \"m289 127-45-60-45-60c-.9-1.3-2.4-2-4-2s-3.1.7-4 2l-37 49.3c-2 2.7-6 2.7-8 0l-37-49.3c-.9-1.3-2.4-2-4-2s-3.1.7-4 2l-45 60-45 60c-1.3 1.8-1.3 4.2 0 6l45 60c.9 1.3 2.4 2 4 2s3.1-.7 4-2l37-49.3c2-2.7 6-2.7 8 0l37 49.3c.9 1.3 2.4 2 4 2s3.1-.7 4-2l37-49.3c2-2.7 6-2.7 8 0l37 49.3c.9 1.3 2.4 2 4 2s3.1-.7 4-2l45-60c1.3-1.8 1.3-4.2 0-6zm-90-103.3 32.5 43.3c1.3 1.8 1.3 4.2 0 6l-32.5 43.3c-2 2.7-6 2.7-8 0l-32.5-43.3c-1.3-1.8-1.3-4.2 0-6l32.5-43.3c2-2.7 6-2.7 8 0zm-90 0 32.5 43.3c1.3 1.8 1.3 4.2 0 6l-32.5 43.3c-2 2.7-6 2.7-8 0l-32.5-43.3c-1.3-1.8-1.3-4.2 0-6l32.5-43.3c2-2.7 6-2.7 8 0zm-53 152.6-32.5-43.3c-1.3-1.8-1.3-4.2 0-6l32.5-43.3c2-2.7 6-2.7 8 0l32.5 43.3c1.3 1.8 1.3 4.2 0 6l-32.5 43.3c-2 2.7-6 2.7-8 0zm90 0-32.5-43.3c-1.3-1.8-1.3-4.2 0-6l32.5-43.3c2-2.7 6-2.7 8 0l32.5 43.3c1.3 1.8 1.3 4.2 0 6l-32.5 43.3c-2 2.7-6 2.7-8 0zm90 0-32.5-43.3c-1.3-1.8-1.3-4.2 0-6l32.5-43.3c2-2.7 6-2.7 8 0l32.5 43.3c1.3 1.8 1.3 4.2 0 6l-32.5 43.3c-2 2.7-6 2.7-8 0z\"\n  })\n}), Bn = fe.a.withConfig({\n  displayName: \"MeshBadge__StyledLink\",\n  componentId: \"sc-fcpuc3-0\"\n})({\n  display: \"flex\",\n  maxWidth: \"fit-content\",\n  flexDirection: \"column\",\n  alignItems: \"center\",\n  borderRadius: \"0.375rem\",\n  borderWidth: \"1px\",\n  borderStyle: \"solid\",\n  borderColor: \"currentColor\",\n  padding: \"0.25rem\",\n  fontSize: \"1.25rem\",\n  lineHeight: \"1.75rem\",\n  fontWeight: \"600\",\n  \"--tw-text-opacity\": \"1\",\n  color: \"rgb(68 64 60 / var(--tw-text-opacity))\",\n  textDecorationLine: \"none\"\n}), to = ({\n  dark: e = !1\n}) => /* @__PURE__ */ Me(Bn, {\n  style: {\n    color: e ? \"#EEEEEE\" : \"#111111\",\n    backgroundColor: e ? \"#111111\" : \"#EEEEEE\"\n  },\n  href: \"https://meshjs.dev/\",\n  rel: \"noopener noreferrer\",\n  target: \"_blank\",\n  children: [/* @__PURE__ */ N(Yn, {}), \"Mesh\"]\n}), Vn = fe.button.withConfig({\n  displayName: \"StakeButton__StyledMenuButton\",\n  componentId: \"sc-2hlzah-0\"\n})({\n  display: \"flex\",\n  width: \"15rem\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  borderTopLeftRadius: \"0.375rem\",\n  borderTopRightRadius: \"0.375rem\",\n  borderWidth: \"1px\",\n  paddingLeft: \"1rem\",\n  paddingRight: \"1rem\",\n  paddingTop: \"0.5rem\",\n  paddingBottom: \"0.5rem\",\n  fontSize: \"1.125rem\",\n  lineHeight: \"1.75rem\",\n  fontWeight: \"400\",\n  \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n  \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n  boxShadow: \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\"\n}), Un = fe.div.withConfig({\n  displayName: \"StakeButton__StyledMenuList\",\n  componentId: \"sc-2hlzah-1\"\n})(({\n  hidden: e\n}) => [{\n  position: \"absolute\",\n  width: \"15rem\",\n  borderBottomRightRadius: \"0.375rem\",\n  borderBottomLeftRadius: \"0.375rem\",\n  borderWidth: \"1px\",\n  textAlign: \"center\",\n  \"--tw-shadow\": \"0 1px 2px 0 rgb(0 0 0 / 0.05)\",\n  \"--tw-shadow-colored\": \"0 1px 2px 0 var(--tw-shadow-color)\",\n  boxShadow: \"var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow)\",\n  \"--tw-backdrop-blur\": \"blur(8px)\",\n  backdropFilter: \"var(--tw-backdrop-blur) var(--tw-backdrop-brightness) var(--tw-backdrop-contrast) var(--tw-backdrop-grayscale) var(--tw-backdrop-hue-rotate) var(--tw-backdrop-invert) var(--tw-backdrop-opacity) var(--tw-backdrop-saturate) var(--tw-backdrop-sepia)\"\n}, e && {\n  display: \"none\"\n}]), ro = ({\n  poolId: e,\n  onCheck: n\n}) => {\n  const t = bt(), [o, a] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), {\n    connect: c,\n    connecting: s,\n    connected: f,\n    name: h\n  } = St();\n  return /* @__PURE__ */ Me(\"div\", {\n    style: {\n      width: \"fit-content\"\n    },\n    onMouseEnter: () => a(!1),\n    onMouseLeave: () => a(!0),\n    children: [/* @__PURE__ */ N(Vn, {\n      type: \"button\",\n      onClick: () => a(!o),\n      children: f ? /* @__PURE__ */ N(Hn, {\n        poolId: e,\n        onCheck: n\n      }) : s ? /* @__PURE__ */ N(De, {\n        children: \"Connecting...\"\n      }) : /* @__PURE__ */ Me(De, {\n        children: [\"Connect Wallet \", /* @__PURE__ */ N(ar, {})]\n      })\n    }), /* @__PURE__ */ N(Un, {\n      hidden: o || f,\n      children: t.length > 0 ? t.map((v, g) => /* @__PURE__ */ N(mt, {\n        icon: v.icon,\n        label: v.name,\n        action: () => {\n          c(v.name), a(!o);\n        },\n        active: h === v.name\n      }, g)) : /* @__PURE__ */ N(\"span\", {\n        children: \"No Wallet Found\"\n      })\n    })]\n  });\n}, Hn = ({\n  poolId: e,\n  onCheck: n\n}) => {\n  const t = Tn(), {\n    wallet: o\n  } = St(), a = An(), [c, s] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [f, h] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [v, g] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), [C, D] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [F, E] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), O = async () => {\n    try {\n      if (h(!0), a) {\n        const y = await n(a);\n        g(y);\n      }\n      h(!1);\n    } catch (y) {\n      s(y);\n    }\n  }, x = async () => {\n    D(!0), E(!1);\n    try {\n      if (a) {\n        const y = await t.registerStake(a).delegateStake(a, e).build(), T = await o.signTx(y), _ = await o.submitTx(T);\n        console.log(\"txHash\", _), E(!0);\n      }\n    } catch (y) {\n      console.error(\"error\", y), s(y);\n    }\n    D(!1);\n  }, I = async () => {\n    D(!0), E(!1);\n    try {\n      if (a) {\n        const y = await t.delegateStake(a, e).build(), T = await o.signTx(y), _ = await o.submitTx(T);\n        E(!0);\n      }\n    } catch (y) {\n      console.error(\"error\", y), s(y);\n    }\n    D(!1);\n  };\n  return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    O();\n  }, [a]), f ? /* @__PURE__ */ N(\"span\", {\n    children: \"Checking...\"\n  }) : C ? /* @__PURE__ */ N(\"span\", {\n    children: \"Loading...\"\n  }) : F ? /* @__PURE__ */ N(\"span\", {\n    children: \"Stake Delegated\"\n  }) : v?.active ? v.poolId === e ? /* @__PURE__ */ N(\"span\", {\n    children: \"Stake Delegated\"\n  }) : /* @__PURE__ */ N(\"span\", {\n    onClick: I,\n    children: \"Delegate Stake\"\n  }) : /* @__PURE__ */ N(\"span\", {\n    onClick: x,\n    children: \"Register Address\"\n  });\n};\n\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@meshsdk/react/dist/react.js\n"));

/***/ }),

/***/ "./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm":
/*!*****************************************************************************************************************************!*\
  !*** ./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.wasm ***!
  \*****************************************************************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __webpack_instantiate__ = function([WEBPACK_IMPORTED_MODULE_0]) {
	return __webpack_require__.v(exports, module.id, "70d822e6f2e7e3cd", {
		"./cardano_serialization_lib_bg.js": {
			"__wbindgen_object_drop_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,
			"__wbindgen_string_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_new,
			"__wbindgen_error_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_error_new,
			"__wbindgen_string_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_get,
			"__wbindgen_number_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_new,
			"__wbindgen_object_clone_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_clone_ref,
			"__wbindgen_is_object": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_object,
			"__wbg_String_91fba7ded13ba54c": WEBPACK_IMPORTED_MODULE_0.__wbg_String_91fba7ded13ba54c,
			"__wbg_set_20cbc34131e76824": WEBPACK_IMPORTED_MODULE_0.__wbg_set_20cbc34131e76824,
			"__wbg_crypto_e1d53a1d73fb10b8": WEBPACK_IMPORTED_MODULE_0.__wbg_crypto_e1d53a1d73fb10b8,
			"__wbg_process_038c26bf42b093f8": WEBPACK_IMPORTED_MODULE_0.__wbg_process_038c26bf42b093f8,
			"__wbg_versions_ab37218d2f0b24a8": WEBPACK_IMPORTED_MODULE_0.__wbg_versions_ab37218d2f0b24a8,
			"__wbg_node_080f4b19d15bc1fe": WEBPACK_IMPORTED_MODULE_0.__wbg_node_080f4b19d15bc1fe,
			"__wbindgen_is_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_string,
			"__wbg_require_78a3dcfbdba9cbce": WEBPACK_IMPORTED_MODULE_0.__wbg_require_78a3dcfbdba9cbce,
			"__wbg_msCrypto_6e7d3e1f92610cbb": WEBPACK_IMPORTED_MODULE_0.__wbg_msCrypto_6e7d3e1f92610cbb,
			"__wbg_getRandomValues_805f1c3d65988a5a": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_805f1c3d65988a5a,
			"__wbg_randomFillSync_6894564c2c334c42": WEBPACK_IMPORTED_MODULE_0.__wbg_randomFillSync_6894564c2c334c42,
			"__wbg_new_1d9a920c6bfc44a8": WEBPACK_IMPORTED_MODULE_0.__wbg_new_1d9a920c6bfc44a8,
			"__wbindgen_is_function": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_function,
			"__wbg_newnoargs_b5b063fc6c2f0376": WEBPACK_IMPORTED_MODULE_0.__wbg_newnoargs_b5b063fc6c2f0376,
			"__wbg_new_268f7b7dd3430798": WEBPACK_IMPORTED_MODULE_0.__wbg_new_268f7b7dd3430798,
			"__wbg_call_97ae9d8645dc388b": WEBPACK_IMPORTED_MODULE_0.__wbg_call_97ae9d8645dc388b,
			"__wbg_new_0b9bfdd97583284e": WEBPACK_IMPORTED_MODULE_0.__wbg_new_0b9bfdd97583284e,
			"__wbg_self_6d479506f72c6a71": WEBPACK_IMPORTED_MODULE_0.__wbg_self_6d479506f72c6a71,
			"__wbg_window_f2557cc78490aceb": WEBPACK_IMPORTED_MODULE_0.__wbg_window_f2557cc78490aceb,
			"__wbg_globalThis_7f206bda628d5286": WEBPACK_IMPORTED_MODULE_0.__wbg_globalThis_7f206bda628d5286,
			"__wbg_global_ba75c50d1cf384f4": WEBPACK_IMPORTED_MODULE_0.__wbg_global_ba75c50d1cf384f4,
			"__wbindgen_is_undefined": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_undefined,
			"__wbg_set_a68214f35c417fa9": WEBPACK_IMPORTED_MODULE_0.__wbg_set_a68214f35c417fa9,
			"__wbg_call_168da88779e35f61": WEBPACK_IMPORTED_MODULE_0.__wbg_call_168da88779e35f61,
			"__wbg_set_933729cf5b66ac11": WEBPACK_IMPORTED_MODULE_0.__wbg_set_933729cf5b66ac11,
			"__wbg_buffer_3f3d764d4747d564": WEBPACK_IMPORTED_MODULE_0.__wbg_buffer_3f3d764d4747d564,
			"__wbg_new_8c3f0052272a457a": WEBPACK_IMPORTED_MODULE_0.__wbg_new_8c3f0052272a457a,
			"__wbg_set_83db9690f9353e79": WEBPACK_IMPORTED_MODULE_0.__wbg_set_83db9690f9353e79,
			"__wbg_length_9e1ae1900cb0fbd5": WEBPACK_IMPORTED_MODULE_0.__wbg_length_9e1ae1900cb0fbd5,
			"__wbg_newwithlength_f5933855e4f48a19": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithlength_f5933855e4f48a19,
			"__wbg_subarray_58ad4efbb5bcb886": WEBPACK_IMPORTED_MODULE_0.__wbg_subarray_58ad4efbb5bcb886,
			"__wbg_new_d87f272aec784ec0": WEBPACK_IMPORTED_MODULE_0.__wbg_new_d87f272aec784ec0,
			"__wbg_call_eae29933372a39be": WEBPACK_IMPORTED_MODULE_0.__wbg_call_eae29933372a39be,
			"__wbindgen_jsval_eq": WEBPACK_IMPORTED_MODULE_0.__wbindgen_jsval_eq,
			"__wbg_self_e0b3266d2d9eba1a": WEBPACK_IMPORTED_MODULE_0.__wbg_self_e0b3266d2d9eba1a,
			"__wbg_crypto_e95a6e54c5c2e37f": WEBPACK_IMPORTED_MODULE_0.__wbg_crypto_e95a6e54c5c2e37f,
			"__wbg_getRandomValues_dc67302a7bd1aec5": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_dc67302a7bd1aec5,
			"__wbg_require_0993fe224bf8e202": WEBPACK_IMPORTED_MODULE_0.__wbg_require_0993fe224bf8e202,
			"__wbg_randomFillSync_dd2297de5917c74e": WEBPACK_IMPORTED_MODULE_0.__wbg_randomFillSync_dd2297de5917c74e,
			"__wbg_getRandomValues_02639197c8166a96": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_02639197c8166a96,
			"__wbindgen_debug_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_debug_string,
			"__wbindgen_throw": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,
			"__wbindgen_memory": WEBPACK_IMPORTED_MODULE_0.__wbindgen_memory
		}
	});
}
__webpack_require__.a(module, async function(__webpack_handle_async_dependencies__, __webpack_async_result__) {
	try {
	/* harmony import */ var WEBPACK_IMPORTED_MODULE_0 = __webpack_require__(/*! ./cardano_serialization_lib_bg.js */ "./node_modules/@meshsdk/core/node_modules/@emurgo/cardano-serialization-lib-browser/cardano_serialization_lib_bg.js");
	var __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([WEBPACK_IMPORTED_MODULE_0]);
	var [WEBPACK_IMPORTED_MODULE_0] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__;
	await __webpack_require__.v(exports, module.id, "70d822e6f2e7e3cd", {
		"./cardano_serialization_lib_bg.js": {
			"__wbindgen_object_drop_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_drop_ref,
			"__wbindgen_string_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_new,
			"__wbindgen_error_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_error_new,
			"__wbindgen_string_get": WEBPACK_IMPORTED_MODULE_0.__wbindgen_string_get,
			"__wbindgen_number_new": WEBPACK_IMPORTED_MODULE_0.__wbindgen_number_new,
			"__wbindgen_object_clone_ref": WEBPACK_IMPORTED_MODULE_0.__wbindgen_object_clone_ref,
			"__wbindgen_is_object": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_object,
			"__wbg_String_91fba7ded13ba54c": WEBPACK_IMPORTED_MODULE_0.__wbg_String_91fba7ded13ba54c,
			"__wbg_set_20cbc34131e76824": WEBPACK_IMPORTED_MODULE_0.__wbg_set_20cbc34131e76824,
			"__wbg_crypto_e1d53a1d73fb10b8": WEBPACK_IMPORTED_MODULE_0.__wbg_crypto_e1d53a1d73fb10b8,
			"__wbg_process_038c26bf42b093f8": WEBPACK_IMPORTED_MODULE_0.__wbg_process_038c26bf42b093f8,
			"__wbg_versions_ab37218d2f0b24a8": WEBPACK_IMPORTED_MODULE_0.__wbg_versions_ab37218d2f0b24a8,
			"__wbg_node_080f4b19d15bc1fe": WEBPACK_IMPORTED_MODULE_0.__wbg_node_080f4b19d15bc1fe,
			"__wbindgen_is_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_string,
			"__wbg_require_78a3dcfbdba9cbce": WEBPACK_IMPORTED_MODULE_0.__wbg_require_78a3dcfbdba9cbce,
			"__wbg_msCrypto_6e7d3e1f92610cbb": WEBPACK_IMPORTED_MODULE_0.__wbg_msCrypto_6e7d3e1f92610cbb,
			"__wbg_getRandomValues_805f1c3d65988a5a": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_805f1c3d65988a5a,
			"__wbg_randomFillSync_6894564c2c334c42": WEBPACK_IMPORTED_MODULE_0.__wbg_randomFillSync_6894564c2c334c42,
			"__wbg_new_1d9a920c6bfc44a8": WEBPACK_IMPORTED_MODULE_0.__wbg_new_1d9a920c6bfc44a8,
			"__wbindgen_is_function": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_function,
			"__wbg_newnoargs_b5b063fc6c2f0376": WEBPACK_IMPORTED_MODULE_0.__wbg_newnoargs_b5b063fc6c2f0376,
			"__wbg_new_268f7b7dd3430798": WEBPACK_IMPORTED_MODULE_0.__wbg_new_268f7b7dd3430798,
			"__wbg_call_97ae9d8645dc388b": WEBPACK_IMPORTED_MODULE_0.__wbg_call_97ae9d8645dc388b,
			"__wbg_new_0b9bfdd97583284e": WEBPACK_IMPORTED_MODULE_0.__wbg_new_0b9bfdd97583284e,
			"__wbg_self_6d479506f72c6a71": WEBPACK_IMPORTED_MODULE_0.__wbg_self_6d479506f72c6a71,
			"__wbg_window_f2557cc78490aceb": WEBPACK_IMPORTED_MODULE_0.__wbg_window_f2557cc78490aceb,
			"__wbg_globalThis_7f206bda628d5286": WEBPACK_IMPORTED_MODULE_0.__wbg_globalThis_7f206bda628d5286,
			"__wbg_global_ba75c50d1cf384f4": WEBPACK_IMPORTED_MODULE_0.__wbg_global_ba75c50d1cf384f4,
			"__wbindgen_is_undefined": WEBPACK_IMPORTED_MODULE_0.__wbindgen_is_undefined,
			"__wbg_set_a68214f35c417fa9": WEBPACK_IMPORTED_MODULE_0.__wbg_set_a68214f35c417fa9,
			"__wbg_call_168da88779e35f61": WEBPACK_IMPORTED_MODULE_0.__wbg_call_168da88779e35f61,
			"__wbg_set_933729cf5b66ac11": WEBPACK_IMPORTED_MODULE_0.__wbg_set_933729cf5b66ac11,
			"__wbg_buffer_3f3d764d4747d564": WEBPACK_IMPORTED_MODULE_0.__wbg_buffer_3f3d764d4747d564,
			"__wbg_new_8c3f0052272a457a": WEBPACK_IMPORTED_MODULE_0.__wbg_new_8c3f0052272a457a,
			"__wbg_set_83db9690f9353e79": WEBPACK_IMPORTED_MODULE_0.__wbg_set_83db9690f9353e79,
			"__wbg_length_9e1ae1900cb0fbd5": WEBPACK_IMPORTED_MODULE_0.__wbg_length_9e1ae1900cb0fbd5,
			"__wbg_newwithlength_f5933855e4f48a19": WEBPACK_IMPORTED_MODULE_0.__wbg_newwithlength_f5933855e4f48a19,
			"__wbg_subarray_58ad4efbb5bcb886": WEBPACK_IMPORTED_MODULE_0.__wbg_subarray_58ad4efbb5bcb886,
			"__wbg_new_d87f272aec784ec0": WEBPACK_IMPORTED_MODULE_0.__wbg_new_d87f272aec784ec0,
			"__wbg_call_eae29933372a39be": WEBPACK_IMPORTED_MODULE_0.__wbg_call_eae29933372a39be,
			"__wbindgen_jsval_eq": WEBPACK_IMPORTED_MODULE_0.__wbindgen_jsval_eq,
			"__wbg_self_e0b3266d2d9eba1a": WEBPACK_IMPORTED_MODULE_0.__wbg_self_e0b3266d2d9eba1a,
			"__wbg_crypto_e95a6e54c5c2e37f": WEBPACK_IMPORTED_MODULE_0.__wbg_crypto_e95a6e54c5c2e37f,
			"__wbg_getRandomValues_dc67302a7bd1aec5": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_dc67302a7bd1aec5,
			"__wbg_require_0993fe224bf8e202": WEBPACK_IMPORTED_MODULE_0.__wbg_require_0993fe224bf8e202,
			"__wbg_randomFillSync_dd2297de5917c74e": WEBPACK_IMPORTED_MODULE_0.__wbg_randomFillSync_dd2297de5917c74e,
			"__wbg_getRandomValues_02639197c8166a96": WEBPACK_IMPORTED_MODULE_0.__wbg_getRandomValues_02639197c8166a96,
			"__wbindgen_debug_string": WEBPACK_IMPORTED_MODULE_0.__wbindgen_debug_string,
			"__wbindgen_throw": WEBPACK_IMPORTED_MODULE_0.__wbindgen_throw,
			"__wbindgen_memory": WEBPACK_IMPORTED_MODULE_0.__wbindgen_memory
		}
	});
	__webpack_async_result__();
	} catch(e) { __webpack_async_result__(e); }
}, 1);

/***/ })

});